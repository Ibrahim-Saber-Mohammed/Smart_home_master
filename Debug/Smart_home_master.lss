
Smart_home_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000256  00800060  00006f36  00006fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008002b6  008002b6  00007220  2**0
                  ALLOC
  3 .stab         00004290  00000000  00000000  00007220  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bff  00000000  00000000  0000b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000d0af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000275  00000000  00000000  0000d2cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003510  00000000  00000000  0000d544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001823  00000000  00000000  00010a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000179c  00000000  00000000  00012277  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00013a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003b7  00000000  00000000  00013c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002420  00000000  00000000  0001400b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001642b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__vector_10>
      2c:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	ff e6       	ldi	r31, 0x6F	; 111
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 2b 	call	0x5796	; 0x5796 <main>
      8a:	0c 94 99 37 	jmp	0x6f32	; 0x6f32 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 01 12 	call	0x2402	; 0x2402 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__subsf3>
     1bc:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__fixunssfdi>:
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 62 37 	jmp	0x6ec4	; 0x6ec4 <__prologue_saves__>
     1f4:	7b 01       	movw	r14, r22
     1f6:	8c 01       	movw	r16, r24
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e8       	ldi	r20, 0x80	; 128
     1fe:	5f e3       	ldi	r21, 0x3F	; 63
     200:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
     204:	88 23       	and	r24, r24
     206:	4c f4       	brge	.+18     	; 0x21a <__fixunssfdi+0x32>
     208:	aa 24       	eor	r10, r10
     20a:	bb 24       	eor	r11, r11
     20c:	cc 24       	eor	r12, r12
     20e:	dd 24       	eor	r13, r13
     210:	ee 24       	eor	r14, r14
     212:	ff 24       	eor	r15, r15
     214:	00 e0       	ldi	r16, 0x00	; 0
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	86 c0       	rjmp	.+268    	; 0x326 <__fixunssfdi+0x13e>
     21a:	c8 01       	movw	r24, r16
     21c:	b7 01       	movw	r22, r14
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 e8       	ldi	r20, 0x80	; 128
     224:	5f e4       	ldi	r21, 0x4F	; 79
     226:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
     22a:	88 23       	and	r24, r24
     22c:	54 f4       	brge	.+20     	; 0x242 <__fixunssfdi+0x5a>
     22e:	c8 01       	movw	r24, r16
     230:	b7 01       	movw	r22, r14
     232:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     236:	5b 01       	movw	r10, r22
     238:	6c 01       	movw	r12, r24
     23a:	ee 24       	eor	r14, r14
     23c:	ff 24       	eor	r15, r15
     23e:	87 01       	movw	r16, r14
     240:	72 c0       	rjmp	.+228    	; 0x326 <__fixunssfdi+0x13e>
     242:	c8 01       	movw	r24, r16
     244:	b7 01       	movw	r22, r14
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e8       	ldi	r20, 0x80	; 128
     24c:	5f e5       	ldi	r21, 0x5F	; 95
     24e:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
     252:	87 fd       	sbrc	r24, 7
     254:	0f c0       	rjmp	.+30     	; 0x274 <__fixunssfdi+0x8c>
     256:	aa 24       	eor	r10, r10
     258:	aa 94       	dec	r10
     25a:	bb 24       	eor	r11, r11
     25c:	ba 94       	dec	r11
     25e:	cc 24       	eor	r12, r12
     260:	ca 94       	dec	r12
     262:	dd 24       	eor	r13, r13
     264:	da 94       	dec	r13
     266:	ee 24       	eor	r14, r14
     268:	ea 94       	dec	r14
     26a:	ff 24       	eor	r15, r15
     26c:	fa 94       	dec	r15
     26e:	0f ef       	ldi	r16, 0xFF	; 255
     270:	1f ef       	ldi	r17, 0xFF	; 255
     272:	59 c0       	rjmp	.+178    	; 0x326 <__fixunssfdi+0x13e>
     274:	c8 01       	movw	r24, r16
     276:	b7 01       	movw	r22, r14
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e8       	ldi	r20, 0x80	; 128
     27e:	5f e2       	ldi	r21, 0x2F	; 47
     280:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
     284:	7b 01       	movw	r14, r22
     286:	8c 01       	movw	r16, r24
     288:	22 24       	eor	r2, r2
     28a:	33 24       	eor	r3, r3
     28c:	21 01       	movw	r4, r2
     28e:	90 e1       	ldi	r25, 0x10	; 16
     290:	a9 2e       	mov	r10, r25
     292:	b1 2c       	mov	r11, r1
     294:	c1 2c       	mov	r12, r1
     296:	d1 2c       	mov	r13, r1
     298:	c0 e0       	ldi	r28, 0x00	; 0
     29a:	d0 e0       	ldi	r29, 0x00	; 0
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0a 2c       	mov	r0, r10
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <__fixunssfdi+0xc8>
     2a8:	66 0f       	add	r22, r22
     2aa:	77 1f       	adc	r23, r23
     2ac:	88 1f       	adc	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	0a 94       	dec	r0
     2b2:	d2 f7       	brpl	.-12     	; 0x2a8 <__fixunssfdi+0xc0>
     2b4:	0e 94 b5 12 	call	0x256a	; 0x256a <__floatunsisf>
     2b8:	3b 01       	movw	r6, r22
     2ba:	4c 01       	movw	r8, r24
     2bc:	c8 01       	movw	r24, r16
     2be:	b7 01       	movw	r22, r14
     2c0:	a4 01       	movw	r20, r8
     2c2:	93 01       	movw	r18, r6
     2c4:	0e 94 01 12 	call	0x2402	; 0x2402 <__gesf2>
     2c8:	88 23       	and	r24, r24
     2ca:	64 f0       	brlt	.+24     	; 0x2e4 <__fixunssfdi+0xfc>
     2cc:	2a 28       	or	r2, r10
     2ce:	3b 28       	or	r3, r11
     2d0:	4c 28       	or	r4, r12
     2d2:	5d 28       	or	r5, r13
     2d4:	c8 01       	movw	r24, r16
     2d6:	b7 01       	movw	r22, r14
     2d8:	a4 01       	movw	r20, r8
     2da:	93 01       	movw	r18, r6
     2dc:	0e 94 25 11 	call	0x224a	; 0x224a <__divsf3>
     2e0:	7b 01       	movw	r14, r22
     2e2:	8c 01       	movw	r16, r24
     2e4:	d6 94       	lsr	r13
     2e6:	c7 94       	ror	r12
     2e8:	b7 94       	ror	r11
     2ea:	a7 94       	ror	r10
     2ec:	21 96       	adiw	r28, 0x01	; 1
     2ee:	c5 30       	cpi	r28, 0x05	; 5
     2f0:	d1 05       	cpc	r29, r1
     2f2:	a1 f6       	brne	.-88     	; 0x29c <__fixunssfdi+0xb4>
     2f4:	c8 01       	movw	r24, r16
     2f6:	b7 01       	movw	r22, r14
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e8       	ldi	r20, 0x80	; 128
     2fe:	5f e4       	ldi	r21, 0x4F	; 79
     300:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
     304:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
     308:	5b 01       	movw	r10, r22
     30a:	6c 01       	movw	r12, r24
     30c:	9b 01       	movw	r18, r22
     30e:	a6 01       	movw	r20, r12
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	02 2d       	mov	r16, r2
     31a:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
     31e:	59 01       	movw	r10, r18
     320:	6a 01       	movw	r12, r20
     322:	7b 01       	movw	r14, r22
     324:	8c 01       	movw	r16, r24
     326:	95 01       	movw	r18, r10
     328:	a6 01       	movw	r20, r12
     32a:	b7 01       	movw	r22, r14
     32c:	c8 01       	movw	r24, r16
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	e2 e1       	ldi	r30, 0x12	; 18
     334:	0c 94 7e 37 	jmp	0x6efc	; 0x6efc <__epilogue_restores__>

00000338 <__udivdi3>:
     338:	ae e5       	ldi	r26, 0x5E	; 94
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	e2 ea       	ldi	r30, 0xA2	; 162
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	0c 94 62 37 	jmp	0x6ec4	; 0x6ec4 <__prologue_saves__>
     344:	a8 e0       	ldi	r26, 0x08	; 8
     346:	4e 01       	movw	r8, r28
     348:	08 94       	sec
     34a:	81 1c       	adc	r8, r1
     34c:	91 1c       	adc	r9, r1
     34e:	f4 01       	movw	r30, r8
     350:	6a 2e       	mov	r6, r26
     352:	11 92       	st	Z+, r1
     354:	6a 94       	dec	r6
     356:	e9 f7       	brne	.-6      	; 0x352 <__udivdi3+0x1a>
     358:	29 83       	std	Y+1, r18	; 0x01
     35a:	3a 83       	std	Y+2, r19	; 0x02
     35c:	4b 83       	std	Y+3, r20	; 0x03
     35e:	5c 83       	std	Y+4, r21	; 0x04
     360:	6d 83       	std	Y+5, r22	; 0x05
     362:	7e 83       	std	Y+6, r23	; 0x06
     364:	8f 83       	std	Y+7, r24	; 0x07
     366:	98 87       	std	Y+8, r25	; 0x08
     368:	ce 01       	movw	r24, r28
     36a:	09 96       	adiw	r24, 0x09	; 9
     36c:	fc 01       	movw	r30, r24
     36e:	11 92       	st	Z+, r1
     370:	aa 95       	dec	r26
     372:	e9 f7       	brne	.-6      	; 0x36e <__udivdi3+0x36>
     374:	a9 86       	std	Y+9, r10	; 0x09
     376:	ba 86       	std	Y+10, r11	; 0x0a
     378:	cb 86       	std	Y+11, r12	; 0x0b
     37a:	dc 86       	std	Y+12, r13	; 0x0c
     37c:	ed 86       	std	Y+13, r14	; 0x0d
     37e:	fe 86       	std	Y+14, r15	; 0x0e
     380:	0f 87       	std	Y+15, r16	; 0x0f
     382:	18 8b       	std	Y+16, r17	; 0x10
     384:	29 84       	ldd	r2, Y+9	; 0x09
     386:	3a 84       	ldd	r3, Y+10	; 0x0a
     388:	4b 84       	ldd	r4, Y+11	; 0x0b
     38a:	5c 84       	ldd	r5, Y+12	; 0x0c
     38c:	ed 84       	ldd	r14, Y+13	; 0x0d
     38e:	fe 84       	ldd	r15, Y+14	; 0x0e
     390:	0f 85       	ldd	r16, Y+15	; 0x0f
     392:	18 89       	ldd	r17, Y+16	; 0x10
     394:	69 80       	ldd	r6, Y+1	; 0x01
     396:	7a 80       	ldd	r7, Y+2	; 0x02
     398:	8b 80       	ldd	r8, Y+3	; 0x03
     39a:	9c 80       	ldd	r9, Y+4	; 0x04
     39c:	6d a6       	std	Y+45, r6	; 0x2d
     39e:	7e a6       	std	Y+46, r7	; 0x2e
     3a0:	8f a6       	std	Y+47, r8	; 0x2f
     3a2:	98 aa       	std	Y+48, r9	; 0x30
     3a4:	6d 80       	ldd	r6, Y+5	; 0x05
     3a6:	7e 80       	ldd	r7, Y+6	; 0x06
     3a8:	8f 80       	ldd	r8, Y+7	; 0x07
     3aa:	98 84       	ldd	r9, Y+8	; 0x08
     3ac:	e1 14       	cp	r14, r1
     3ae:	f1 04       	cpc	r15, r1
     3b0:	01 05       	cpc	r16, r1
     3b2:	11 05       	cpc	r17, r1
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <__udivdi3+0x80>
     3b6:	b3 c3       	rjmp	.+1894   	; 0xb1e <__stack+0x2bf>
     3b8:	62 14       	cp	r6, r2
     3ba:	73 04       	cpc	r7, r3
     3bc:	84 04       	cpc	r8, r4
     3be:	95 04       	cpc	r9, r5
     3c0:	08 f0       	brcs	.+2      	; 0x3c4 <__udivdi3+0x8c>
     3c2:	3d c1       	rjmp	.+634    	; 0x63e <__udivdi3+0x306>
     3c4:	00 e0       	ldi	r16, 0x00	; 0
     3c6:	20 16       	cp	r2, r16
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	30 06       	cpc	r3, r16
     3cc:	01 e0       	ldi	r16, 0x01	; 1
     3ce:	40 06       	cpc	r4, r16
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	50 06       	cpc	r5, r16
     3d4:	88 f4       	brcc	.+34     	; 0x3f8 <__udivdi3+0xc0>
     3d6:	1f ef       	ldi	r17, 0xFF	; 255
     3d8:	21 16       	cp	r2, r17
     3da:	31 04       	cpc	r3, r1
     3dc:	41 04       	cpc	r4, r1
     3de:	51 04       	cpc	r5, r1
     3e0:	39 f0       	breq	.+14     	; 0x3f0 <__udivdi3+0xb8>
     3e2:	30 f0       	brcs	.+12     	; 0x3f0 <__udivdi3+0xb8>
     3e4:	48 e0       	ldi	r20, 0x08	; 8
     3e6:	e4 2e       	mov	r14, r20
     3e8:	f1 2c       	mov	r15, r1
     3ea:	01 2d       	mov	r16, r1
     3ec:	11 2d       	mov	r17, r1
     3ee:	18 c0       	rjmp	.+48     	; 0x420 <__udivdi3+0xe8>
     3f0:	ee 24       	eor	r14, r14
     3f2:	ff 24       	eor	r15, r15
     3f4:	87 01       	movw	r16, r14
     3f6:	14 c0       	rjmp	.+40     	; 0x420 <__udivdi3+0xe8>
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	22 16       	cp	r2, r18
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	32 06       	cpc	r3, r18
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	42 06       	cpc	r4, r18
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	52 06       	cpc	r5, r18
     408:	30 f0       	brcs	.+12     	; 0x416 <__udivdi3+0xde>
     40a:	38 e1       	ldi	r19, 0x18	; 24
     40c:	e3 2e       	mov	r14, r19
     40e:	f1 2c       	mov	r15, r1
     410:	01 2d       	mov	r16, r1
     412:	11 2d       	mov	r17, r1
     414:	05 c0       	rjmp	.+10     	; 0x420 <__udivdi3+0xe8>
     416:	20 e1       	ldi	r18, 0x10	; 16
     418:	e2 2e       	mov	r14, r18
     41a:	f1 2c       	mov	r15, r1
     41c:	01 2d       	mov	r16, r1
     41e:	11 2d       	mov	r17, r1
     420:	d2 01       	movw	r26, r4
     422:	c1 01       	movw	r24, r2
     424:	0e 2c       	mov	r0, r14
     426:	04 c0       	rjmp	.+8      	; 0x430 <__udivdi3+0xf8>
     428:	b6 95       	lsr	r27
     42a:	a7 95       	ror	r26
     42c:	97 95       	ror	r25
     42e:	87 95       	ror	r24
     430:	0a 94       	dec	r0
     432:	d2 f7       	brpl	.-12     	; 0x428 <__udivdi3+0xf0>
     434:	8c 55       	subi	r24, 0x5C	; 92
     436:	9e 4f       	sbci	r25, 0xFE	; 254
     438:	dc 01       	movw	r26, r24
     43a:	2c 91       	ld	r18, X
     43c:	80 e2       	ldi	r24, 0x20	; 32
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a0 e0       	ldi	r26, 0x00	; 0
     442:	b0 e0       	ldi	r27, 0x00	; 0
     444:	8e 19       	sub	r24, r14
     446:	9f 09       	sbc	r25, r15
     448:	a0 0b       	sbc	r26, r16
     44a:	b1 0b       	sbc	r27, r17
     44c:	7c 01       	movw	r14, r24
     44e:	8d 01       	movw	r16, r26
     450:	e2 1a       	sub	r14, r18
     452:	f1 08       	sbc	r15, r1
     454:	01 09       	sbc	r16, r1
     456:	11 09       	sbc	r17, r1
     458:	e1 14       	cp	r14, r1
     45a:	f1 04       	cpc	r15, r1
     45c:	01 05       	cpc	r16, r1
     45e:	11 05       	cpc	r17, r1
     460:	a1 f1       	breq	.+104    	; 0x4ca <__udivdi3+0x192>
     462:	0e 2c       	mov	r0, r14
     464:	04 c0       	rjmp	.+8      	; 0x46e <__udivdi3+0x136>
     466:	22 0c       	add	r2, r2
     468:	33 1c       	adc	r3, r3
     46a:	44 1c       	adc	r4, r4
     46c:	55 1c       	adc	r5, r5
     46e:	0a 94       	dec	r0
     470:	d2 f7       	brpl	.-12     	; 0x466 <__udivdi3+0x12e>
     472:	a4 01       	movw	r20, r8
     474:	93 01       	movw	r18, r6
     476:	0e 2c       	mov	r0, r14
     478:	04 c0       	rjmp	.+8      	; 0x482 <__udivdi3+0x14a>
     47a:	22 0f       	add	r18, r18
     47c:	33 1f       	adc	r19, r19
     47e:	44 1f       	adc	r20, r20
     480:	55 1f       	adc	r21, r21
     482:	0a 94       	dec	r0
     484:	d2 f7       	brpl	.-12     	; 0x47a <__udivdi3+0x142>
     486:	80 e2       	ldi	r24, 0x20	; 32
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	8e 19       	sub	r24, r14
     48c:	9f 09       	sbc	r25, r15
     48e:	6d a4       	ldd	r6, Y+45	; 0x2d
     490:	7e a4       	ldd	r7, Y+46	; 0x2e
     492:	8f a4       	ldd	r8, Y+47	; 0x2f
     494:	98 a8       	ldd	r9, Y+48	; 0x30
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__udivdi3+0x168>
     498:	96 94       	lsr	r9
     49a:	87 94       	ror	r8
     49c:	77 94       	ror	r7
     49e:	67 94       	ror	r6
     4a0:	8a 95       	dec	r24
     4a2:	d2 f7       	brpl	.-12     	; 0x498 <__udivdi3+0x160>
     4a4:	62 2a       	or	r6, r18
     4a6:	73 2a       	or	r7, r19
     4a8:	84 2a       	or	r8, r20
     4aa:	95 2a       	or	r9, r21
     4ac:	ad a4       	ldd	r10, Y+45	; 0x2d
     4ae:	be a4       	ldd	r11, Y+46	; 0x2e
     4b0:	cf a4       	ldd	r12, Y+47	; 0x2f
     4b2:	d8 a8       	ldd	r13, Y+48	; 0x30
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <__udivdi3+0x186>
     4b6:	aa 0c       	add	r10, r10
     4b8:	bb 1c       	adc	r11, r11
     4ba:	cc 1c       	adc	r12, r12
     4bc:	dd 1c       	adc	r13, r13
     4be:	ea 94       	dec	r14
     4c0:	d2 f7       	brpl	.-12     	; 0x4b6 <__udivdi3+0x17e>
     4c2:	ad a6       	std	Y+45, r10	; 0x2d
     4c4:	be a6       	std	Y+46, r11	; 0x2e
     4c6:	cf a6       	std	Y+47, r12	; 0x2f
     4c8:	d8 aa       	std	Y+48, r13	; 0x30
     4ca:	62 01       	movw	r12, r4
     4cc:	ee 24       	eor	r14, r14
     4ce:	ff 24       	eor	r15, r15
     4d0:	cd aa       	std	Y+53, r12	; 0x35
     4d2:	de aa       	std	Y+54, r13	; 0x36
     4d4:	ef aa       	std	Y+55, r14	; 0x37
     4d6:	f8 ae       	std	Y+56, r15	; 0x38
     4d8:	92 01       	movw	r18, r4
     4da:	81 01       	movw	r16, r2
     4dc:	20 70       	andi	r18, 0x00	; 0
     4de:	30 70       	andi	r19, 0x00	; 0
     4e0:	09 af       	std	Y+57, r16	; 0x39
     4e2:	1a af       	std	Y+58, r17	; 0x3a
     4e4:	2b af       	std	Y+59, r18	; 0x3b
     4e6:	3c af       	std	Y+60, r19	; 0x3c
     4e8:	c4 01       	movw	r24, r8
     4ea:	b3 01       	movw	r22, r6
     4ec:	a7 01       	movw	r20, r14
     4ee:	96 01       	movw	r18, r12
     4f0:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     4f4:	7b 01       	movw	r14, r22
     4f6:	8c 01       	movw	r16, r24
     4f8:	c4 01       	movw	r24, r8
     4fa:	b3 01       	movw	r22, r6
     4fc:	2d a9       	ldd	r18, Y+53	; 0x35
     4fe:	3e a9       	ldd	r19, Y+54	; 0x36
     500:	4f a9       	ldd	r20, Y+55	; 0x37
     502:	58 ad       	ldd	r21, Y+56	; 0x38
     504:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     508:	c9 01       	movw	r24, r18
     50a:	da 01       	movw	r26, r20
     50c:	3c 01       	movw	r6, r24
     50e:	4d 01       	movw	r8, r26
     510:	c4 01       	movw	r24, r8
     512:	b3 01       	movw	r22, r6
     514:	29 ad       	ldd	r18, Y+57	; 0x39
     516:	3a ad       	ldd	r19, Y+58	; 0x3a
     518:	4b ad       	ldd	r20, Y+59	; 0x3b
     51a:	5c ad       	ldd	r21, Y+60	; 0x3c
     51c:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     520:	9b 01       	movw	r18, r22
     522:	ac 01       	movw	r20, r24
     524:	87 01       	movw	r16, r14
     526:	ff 24       	eor	r15, r15
     528:	ee 24       	eor	r14, r14
     52a:	ad a4       	ldd	r10, Y+45	; 0x2d
     52c:	be a4       	ldd	r11, Y+46	; 0x2e
     52e:	cf a4       	ldd	r12, Y+47	; 0x2f
     530:	d8 a8       	ldd	r13, Y+48	; 0x30
     532:	c6 01       	movw	r24, r12
     534:	aa 27       	eor	r26, r26
     536:	bb 27       	eor	r27, r27
     538:	57 01       	movw	r10, r14
     53a:	68 01       	movw	r12, r16
     53c:	a8 2a       	or	r10, r24
     53e:	b9 2a       	or	r11, r25
     540:	ca 2a       	or	r12, r26
     542:	db 2a       	or	r13, r27
     544:	a2 16       	cp	r10, r18
     546:	b3 06       	cpc	r11, r19
     548:	c4 06       	cpc	r12, r20
     54a:	d5 06       	cpc	r13, r21
     54c:	e0 f4       	brcc	.+56     	; 0x586 <__udivdi3+0x24e>
     54e:	08 94       	sec
     550:	61 08       	sbc	r6, r1
     552:	71 08       	sbc	r7, r1
     554:	81 08       	sbc	r8, r1
     556:	91 08       	sbc	r9, r1
     558:	a2 0c       	add	r10, r2
     55a:	b3 1c       	adc	r11, r3
     55c:	c4 1c       	adc	r12, r4
     55e:	d5 1c       	adc	r13, r5
     560:	a2 14       	cp	r10, r2
     562:	b3 04       	cpc	r11, r3
     564:	c4 04       	cpc	r12, r4
     566:	d5 04       	cpc	r13, r5
     568:	70 f0       	brcs	.+28     	; 0x586 <__udivdi3+0x24e>
     56a:	a2 16       	cp	r10, r18
     56c:	b3 06       	cpc	r11, r19
     56e:	c4 06       	cpc	r12, r20
     570:	d5 06       	cpc	r13, r21
     572:	48 f4       	brcc	.+18     	; 0x586 <__udivdi3+0x24e>
     574:	08 94       	sec
     576:	61 08       	sbc	r6, r1
     578:	71 08       	sbc	r7, r1
     57a:	81 08       	sbc	r8, r1
     57c:	91 08       	sbc	r9, r1
     57e:	a2 0c       	add	r10, r2
     580:	b3 1c       	adc	r11, r3
     582:	c4 1c       	adc	r12, r4
     584:	d5 1c       	adc	r13, r5
     586:	a2 1a       	sub	r10, r18
     588:	b3 0a       	sbc	r11, r19
     58a:	c4 0a       	sbc	r12, r20
     58c:	d5 0a       	sbc	r13, r21
     58e:	c6 01       	movw	r24, r12
     590:	b5 01       	movw	r22, r10
     592:	2d a9       	ldd	r18, Y+53	; 0x35
     594:	3e a9       	ldd	r19, Y+54	; 0x36
     596:	4f a9       	ldd	r20, Y+55	; 0x37
     598:	58 ad       	ldd	r21, Y+56	; 0x38
     59a:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     59e:	7b 01       	movw	r14, r22
     5a0:	8c 01       	movw	r16, r24
     5a2:	c6 01       	movw	r24, r12
     5a4:	b5 01       	movw	r22, r10
     5a6:	2d a9       	ldd	r18, Y+53	; 0x35
     5a8:	3e a9       	ldd	r19, Y+54	; 0x36
     5aa:	4f a9       	ldd	r20, Y+55	; 0x37
     5ac:	58 ad       	ldd	r21, Y+56	; 0x38
     5ae:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     5b2:	c9 01       	movw	r24, r18
     5b4:	da 01       	movw	r26, r20
     5b6:	5c 01       	movw	r10, r24
     5b8:	6d 01       	movw	r12, r26
     5ba:	c6 01       	movw	r24, r12
     5bc:	b5 01       	movw	r22, r10
     5be:	29 ad       	ldd	r18, Y+57	; 0x39
     5c0:	3a ad       	ldd	r19, Y+58	; 0x3a
     5c2:	4b ad       	ldd	r20, Y+59	; 0x3b
     5c4:	5c ad       	ldd	r21, Y+60	; 0x3c
     5c6:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     5ca:	9b 01       	movw	r18, r22
     5cc:	ac 01       	movw	r20, r24
     5ce:	87 01       	movw	r16, r14
     5d0:	ff 24       	eor	r15, r15
     5d2:	ee 24       	eor	r14, r14
     5d4:	8d a5       	ldd	r24, Y+45	; 0x2d
     5d6:	9e a5       	ldd	r25, Y+46	; 0x2e
     5d8:	af a5       	ldd	r26, Y+47	; 0x2f
     5da:	b8 a9       	ldd	r27, Y+48	; 0x30
     5dc:	a0 70       	andi	r26, 0x00	; 0
     5de:	b0 70       	andi	r27, 0x00	; 0
     5e0:	e8 2a       	or	r14, r24
     5e2:	f9 2a       	or	r15, r25
     5e4:	0a 2b       	or	r16, r26
     5e6:	1b 2b       	or	r17, r27
     5e8:	e2 16       	cp	r14, r18
     5ea:	f3 06       	cpc	r15, r19
     5ec:	04 07       	cpc	r16, r20
     5ee:	15 07       	cpc	r17, r21
     5f0:	c0 f4       	brcc	.+48     	; 0x622 <__udivdi3+0x2ea>
     5f2:	08 94       	sec
     5f4:	a1 08       	sbc	r10, r1
     5f6:	b1 08       	sbc	r11, r1
     5f8:	c1 08       	sbc	r12, r1
     5fa:	d1 08       	sbc	r13, r1
     5fc:	e2 0c       	add	r14, r2
     5fe:	f3 1c       	adc	r15, r3
     600:	04 1d       	adc	r16, r4
     602:	15 1d       	adc	r17, r5
     604:	e2 14       	cp	r14, r2
     606:	f3 04       	cpc	r15, r3
     608:	04 05       	cpc	r16, r4
     60a:	15 05       	cpc	r17, r5
     60c:	50 f0       	brcs	.+20     	; 0x622 <__udivdi3+0x2ea>
     60e:	e2 16       	cp	r14, r18
     610:	f3 06       	cpc	r15, r19
     612:	04 07       	cpc	r16, r20
     614:	15 07       	cpc	r17, r21
     616:	28 f4       	brcc	.+10     	; 0x622 <__udivdi3+0x2ea>
     618:	08 94       	sec
     61a:	a1 08       	sbc	r10, r1
     61c:	b1 08       	sbc	r11, r1
     61e:	c1 08       	sbc	r12, r1
     620:	d1 08       	sbc	r13, r1
     622:	d3 01       	movw	r26, r6
     624:	99 27       	eor	r25, r25
     626:	88 27       	eor	r24, r24
     628:	86 01       	movw	r16, r12
     62a:	75 01       	movw	r14, r10
     62c:	e8 2a       	or	r14, r24
     62e:	f9 2a       	or	r15, r25
     630:	0a 2b       	or	r16, r26
     632:	1b 2b       	or	r17, r27
     634:	e9 aa       	std	Y+49, r14	; 0x31
     636:	fa aa       	std	Y+50, r15	; 0x32
     638:	0b ab       	std	Y+51, r16	; 0x33
     63a:	1c ab       	std	Y+52, r17	; 0x34
     63c:	cf c4       	rjmp	.+2462   	; 0xfdc <__stack+0x77d>
     63e:	21 14       	cp	r2, r1
     640:	31 04       	cpc	r3, r1
     642:	41 04       	cpc	r4, r1
     644:	51 04       	cpc	r5, r1
     646:	71 f4       	brne	.+28     	; 0x664 <__udivdi3+0x32c>
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     65c:	c9 01       	movw	r24, r18
     65e:	da 01       	movw	r26, r20
     660:	1c 01       	movw	r2, r24
     662:	2d 01       	movw	r4, r26
     664:	00 e0       	ldi	r16, 0x00	; 0
     666:	20 16       	cp	r2, r16
     668:	00 e0       	ldi	r16, 0x00	; 0
     66a:	30 06       	cpc	r3, r16
     66c:	01 e0       	ldi	r16, 0x01	; 1
     66e:	40 06       	cpc	r4, r16
     670:	00 e0       	ldi	r16, 0x00	; 0
     672:	50 06       	cpc	r5, r16
     674:	88 f4       	brcc	.+34     	; 0x698 <__udivdi3+0x360>
     676:	1f ef       	ldi	r17, 0xFF	; 255
     678:	21 16       	cp	r2, r17
     67a:	31 04       	cpc	r3, r1
     67c:	41 04       	cpc	r4, r1
     67e:	51 04       	cpc	r5, r1
     680:	31 f0       	breq	.+12     	; 0x68e <__udivdi3+0x356>
     682:	28 f0       	brcs	.+10     	; 0x68e <__udivdi3+0x356>
     684:	48 e0       	ldi	r20, 0x08	; 8
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	17 c0       	rjmp	.+46     	; 0x6bc <__udivdi3+0x384>
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	12 c0       	rjmp	.+36     	; 0x6bc <__udivdi3+0x384>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	22 16       	cp	r2, r18
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	32 06       	cpc	r3, r18
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	42 06       	cpc	r4, r18
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	52 06       	cpc	r5, r18
     6a8:	28 f0       	brcs	.+10     	; 0x6b4 <__udivdi3+0x37c>
     6aa:	48 e1       	ldi	r20, 0x18	; 24
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	04 c0       	rjmp	.+8      	; 0x6bc <__udivdi3+0x384>
     6b4:	40 e1       	ldi	r20, 0x10	; 16
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	d2 01       	movw	r26, r4
     6be:	c1 01       	movw	r24, r2
     6c0:	04 2e       	mov	r0, r20
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__udivdi3+0x394>
     6c4:	b6 95       	lsr	r27
     6c6:	a7 95       	ror	r26
     6c8:	97 95       	ror	r25
     6ca:	87 95       	ror	r24
     6cc:	0a 94       	dec	r0
     6ce:	d2 f7       	brpl	.-12     	; 0x6c4 <__udivdi3+0x38c>
     6d0:	8c 55       	subi	r24, 0x5C	; 92
     6d2:	9e 4f       	sbci	r25, 0xFE	; 254
     6d4:	dc 01       	movw	r26, r24
     6d6:	2c 91       	ld	r18, X
     6d8:	e0 e2       	ldi	r30, 0x20	; 32
     6da:	ee 2e       	mov	r14, r30
     6dc:	f1 2c       	mov	r15, r1
     6de:	01 2d       	mov	r16, r1
     6e0:	11 2d       	mov	r17, r1
     6e2:	d8 01       	movw	r26, r16
     6e4:	c7 01       	movw	r24, r14
     6e6:	84 1b       	sub	r24, r20
     6e8:	95 0b       	sbc	r25, r21
     6ea:	a6 0b       	sbc	r26, r22
     6ec:	b7 0b       	sbc	r27, r23
     6ee:	82 1b       	sub	r24, r18
     6f0:	91 09       	sbc	r25, r1
     6f2:	a1 09       	sbc	r26, r1
     6f4:	b1 09       	sbc	r27, r1
     6f6:	00 97       	sbiw	r24, 0x00	; 0
     6f8:	a1 05       	cpc	r26, r1
     6fa:	b1 05       	cpc	r27, r1
     6fc:	61 f4       	brne	.+24     	; 0x716 <__udivdi3+0x3de>
     6fe:	64 01       	movw	r12, r8
     700:	53 01       	movw	r10, r6
     702:	a2 18       	sub	r10, r2
     704:	b3 08       	sbc	r11, r3
     706:	c4 08       	sbc	r12, r4
     708:	d5 08       	sbc	r13, r5
     70a:	31 e0       	ldi	r19, 0x01	; 1
     70c:	63 2e       	mov	r6, r19
     70e:	71 2c       	mov	r7, r1
     710:	81 2c       	mov	r8, r1
     712:	91 2c       	mov	r9, r1
     714:	1e c1       	rjmp	.+572    	; 0x952 <__stack+0xf3>
     716:	6f 96       	adiw	r28, 0x1f	; 31
     718:	8f af       	std	Y+63, r24	; 0x3f
     71a:	6f 97       	sbiw	r28, 0x1f	; 31
     71c:	08 2e       	mov	r0, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <__udivdi3+0x3f0>
     720:	22 0c       	add	r2, r2
     722:	33 1c       	adc	r3, r3
     724:	44 1c       	adc	r4, r4
     726:	55 1c       	adc	r5, r5
     728:	0a 94       	dec	r0
     72a:	d2 f7       	brpl	.-12     	; 0x720 <__udivdi3+0x3e8>
     72c:	ee 2d       	mov	r30, r14
     72e:	e8 1b       	sub	r30, r24
     730:	64 01       	movw	r12, r8
     732:	53 01       	movw	r10, r6
     734:	0e 2e       	mov	r0, r30
     736:	04 c0       	rjmp	.+8      	; 0x740 <__udivdi3+0x408>
     738:	d6 94       	lsr	r13
     73a:	c7 94       	ror	r12
     73c:	b7 94       	ror	r11
     73e:	a7 94       	ror	r10
     740:	0a 94       	dec	r0
     742:	d2 f7       	brpl	.-12     	; 0x738 <__udivdi3+0x400>
     744:	a4 01       	movw	r20, r8
     746:	93 01       	movw	r18, r6
     748:	6f 96       	adiw	r28, 0x1f	; 31
     74a:	0f ac       	ldd	r0, Y+63	; 0x3f
     74c:	6f 97       	sbiw	r28, 0x1f	; 31
     74e:	04 c0       	rjmp	.+8      	; 0x758 <__udivdi3+0x420>
     750:	22 0f       	add	r18, r18
     752:	33 1f       	adc	r19, r19
     754:	44 1f       	adc	r20, r20
     756:	55 1f       	adc	r21, r21
     758:	0a 94       	dec	r0
     75a:	d2 f7       	brpl	.-12     	; 0x750 <__udivdi3+0x418>
     75c:	6d a4       	ldd	r6, Y+45	; 0x2d
     75e:	7e a4       	ldd	r7, Y+46	; 0x2e
     760:	8f a4       	ldd	r8, Y+47	; 0x2f
     762:	98 a8       	ldd	r9, Y+48	; 0x30
     764:	0e 2e       	mov	r0, r30
     766:	04 c0       	rjmp	.+8      	; 0x770 <__udivdi3+0x438>
     768:	96 94       	lsr	r9
     76a:	87 94       	ror	r8
     76c:	77 94       	ror	r7
     76e:	67 94       	ror	r6
     770:	0a 94       	dec	r0
     772:	d2 f7       	brpl	.-12     	; 0x768 <__udivdi3+0x430>
     774:	84 01       	movw	r16, r8
     776:	73 01       	movw	r14, r6
     778:	e2 2a       	or	r14, r18
     77a:	f3 2a       	or	r15, r19
     77c:	04 2b       	or	r16, r20
     77e:	15 2b       	or	r17, r21
     780:	e9 a6       	std	Y+41, r14	; 0x29
     782:	fa a6       	std	Y+42, r15	; 0x2a
     784:	0b a7       	std	Y+43, r16	; 0x2b
     786:	1c a7       	std	Y+44, r17	; 0x2c
     788:	32 01       	movw	r6, r4
     78a:	88 24       	eor	r8, r8
     78c:	99 24       	eor	r9, r9
     78e:	92 01       	movw	r18, r4
     790:	81 01       	movw	r16, r2
     792:	20 70       	andi	r18, 0x00	; 0
     794:	30 70       	andi	r19, 0x00	; 0
     796:	21 96       	adiw	r28, 0x01	; 1
     798:	0c af       	std	Y+60, r16	; 0x3c
     79a:	1d af       	std	Y+61, r17	; 0x3d
     79c:	2e af       	std	Y+62, r18	; 0x3e
     79e:	3f af       	std	Y+63, r19	; 0x3f
     7a0:	21 97       	sbiw	r28, 0x01	; 1
     7a2:	c6 01       	movw	r24, r12
     7a4:	b5 01       	movw	r22, r10
     7a6:	a4 01       	movw	r20, r8
     7a8:	93 01       	movw	r18, r6
     7aa:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     7ae:	7b 01       	movw	r14, r22
     7b0:	8c 01       	movw	r16, r24
     7b2:	c6 01       	movw	r24, r12
     7b4:	b5 01       	movw	r22, r10
     7b6:	a4 01       	movw	r20, r8
     7b8:	93 01       	movw	r18, r6
     7ba:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     7be:	c9 01       	movw	r24, r18
     7c0:	da 01       	movw	r26, r20
     7c2:	25 96       	adiw	r28, 0x05	; 5
     7c4:	8c af       	std	Y+60, r24	; 0x3c
     7c6:	9d af       	std	Y+61, r25	; 0x3d
     7c8:	ae af       	std	Y+62, r26	; 0x3e
     7ca:	bf af       	std	Y+63, r27	; 0x3f
     7cc:	25 97       	sbiw	r28, 0x05	; 5
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	21 96       	adiw	r28, 0x01	; 1
     7d4:	2c ad       	ldd	r18, Y+60	; 0x3c
     7d6:	3d ad       	ldd	r19, Y+61	; 0x3d
     7d8:	4e ad       	ldd	r20, Y+62	; 0x3e
     7da:	5f ad       	ldd	r21, Y+63	; 0x3f
     7dc:	21 97       	sbiw	r28, 0x01	; 1
     7de:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     7e2:	9b 01       	movw	r18, r22
     7e4:	ac 01       	movw	r20, r24
     7e6:	87 01       	movw	r16, r14
     7e8:	ff 24       	eor	r15, r15
     7ea:	ee 24       	eor	r14, r14
     7ec:	a9 a4       	ldd	r10, Y+41	; 0x29
     7ee:	ba a4       	ldd	r11, Y+42	; 0x2a
     7f0:	cb a4       	ldd	r12, Y+43	; 0x2b
     7f2:	dc a4       	ldd	r13, Y+44	; 0x2c
     7f4:	c6 01       	movw	r24, r12
     7f6:	aa 27       	eor	r26, r26
     7f8:	bb 27       	eor	r27, r27
     7fa:	5c 01       	movw	r10, r24
     7fc:	6d 01       	movw	r12, r26
     7fe:	ae 28       	or	r10, r14
     800:	bf 28       	or	r11, r15
     802:	c0 2a       	or	r12, r16
     804:	d1 2a       	or	r13, r17
     806:	a2 16       	cp	r10, r18
     808:	b3 06       	cpc	r11, r19
     80a:	c4 06       	cpc	r12, r20
     80c:	d5 06       	cpc	r13, r21
     80e:	60 f5       	brcc	.+88     	; 0x868 <__stack+0x9>
     810:	25 96       	adiw	r28, 0x05	; 5
     812:	6c ad       	ldd	r22, Y+60	; 0x3c
     814:	7d ad       	ldd	r23, Y+61	; 0x3d
     816:	8e ad       	ldd	r24, Y+62	; 0x3e
     818:	9f ad       	ldd	r25, Y+63	; 0x3f
     81a:	25 97       	sbiw	r28, 0x05	; 5
     81c:	61 50       	subi	r22, 0x01	; 1
     81e:	70 40       	sbci	r23, 0x00	; 0
     820:	80 40       	sbci	r24, 0x00	; 0
     822:	90 40       	sbci	r25, 0x00	; 0
     824:	25 96       	adiw	r28, 0x05	; 5
     826:	6c af       	std	Y+60, r22	; 0x3c
     828:	7d af       	std	Y+61, r23	; 0x3d
     82a:	8e af       	std	Y+62, r24	; 0x3e
     82c:	9f af       	std	Y+63, r25	; 0x3f
     82e:	25 97       	sbiw	r28, 0x05	; 5
     830:	a2 0c       	add	r10, r2
     832:	b3 1c       	adc	r11, r3
     834:	c4 1c       	adc	r12, r4
     836:	d5 1c       	adc	r13, r5
     838:	a2 14       	cp	r10, r2
     83a:	b3 04       	cpc	r11, r3
     83c:	c4 04       	cpc	r12, r4
     83e:	d5 04       	cpc	r13, r5
     840:	98 f0       	brcs	.+38     	; 0x868 <__stack+0x9>
     842:	a2 16       	cp	r10, r18
     844:	b3 06       	cpc	r11, r19
     846:	c4 06       	cpc	r12, r20
     848:	d5 06       	cpc	r13, r21
     84a:	70 f4       	brcc	.+28     	; 0x868 <__stack+0x9>
     84c:	61 50       	subi	r22, 0x01	; 1
     84e:	70 40       	sbci	r23, 0x00	; 0
     850:	80 40       	sbci	r24, 0x00	; 0
     852:	90 40       	sbci	r25, 0x00	; 0
     854:	25 96       	adiw	r28, 0x05	; 5
     856:	6c af       	std	Y+60, r22	; 0x3c
     858:	7d af       	std	Y+61, r23	; 0x3d
     85a:	8e af       	std	Y+62, r24	; 0x3e
     85c:	9f af       	std	Y+63, r25	; 0x3f
     85e:	25 97       	sbiw	r28, 0x05	; 5
     860:	a2 0c       	add	r10, r2
     862:	b3 1c       	adc	r11, r3
     864:	c4 1c       	adc	r12, r4
     866:	d5 1c       	adc	r13, r5
     868:	a2 1a       	sub	r10, r18
     86a:	b3 0a       	sbc	r11, r19
     86c:	c4 0a       	sbc	r12, r20
     86e:	d5 0a       	sbc	r13, r21
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a4 01       	movw	r20, r8
     876:	93 01       	movw	r18, r6
     878:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     87c:	7b 01       	movw	r14, r22
     87e:	8c 01       	movw	r16, r24
     880:	c6 01       	movw	r24, r12
     882:	b5 01       	movw	r22, r10
     884:	a4 01       	movw	r20, r8
     886:	93 01       	movw	r18, r6
     888:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     88c:	c9 01       	movw	r24, r18
     88e:	da 01       	movw	r26, r20
     890:	3c 01       	movw	r6, r24
     892:	4d 01       	movw	r8, r26
     894:	c4 01       	movw	r24, r8
     896:	b3 01       	movw	r22, r6
     898:	21 96       	adiw	r28, 0x01	; 1
     89a:	2c ad       	ldd	r18, Y+60	; 0x3c
     89c:	3d ad       	ldd	r19, Y+61	; 0x3d
     89e:	4e ad       	ldd	r20, Y+62	; 0x3e
     8a0:	5f ad       	ldd	r21, Y+63	; 0x3f
     8a2:	21 97       	sbiw	r28, 0x01	; 1
     8a4:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     8a8:	9b 01       	movw	r18, r22
     8aa:	ac 01       	movw	r20, r24
     8ac:	87 01       	movw	r16, r14
     8ae:	ff 24       	eor	r15, r15
     8b0:	ee 24       	eor	r14, r14
     8b2:	89 a5       	ldd	r24, Y+41	; 0x29
     8b4:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b6:	ab a5       	ldd	r26, Y+43	; 0x2b
     8b8:	bc a5       	ldd	r27, Y+44	; 0x2c
     8ba:	a0 70       	andi	r26, 0x00	; 0
     8bc:	b0 70       	andi	r27, 0x00	; 0
     8be:	57 01       	movw	r10, r14
     8c0:	68 01       	movw	r12, r16
     8c2:	a8 2a       	or	r10, r24
     8c4:	b9 2a       	or	r11, r25
     8c6:	ca 2a       	or	r12, r26
     8c8:	db 2a       	or	r13, r27
     8ca:	a2 16       	cp	r10, r18
     8cc:	b3 06       	cpc	r11, r19
     8ce:	c4 06       	cpc	r12, r20
     8d0:	d5 06       	cpc	r13, r21
     8d2:	e0 f4       	brcc	.+56     	; 0x90c <__stack+0xad>
     8d4:	08 94       	sec
     8d6:	61 08       	sbc	r6, r1
     8d8:	71 08       	sbc	r7, r1
     8da:	81 08       	sbc	r8, r1
     8dc:	91 08       	sbc	r9, r1
     8de:	a2 0c       	add	r10, r2
     8e0:	b3 1c       	adc	r11, r3
     8e2:	c4 1c       	adc	r12, r4
     8e4:	d5 1c       	adc	r13, r5
     8e6:	a2 14       	cp	r10, r2
     8e8:	b3 04       	cpc	r11, r3
     8ea:	c4 04       	cpc	r12, r4
     8ec:	d5 04       	cpc	r13, r5
     8ee:	70 f0       	brcs	.+28     	; 0x90c <__stack+0xad>
     8f0:	a2 16       	cp	r10, r18
     8f2:	b3 06       	cpc	r11, r19
     8f4:	c4 06       	cpc	r12, r20
     8f6:	d5 06       	cpc	r13, r21
     8f8:	48 f4       	brcc	.+18     	; 0x90c <__stack+0xad>
     8fa:	08 94       	sec
     8fc:	61 08       	sbc	r6, r1
     8fe:	71 08       	sbc	r7, r1
     900:	81 08       	sbc	r8, r1
     902:	91 08       	sbc	r9, r1
     904:	a2 0c       	add	r10, r2
     906:	b3 1c       	adc	r11, r3
     908:	c4 1c       	adc	r12, r4
     90a:	d5 1c       	adc	r13, r5
     90c:	8d a5       	ldd	r24, Y+45	; 0x2d
     90e:	9e a5       	ldd	r25, Y+46	; 0x2e
     910:	af a5       	ldd	r26, Y+47	; 0x2f
     912:	b8 a9       	ldd	r27, Y+48	; 0x30
     914:	6f 96       	adiw	r28, 0x1f	; 31
     916:	0f ac       	ldd	r0, Y+63	; 0x3f
     918:	6f 97       	sbiw	r28, 0x1f	; 31
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0xc5>
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	aa 1f       	adc	r26, r26
     922:	bb 1f       	adc	r27, r27
     924:	0a 94       	dec	r0
     926:	d2 f7       	brpl	.-12     	; 0x91c <__stack+0xbd>
     928:	8d a7       	std	Y+45, r24	; 0x2d
     92a:	9e a7       	std	Y+46, r25	; 0x2e
     92c:	af a7       	std	Y+47, r26	; 0x2f
     92e:	b8 ab       	std	Y+48, r27	; 0x30
     930:	a2 1a       	sub	r10, r18
     932:	b3 0a       	sbc	r11, r19
     934:	c4 0a       	sbc	r12, r20
     936:	d5 0a       	sbc	r13, r21
     938:	25 96       	adiw	r28, 0x05	; 5
     93a:	ec ac       	ldd	r14, Y+60	; 0x3c
     93c:	fd ac       	ldd	r15, Y+61	; 0x3d
     93e:	0e ad       	ldd	r16, Y+62	; 0x3e
     940:	1f ad       	ldd	r17, Y+63	; 0x3f
     942:	25 97       	sbiw	r28, 0x05	; 5
     944:	d7 01       	movw	r26, r14
     946:	99 27       	eor	r25, r25
     948:	88 27       	eor	r24, r24
     94a:	68 2a       	or	r6, r24
     94c:	79 2a       	or	r7, r25
     94e:	8a 2a       	or	r8, r26
     950:	9b 2a       	or	r9, r27
     952:	82 01       	movw	r16, r4
     954:	22 27       	eor	r18, r18
     956:	33 27       	eor	r19, r19
     958:	29 96       	adiw	r28, 0x09	; 9
     95a:	0c af       	std	Y+60, r16	; 0x3c
     95c:	1d af       	std	Y+61, r17	; 0x3d
     95e:	2e af       	std	Y+62, r18	; 0x3e
     960:	3f af       	std	Y+63, r19	; 0x3f
     962:	29 97       	sbiw	r28, 0x09	; 9
     964:	a2 01       	movw	r20, r4
     966:	91 01       	movw	r18, r2
     968:	40 70       	andi	r20, 0x00	; 0
     96a:	50 70       	andi	r21, 0x00	; 0
     96c:	2d 96       	adiw	r28, 0x0d	; 13
     96e:	2c af       	std	Y+60, r18	; 0x3c
     970:	3d af       	std	Y+61, r19	; 0x3d
     972:	4e af       	std	Y+62, r20	; 0x3e
     974:	5f af       	std	Y+63, r21	; 0x3f
     976:	2d 97       	sbiw	r28, 0x0d	; 13
     978:	c6 01       	movw	r24, r12
     97a:	b5 01       	movw	r22, r10
     97c:	29 96       	adiw	r28, 0x09	; 9
     97e:	2c ad       	ldd	r18, Y+60	; 0x3c
     980:	3d ad       	ldd	r19, Y+61	; 0x3d
     982:	4e ad       	ldd	r20, Y+62	; 0x3e
     984:	5f ad       	ldd	r21, Y+63	; 0x3f
     986:	29 97       	sbiw	r28, 0x09	; 9
     988:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	c6 01       	movw	r24, r12
     992:	b5 01       	movw	r22, r10
     994:	29 96       	adiw	r28, 0x09	; 9
     996:	2c ad       	ldd	r18, Y+60	; 0x3c
     998:	3d ad       	ldd	r19, Y+61	; 0x3d
     99a:	4e ad       	ldd	r20, Y+62	; 0x3e
     99c:	5f ad       	ldd	r21, Y+63	; 0x3f
     99e:	29 97       	sbiw	r28, 0x09	; 9
     9a0:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     9a4:	c9 01       	movw	r24, r18
     9a6:	da 01       	movw	r26, r20
     9a8:	61 96       	adiw	r28, 0x11	; 17
     9aa:	8c af       	std	Y+60, r24	; 0x3c
     9ac:	9d af       	std	Y+61, r25	; 0x3d
     9ae:	ae af       	std	Y+62, r26	; 0x3e
     9b0:	bf af       	std	Y+63, r27	; 0x3f
     9b2:	61 97       	sbiw	r28, 0x11	; 17
     9b4:	bc 01       	movw	r22, r24
     9b6:	cd 01       	movw	r24, r26
     9b8:	2d 96       	adiw	r28, 0x0d	; 13
     9ba:	2c ad       	ldd	r18, Y+60	; 0x3c
     9bc:	3d ad       	ldd	r19, Y+61	; 0x3d
     9be:	4e ad       	ldd	r20, Y+62	; 0x3e
     9c0:	5f ad       	ldd	r21, Y+63	; 0x3f
     9c2:	2d 97       	sbiw	r28, 0x0d	; 13
     9c4:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     9c8:	9b 01       	movw	r18, r22
     9ca:	ac 01       	movw	r20, r24
     9cc:	87 01       	movw	r16, r14
     9ce:	ff 24       	eor	r15, r15
     9d0:	ee 24       	eor	r14, r14
     9d2:	ad a4       	ldd	r10, Y+45	; 0x2d
     9d4:	be a4       	ldd	r11, Y+46	; 0x2e
     9d6:	cf a4       	ldd	r12, Y+47	; 0x2f
     9d8:	d8 a8       	ldd	r13, Y+48	; 0x30
     9da:	c6 01       	movw	r24, r12
     9dc:	aa 27       	eor	r26, r26
     9de:	bb 27       	eor	r27, r27
     9e0:	57 01       	movw	r10, r14
     9e2:	68 01       	movw	r12, r16
     9e4:	a8 2a       	or	r10, r24
     9e6:	b9 2a       	or	r11, r25
     9e8:	ca 2a       	or	r12, r26
     9ea:	db 2a       	or	r13, r27
     9ec:	a2 16       	cp	r10, r18
     9ee:	b3 06       	cpc	r11, r19
     9f0:	c4 06       	cpc	r12, r20
     9f2:	d5 06       	cpc	r13, r21
     9f4:	60 f5       	brcc	.+88     	; 0xa4e <__stack+0x1ef>
     9f6:	61 96       	adiw	r28, 0x11	; 17
     9f8:	6c ad       	ldd	r22, Y+60	; 0x3c
     9fa:	7d ad       	ldd	r23, Y+61	; 0x3d
     9fc:	8e ad       	ldd	r24, Y+62	; 0x3e
     9fe:	9f ad       	ldd	r25, Y+63	; 0x3f
     a00:	61 97       	sbiw	r28, 0x11	; 17
     a02:	61 50       	subi	r22, 0x01	; 1
     a04:	70 40       	sbci	r23, 0x00	; 0
     a06:	80 40       	sbci	r24, 0x00	; 0
     a08:	90 40       	sbci	r25, 0x00	; 0
     a0a:	61 96       	adiw	r28, 0x11	; 17
     a0c:	6c af       	std	Y+60, r22	; 0x3c
     a0e:	7d af       	std	Y+61, r23	; 0x3d
     a10:	8e af       	std	Y+62, r24	; 0x3e
     a12:	9f af       	std	Y+63, r25	; 0x3f
     a14:	61 97       	sbiw	r28, 0x11	; 17
     a16:	a2 0c       	add	r10, r2
     a18:	b3 1c       	adc	r11, r3
     a1a:	c4 1c       	adc	r12, r4
     a1c:	d5 1c       	adc	r13, r5
     a1e:	a2 14       	cp	r10, r2
     a20:	b3 04       	cpc	r11, r3
     a22:	c4 04       	cpc	r12, r4
     a24:	d5 04       	cpc	r13, r5
     a26:	98 f0       	brcs	.+38     	; 0xa4e <__stack+0x1ef>
     a28:	a2 16       	cp	r10, r18
     a2a:	b3 06       	cpc	r11, r19
     a2c:	c4 06       	cpc	r12, r20
     a2e:	d5 06       	cpc	r13, r21
     a30:	70 f4       	brcc	.+28     	; 0xa4e <__stack+0x1ef>
     a32:	61 50       	subi	r22, 0x01	; 1
     a34:	70 40       	sbci	r23, 0x00	; 0
     a36:	80 40       	sbci	r24, 0x00	; 0
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	61 96       	adiw	r28, 0x11	; 17
     a3c:	6c af       	std	Y+60, r22	; 0x3c
     a3e:	7d af       	std	Y+61, r23	; 0x3d
     a40:	8e af       	std	Y+62, r24	; 0x3e
     a42:	9f af       	std	Y+63, r25	; 0x3f
     a44:	61 97       	sbiw	r28, 0x11	; 17
     a46:	a2 0c       	add	r10, r2
     a48:	b3 1c       	adc	r11, r3
     a4a:	c4 1c       	adc	r12, r4
     a4c:	d5 1c       	adc	r13, r5
     a4e:	a2 1a       	sub	r10, r18
     a50:	b3 0a       	sbc	r11, r19
     a52:	c4 0a       	sbc	r12, r20
     a54:	d5 0a       	sbc	r13, r21
     a56:	c6 01       	movw	r24, r12
     a58:	b5 01       	movw	r22, r10
     a5a:	29 96       	adiw	r28, 0x09	; 9
     a5c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a5e:	3d ad       	ldd	r19, Y+61	; 0x3d
     a60:	4e ad       	ldd	r20, Y+62	; 0x3e
     a62:	5f ad       	ldd	r21, Y+63	; 0x3f
     a64:	29 97       	sbiw	r28, 0x09	; 9
     a66:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     a6a:	7b 01       	movw	r14, r22
     a6c:	8c 01       	movw	r16, r24
     a6e:	c6 01       	movw	r24, r12
     a70:	b5 01       	movw	r22, r10
     a72:	29 96       	adiw	r28, 0x09	; 9
     a74:	2c ad       	ldd	r18, Y+60	; 0x3c
     a76:	3d ad       	ldd	r19, Y+61	; 0x3d
     a78:	4e ad       	ldd	r20, Y+62	; 0x3e
     a7a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a7c:	29 97       	sbiw	r28, 0x09	; 9
     a7e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     a82:	c9 01       	movw	r24, r18
     a84:	da 01       	movw	r26, r20
     a86:	5c 01       	movw	r10, r24
     a88:	6d 01       	movw	r12, r26
     a8a:	c6 01       	movw	r24, r12
     a8c:	b5 01       	movw	r22, r10
     a8e:	2d 96       	adiw	r28, 0x0d	; 13
     a90:	2c ad       	ldd	r18, Y+60	; 0x3c
     a92:	3d ad       	ldd	r19, Y+61	; 0x3d
     a94:	4e ad       	ldd	r20, Y+62	; 0x3e
     a96:	5f ad       	ldd	r21, Y+63	; 0x3f
     a98:	2d 97       	sbiw	r28, 0x0d	; 13
     a9a:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	87 01       	movw	r16, r14
     aa4:	ff 24       	eor	r15, r15
     aa6:	ee 24       	eor	r14, r14
     aa8:	8d a5       	ldd	r24, Y+45	; 0x2d
     aaa:	9e a5       	ldd	r25, Y+46	; 0x2e
     aac:	af a5       	ldd	r26, Y+47	; 0x2f
     aae:	b8 a9       	ldd	r27, Y+48	; 0x30
     ab0:	a0 70       	andi	r26, 0x00	; 0
     ab2:	b0 70       	andi	r27, 0x00	; 0
     ab4:	e8 2a       	or	r14, r24
     ab6:	f9 2a       	or	r15, r25
     ab8:	0a 2b       	or	r16, r26
     aba:	1b 2b       	or	r17, r27
     abc:	e2 16       	cp	r14, r18
     abe:	f3 06       	cpc	r15, r19
     ac0:	04 07       	cpc	r16, r20
     ac2:	15 07       	cpc	r17, r21
     ac4:	c0 f4       	brcc	.+48     	; 0xaf6 <__stack+0x297>
     ac6:	08 94       	sec
     ac8:	a1 08       	sbc	r10, r1
     aca:	b1 08       	sbc	r11, r1
     acc:	c1 08       	sbc	r12, r1
     ace:	d1 08       	sbc	r13, r1
     ad0:	e2 0c       	add	r14, r2
     ad2:	f3 1c       	adc	r15, r3
     ad4:	04 1d       	adc	r16, r4
     ad6:	15 1d       	adc	r17, r5
     ad8:	e2 14       	cp	r14, r2
     ada:	f3 04       	cpc	r15, r3
     adc:	04 05       	cpc	r16, r4
     ade:	15 05       	cpc	r17, r5
     ae0:	50 f0       	brcs	.+20     	; 0xaf6 <__stack+0x297>
     ae2:	e2 16       	cp	r14, r18
     ae4:	f3 06       	cpc	r15, r19
     ae6:	04 07       	cpc	r16, r20
     ae8:	15 07       	cpc	r17, r21
     aea:	28 f4       	brcc	.+10     	; 0xaf6 <__stack+0x297>
     aec:	08 94       	sec
     aee:	a1 08       	sbc	r10, r1
     af0:	b1 08       	sbc	r11, r1
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	61 96       	adiw	r28, 0x11	; 17
     af8:	ec ac       	ldd	r14, Y+60	; 0x3c
     afa:	fd ac       	ldd	r15, Y+61	; 0x3d
     afc:	0e ad       	ldd	r16, Y+62	; 0x3e
     afe:	1f ad       	ldd	r17, Y+63	; 0x3f
     b00:	61 97       	sbiw	r28, 0x11	; 17
     b02:	d7 01       	movw	r26, r14
     b04:	99 27       	eor	r25, r25
     b06:	88 27       	eor	r24, r24
     b08:	96 01       	movw	r18, r12
     b0a:	85 01       	movw	r16, r10
     b0c:	08 2b       	or	r16, r24
     b0e:	19 2b       	or	r17, r25
     b10:	2a 2b       	or	r18, r26
     b12:	3b 2b       	or	r19, r27
     b14:	09 ab       	std	Y+49, r16	; 0x31
     b16:	1a ab       	std	Y+50, r17	; 0x32
     b18:	2b ab       	std	Y+51, r18	; 0x33
     b1a:	3c ab       	std	Y+52, r19	; 0x34
     b1c:	62 c2       	rjmp	.+1220   	; 0xfe2 <__stack+0x783>
     b1e:	6e 14       	cp	r6, r14
     b20:	7f 04       	cpc	r7, r15
     b22:	80 06       	cpc	r8, r16
     b24:	91 06       	cpc	r9, r17
     b26:	08 f4       	brcc	.+2      	; 0xb2a <__stack+0x2cb>
     b28:	51 c2       	rjmp	.+1186   	; 0xfcc <__stack+0x76d>
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	e2 16       	cp	r14, r18
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	f2 06       	cpc	r15, r18
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	02 07       	cpc	r16, r18
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	12 07       	cpc	r17, r18
     b3a:	88 f4       	brcc	.+34     	; 0xb5e <__stack+0x2ff>
     b3c:	3f ef       	ldi	r19, 0xFF	; 255
     b3e:	e3 16       	cp	r14, r19
     b40:	f1 04       	cpc	r15, r1
     b42:	01 05       	cpc	r16, r1
     b44:	11 05       	cpc	r17, r1
     b46:	31 f0       	breq	.+12     	; 0xb54 <__stack+0x2f5>
     b48:	28 f0       	brcs	.+10     	; 0xb54 <__stack+0x2f5>
     b4a:	48 e0       	ldi	r20, 0x08	; 8
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	17 c0       	rjmp	.+46     	; 0xb82 <__stack+0x323>
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	12 c0       	rjmp	.+36     	; 0xb82 <__stack+0x323>
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	e4 16       	cp	r14, r20
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	f4 06       	cpc	r15, r20
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	04 07       	cpc	r16, r20
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	14 07       	cpc	r17, r20
     b6e:	28 f0       	brcs	.+10     	; 0xb7a <__stack+0x31b>
     b70:	48 e1       	ldi	r20, 0x18	; 24
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__stack+0x323>
     b7a:	40 e1       	ldi	r20, 0x10	; 16
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	d8 01       	movw	r26, r16
     b84:	c7 01       	movw	r24, r14
     b86:	04 2e       	mov	r0, r20
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__stack+0x333>
     b8a:	b6 95       	lsr	r27
     b8c:	a7 95       	ror	r26
     b8e:	97 95       	ror	r25
     b90:	87 95       	ror	r24
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__stack+0x32b>
     b96:	8c 55       	subi	r24, 0x5C	; 92
     b98:	9e 4f       	sbci	r25, 0xFE	; 254
     b9a:	dc 01       	movw	r26, r24
     b9c:	2c 91       	ld	r18, X
     b9e:	30 e2       	ldi	r19, 0x20	; 32
     ba0:	a3 2e       	mov	r10, r19
     ba2:	b1 2c       	mov	r11, r1
     ba4:	c1 2c       	mov	r12, r1
     ba6:	d1 2c       	mov	r13, r1
     ba8:	d6 01       	movw	r26, r12
     baa:	c5 01       	movw	r24, r10
     bac:	84 1b       	sub	r24, r20
     bae:	95 0b       	sbc	r25, r21
     bb0:	a6 0b       	sbc	r26, r22
     bb2:	b7 0b       	sbc	r27, r23
     bb4:	82 1b       	sub	r24, r18
     bb6:	91 09       	sbc	r25, r1
     bb8:	a1 09       	sbc	r26, r1
     bba:	b1 09       	sbc	r27, r1
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	a1 05       	cpc	r26, r1
     bc0:	b1 05       	cpc	r27, r1
     bc2:	89 f4       	brne	.+34     	; 0xbe6 <__stack+0x387>
     bc4:	e6 14       	cp	r14, r6
     bc6:	f7 04       	cpc	r15, r7
     bc8:	08 05       	cpc	r16, r8
     bca:	19 05       	cpc	r17, r9
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <__stack+0x371>
     bce:	f2 c1       	rjmp	.+996    	; 0xfb4 <__stack+0x755>
     bd0:	6d a4       	ldd	r6, Y+45	; 0x2d
     bd2:	7e a4       	ldd	r7, Y+46	; 0x2e
     bd4:	8f a4       	ldd	r8, Y+47	; 0x2f
     bd6:	98 a8       	ldd	r9, Y+48	; 0x30
     bd8:	62 14       	cp	r6, r2
     bda:	73 04       	cpc	r7, r3
     bdc:	84 04       	cpc	r8, r4
     bde:	95 04       	cpc	r9, r5
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <__stack+0x385>
     be2:	e8 c1       	rjmp	.+976    	; 0xfb4 <__stack+0x755>
     be4:	f3 c1       	rjmp	.+998    	; 0xfcc <__stack+0x76d>
     be6:	6e 96       	adiw	r28, 0x1e	; 30
     be8:	8f af       	std	Y+63, r24	; 0x3f
     bea:	6e 97       	sbiw	r28, 0x1e	; 30
     bec:	08 2e       	mov	r0, r24
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__stack+0x399>
     bf0:	ee 0c       	add	r14, r14
     bf2:	ff 1c       	adc	r15, r15
     bf4:	00 1f       	adc	r16, r16
     bf6:	11 1f       	adc	r17, r17
     bf8:	0a 94       	dec	r0
     bfa:	d2 f7       	brpl	.-12     	; 0xbf0 <__stack+0x391>
     bfc:	6a 2d       	mov	r22, r10
     bfe:	68 1b       	sub	r22, r24
     c00:	d2 01       	movw	r26, r4
     c02:	c1 01       	movw	r24, r2
     c04:	06 2e       	mov	r0, r22
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <__stack+0x3b1>
     c08:	b6 95       	lsr	r27
     c0a:	a7 95       	ror	r26
     c0c:	97 95       	ror	r25
     c0e:	87 95       	ror	r24
     c10:	0a 94       	dec	r0
     c12:	d2 f7       	brpl	.-12     	; 0xc08 <__stack+0x3a9>
     c14:	5c 01       	movw	r10, r24
     c16:	6d 01       	movw	r12, r26
     c18:	ae 28       	or	r10, r14
     c1a:	bf 28       	or	r11, r15
     c1c:	c0 2a       	or	r12, r16
     c1e:	d1 2a       	or	r13, r17
     c20:	ad a2       	std	Y+37, r10	; 0x25
     c22:	be a2       	std	Y+38, r11	; 0x26
     c24:	cf a2       	std	Y+39, r12	; 0x27
     c26:	d8 a6       	std	Y+40, r13	; 0x28
     c28:	72 01       	movw	r14, r4
     c2a:	61 01       	movw	r12, r2
     c2c:	6e 96       	adiw	r28, 0x1e	; 30
     c2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     c30:	6e 97       	sbiw	r28, 0x1e	; 30
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <__stack+0x3dd>
     c34:	cc 0c       	add	r12, r12
     c36:	dd 1c       	adc	r13, r13
     c38:	ee 1c       	adc	r14, r14
     c3a:	ff 1c       	adc	r15, r15
     c3c:	0a 94       	dec	r0
     c3e:	d2 f7       	brpl	.-12     	; 0xc34 <__stack+0x3d5>
     c40:	c9 a2       	std	Y+33, r12	; 0x21
     c42:	da a2       	std	Y+34, r13	; 0x22
     c44:	eb a2       	std	Y+35, r14	; 0x23
     c46:	fc a2       	std	Y+36, r15	; 0x24
     c48:	64 01       	movw	r12, r8
     c4a:	53 01       	movw	r10, r6
     c4c:	06 2e       	mov	r0, r22
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__stack+0x3f9>
     c50:	d6 94       	lsr	r13
     c52:	c7 94       	ror	r12
     c54:	b7 94       	ror	r11
     c56:	a7 94       	ror	r10
     c58:	0a 94       	dec	r0
     c5a:	d2 f7       	brpl	.-12     	; 0xc50 <__stack+0x3f1>
     c5c:	d4 01       	movw	r26, r8
     c5e:	c3 01       	movw	r24, r6
     c60:	6e 96       	adiw	r28, 0x1e	; 30
     c62:	0f ac       	ldd	r0, Y+63	; 0x3f
     c64:	6e 97       	sbiw	r28, 0x1e	; 30
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <__stack+0x411>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	aa 1f       	adc	r26, r26
     c6e:	bb 1f       	adc	r27, r27
     c70:	0a 94       	dec	r0
     c72:	d2 f7       	brpl	.-12     	; 0xc68 <__stack+0x409>
     c74:	ed a4       	ldd	r14, Y+45	; 0x2d
     c76:	fe a4       	ldd	r15, Y+46	; 0x2e
     c78:	0f a5       	ldd	r16, Y+47	; 0x2f
     c7a:	18 a9       	ldd	r17, Y+48	; 0x30
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x427>
     c7e:	16 95       	lsr	r17
     c80:	07 95       	ror	r16
     c82:	f7 94       	ror	r15
     c84:	e7 94       	ror	r14
     c86:	6a 95       	dec	r22
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__stack+0x41f>
     c8a:	37 01       	movw	r6, r14
     c8c:	48 01       	movw	r8, r16
     c8e:	68 2a       	or	r6, r24
     c90:	79 2a       	or	r7, r25
     c92:	8a 2a       	or	r8, r26
     c94:	9b 2a       	or	r9, r27
     c96:	6d 8e       	std	Y+29, r6	; 0x1d
     c98:	7e 8e       	std	Y+30, r7	; 0x1e
     c9a:	8f 8e       	std	Y+31, r8	; 0x1f
     c9c:	98 a2       	std	Y+32, r9	; 0x20
     c9e:	ed a0       	ldd	r14, Y+37	; 0x25
     ca0:	fe a0       	ldd	r15, Y+38	; 0x26
     ca2:	0f a1       	ldd	r16, Y+39	; 0x27
     ca4:	18 a5       	ldd	r17, Y+40	; 0x28
     ca6:	38 01       	movw	r6, r16
     ca8:	88 24       	eor	r8, r8
     caa:	99 24       	eor	r9, r9
     cac:	98 01       	movw	r18, r16
     cae:	87 01       	movw	r16, r14
     cb0:	20 70       	andi	r18, 0x00	; 0
     cb2:	30 70       	andi	r19, 0x00	; 0
     cb4:	65 96       	adiw	r28, 0x15	; 21
     cb6:	0c af       	std	Y+60, r16	; 0x3c
     cb8:	1d af       	std	Y+61, r17	; 0x3d
     cba:	2e af       	std	Y+62, r18	; 0x3e
     cbc:	3f af       	std	Y+63, r19	; 0x3f
     cbe:	65 97       	sbiw	r28, 0x15	; 21
     cc0:	c6 01       	movw	r24, r12
     cc2:	b5 01       	movw	r22, r10
     cc4:	a4 01       	movw	r20, r8
     cc6:	93 01       	movw	r18, r6
     cc8:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     ccc:	7b 01       	movw	r14, r22
     cce:	8c 01       	movw	r16, r24
     cd0:	c6 01       	movw	r24, r12
     cd2:	b5 01       	movw	r22, r10
     cd4:	a4 01       	movw	r20, r8
     cd6:	93 01       	movw	r18, r6
     cd8:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     cdc:	c9 01       	movw	r24, r18
     cde:	da 01       	movw	r26, r20
     ce0:	1c 01       	movw	r2, r24
     ce2:	2d 01       	movw	r4, r26
     ce4:	c2 01       	movw	r24, r4
     ce6:	b1 01       	movw	r22, r2
     ce8:	65 96       	adiw	r28, 0x15	; 21
     cea:	2c ad       	ldd	r18, Y+60	; 0x3c
     cec:	3d ad       	ldd	r19, Y+61	; 0x3d
     cee:	4e ad       	ldd	r20, Y+62	; 0x3e
     cf0:	5f ad       	ldd	r21, Y+63	; 0x3f
     cf2:	65 97       	sbiw	r28, 0x15	; 21
     cf4:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     cf8:	9b 01       	movw	r18, r22
     cfa:	ac 01       	movw	r20, r24
     cfc:	87 01       	movw	r16, r14
     cfe:	ff 24       	eor	r15, r15
     d00:	ee 24       	eor	r14, r14
     d02:	ad 8c       	ldd	r10, Y+29	; 0x1d
     d04:	be 8c       	ldd	r11, Y+30	; 0x1e
     d06:	cf 8c       	ldd	r12, Y+31	; 0x1f
     d08:	d8 a0       	ldd	r13, Y+32	; 0x20
     d0a:	c6 01       	movw	r24, r12
     d0c:	aa 27       	eor	r26, r26
     d0e:	bb 27       	eor	r27, r27
     d10:	57 01       	movw	r10, r14
     d12:	68 01       	movw	r12, r16
     d14:	a8 2a       	or	r10, r24
     d16:	b9 2a       	or	r11, r25
     d18:	ca 2a       	or	r12, r26
     d1a:	db 2a       	or	r13, r27
     d1c:	a2 16       	cp	r10, r18
     d1e:	b3 06       	cpc	r11, r19
     d20:	c4 06       	cpc	r12, r20
     d22:	d5 06       	cpc	r13, r21
     d24:	00 f5       	brcc	.+64     	; 0xd66 <__stack+0x507>
     d26:	08 94       	sec
     d28:	21 08       	sbc	r2, r1
     d2a:	31 08       	sbc	r3, r1
     d2c:	41 08       	sbc	r4, r1
     d2e:	51 08       	sbc	r5, r1
     d30:	ed a0       	ldd	r14, Y+37	; 0x25
     d32:	fe a0       	ldd	r15, Y+38	; 0x26
     d34:	0f a1       	ldd	r16, Y+39	; 0x27
     d36:	18 a5       	ldd	r17, Y+40	; 0x28
     d38:	ae 0c       	add	r10, r14
     d3a:	bf 1c       	adc	r11, r15
     d3c:	c0 1e       	adc	r12, r16
     d3e:	d1 1e       	adc	r13, r17
     d40:	ae 14       	cp	r10, r14
     d42:	bf 04       	cpc	r11, r15
     d44:	c0 06       	cpc	r12, r16
     d46:	d1 06       	cpc	r13, r17
     d48:	70 f0       	brcs	.+28     	; 0xd66 <__stack+0x507>
     d4a:	a2 16       	cp	r10, r18
     d4c:	b3 06       	cpc	r11, r19
     d4e:	c4 06       	cpc	r12, r20
     d50:	d5 06       	cpc	r13, r21
     d52:	48 f4       	brcc	.+18     	; 0xd66 <__stack+0x507>
     d54:	08 94       	sec
     d56:	21 08       	sbc	r2, r1
     d58:	31 08       	sbc	r3, r1
     d5a:	41 08       	sbc	r4, r1
     d5c:	51 08       	sbc	r5, r1
     d5e:	ae 0c       	add	r10, r14
     d60:	bf 1c       	adc	r11, r15
     d62:	c0 1e       	adc	r12, r16
     d64:	d1 1e       	adc	r13, r17
     d66:	a2 1a       	sub	r10, r18
     d68:	b3 0a       	sbc	r11, r19
     d6a:	c4 0a       	sbc	r12, r20
     d6c:	d5 0a       	sbc	r13, r21
     d6e:	c6 01       	movw	r24, r12
     d70:	b5 01       	movw	r22, r10
     d72:	a4 01       	movw	r20, r8
     d74:	93 01       	movw	r18, r6
     d76:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     d7a:	7b 01       	movw	r14, r22
     d7c:	8c 01       	movw	r16, r24
     d7e:	c6 01       	movw	r24, r12
     d80:	b5 01       	movw	r22, r10
     d82:	a4 01       	movw	r20, r8
     d84:	93 01       	movw	r18, r6
     d86:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
     d8a:	c9 01       	movw	r24, r18
     d8c:	da 01       	movw	r26, r20
     d8e:	3c 01       	movw	r6, r24
     d90:	4d 01       	movw	r8, r26
     d92:	c4 01       	movw	r24, r8
     d94:	b3 01       	movw	r22, r6
     d96:	65 96       	adiw	r28, 0x15	; 21
     d98:	2c ad       	ldd	r18, Y+60	; 0x3c
     d9a:	3d ad       	ldd	r19, Y+61	; 0x3d
     d9c:	4e ad       	ldd	r20, Y+62	; 0x3e
     d9e:	5f ad       	ldd	r21, Y+63	; 0x3f
     da0:	65 97       	sbiw	r28, 0x15	; 21
     da2:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	87 01       	movw	r16, r14
     dac:	ff 24       	eor	r15, r15
     dae:	ee 24       	eor	r14, r14
     db0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     db4:	af 8d       	ldd	r26, Y+31	; 0x1f
     db6:	b8 a1       	ldd	r27, Y+32	; 0x20
     db8:	a0 70       	andi	r26, 0x00	; 0
     dba:	b0 70       	andi	r27, 0x00	; 0
     dbc:	57 01       	movw	r10, r14
     dbe:	68 01       	movw	r12, r16
     dc0:	a8 2a       	or	r10, r24
     dc2:	b9 2a       	or	r11, r25
     dc4:	ca 2a       	or	r12, r26
     dc6:	db 2a       	or	r13, r27
     dc8:	a2 16       	cp	r10, r18
     dca:	b3 06       	cpc	r11, r19
     dcc:	c4 06       	cpc	r12, r20
     dce:	d5 06       	cpc	r13, r21
     dd0:	00 f5       	brcc	.+64     	; 0xe12 <__stack+0x5b3>
     dd2:	08 94       	sec
     dd4:	61 08       	sbc	r6, r1
     dd6:	71 08       	sbc	r7, r1
     dd8:	81 08       	sbc	r8, r1
     dda:	91 08       	sbc	r9, r1
     ddc:	6d a1       	ldd	r22, Y+37	; 0x25
     dde:	7e a1       	ldd	r23, Y+38	; 0x26
     de0:	8f a1       	ldd	r24, Y+39	; 0x27
     de2:	98 a5       	ldd	r25, Y+40	; 0x28
     de4:	a6 0e       	add	r10, r22
     de6:	b7 1e       	adc	r11, r23
     de8:	c8 1e       	adc	r12, r24
     dea:	d9 1e       	adc	r13, r25
     dec:	a6 16       	cp	r10, r22
     dee:	b7 06       	cpc	r11, r23
     df0:	c8 06       	cpc	r12, r24
     df2:	d9 06       	cpc	r13, r25
     df4:	70 f0       	brcs	.+28     	; 0xe12 <__stack+0x5b3>
     df6:	a2 16       	cp	r10, r18
     df8:	b3 06       	cpc	r11, r19
     dfa:	c4 06       	cpc	r12, r20
     dfc:	d5 06       	cpc	r13, r21
     dfe:	48 f4       	brcc	.+18     	; 0xe12 <__stack+0x5b3>
     e00:	08 94       	sec
     e02:	61 08       	sbc	r6, r1
     e04:	71 08       	sbc	r7, r1
     e06:	81 08       	sbc	r8, r1
     e08:	91 08       	sbc	r9, r1
     e0a:	a6 0e       	add	r10, r22
     e0c:	b7 1e       	adc	r11, r23
     e0e:	c8 1e       	adc	r12, r24
     e10:	d9 1e       	adc	r13, r25
     e12:	d6 01       	movw	r26, r12
     e14:	c5 01       	movw	r24, r10
     e16:	82 1b       	sub	r24, r18
     e18:	93 0b       	sbc	r25, r19
     e1a:	a4 0b       	sbc	r26, r20
     e1c:	b5 0b       	sbc	r27, r21
     e1e:	89 8f       	std	Y+25, r24	; 0x19
     e20:	9a 8f       	std	Y+26, r25	; 0x1a
     e22:	ab 8f       	std	Y+27, r26	; 0x1b
     e24:	bc 8f       	std	Y+28, r27	; 0x1c
     e26:	d1 01       	movw	r26, r2
     e28:	99 27       	eor	r25, r25
     e2a:	88 27       	eor	r24, r24
     e2c:	64 01       	movw	r12, r8
     e2e:	53 01       	movw	r10, r6
     e30:	a8 2a       	or	r10, r24
     e32:	b9 2a       	or	r11, r25
     e34:	ca 2a       	or	r12, r26
     e36:	db 2a       	or	r13, r27
     e38:	a9 aa       	std	Y+49, r10	; 0x31
     e3a:	ba aa       	std	Y+50, r11	; 0x32
     e3c:	cb aa       	std	Y+51, r12	; 0x33
     e3e:	dc aa       	std	Y+52, r13	; 0x34
     e40:	86 01       	movw	r16, r12
     e42:	75 01       	movw	r14, r10
     e44:	2f ef       	ldi	r18, 0xFF	; 255
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	e2 22       	and	r14, r18
     e4e:	f3 22       	and	r15, r19
     e50:	04 23       	and	r16, r20
     e52:	15 23       	and	r17, r21
     e54:	a6 01       	movw	r20, r12
     e56:	66 27       	eor	r22, r22
     e58:	77 27       	eor	r23, r23
     e5a:	6d 96       	adiw	r28, 0x1d	; 29
     e5c:	4c af       	std	Y+60, r20	; 0x3c
     e5e:	5d af       	std	Y+61, r21	; 0x3d
     e60:	6e af       	std	Y+62, r22	; 0x3e
     e62:	7f af       	std	Y+63, r23	; 0x3f
     e64:	6d 97       	sbiw	r28, 0x1d	; 29
     e66:	a9 a0       	ldd	r10, Y+33	; 0x21
     e68:	ba a0       	ldd	r11, Y+34	; 0x22
     e6a:	cb a0       	ldd	r12, Y+35	; 0x23
     e6c:	dc a0       	ldd	r13, Y+36	; 0x24
     e6e:	6f ef       	ldi	r22, 0xFF	; 255
     e70:	7f ef       	ldi	r23, 0xFF	; 255
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	a6 22       	and	r10, r22
     e78:	b7 22       	and	r11, r23
     e7a:	c8 22       	and	r12, r24
     e7c:	d9 22       	and	r13, r25
     e7e:	89 a1       	ldd	r24, Y+33	; 0x21
     e80:	9a a1       	ldd	r25, Y+34	; 0x22
     e82:	ab a1       	ldd	r26, Y+35	; 0x23
     e84:	bc a1       	ldd	r27, Y+36	; 0x24
     e86:	1d 01       	movw	r2, r26
     e88:	44 24       	eor	r4, r4
     e8a:	55 24       	eor	r5, r5
     e8c:	c8 01       	movw	r24, r16
     e8e:	b7 01       	movw	r22, r14
     e90:	a6 01       	movw	r20, r12
     e92:	95 01       	movw	r18, r10
     e94:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     e98:	69 96       	adiw	r28, 0x19	; 25
     e9a:	6c af       	std	Y+60, r22	; 0x3c
     e9c:	7d af       	std	Y+61, r23	; 0x3d
     e9e:	8e af       	std	Y+62, r24	; 0x3e
     ea0:	9f af       	std	Y+63, r25	; 0x3f
     ea2:	69 97       	sbiw	r28, 0x19	; 25
     ea4:	c8 01       	movw	r24, r16
     ea6:	b7 01       	movw	r22, r14
     ea8:	a2 01       	movw	r20, r4
     eaa:	91 01       	movw	r18, r2
     eac:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     eb0:	3b 01       	movw	r6, r22
     eb2:	4c 01       	movw	r8, r24
     eb4:	6d 96       	adiw	r28, 0x1d	; 29
     eb6:	6c ad       	ldd	r22, Y+60	; 0x3c
     eb8:	7d ad       	ldd	r23, Y+61	; 0x3d
     eba:	8e ad       	ldd	r24, Y+62	; 0x3e
     ebc:	9f ad       	ldd	r25, Y+63	; 0x3f
     ebe:	6d 97       	sbiw	r28, 0x1d	; 29
     ec0:	a6 01       	movw	r20, r12
     ec2:	95 01       	movw	r18, r10
     ec4:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     ec8:	7b 01       	movw	r14, r22
     eca:	8c 01       	movw	r16, r24
     ecc:	6d 96       	adiw	r28, 0x1d	; 29
     ece:	6c ad       	ldd	r22, Y+60	; 0x3c
     ed0:	7d ad       	ldd	r23, Y+61	; 0x3d
     ed2:	8e ad       	ldd	r24, Y+62	; 0x3e
     ed4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ed6:	6d 97       	sbiw	r28, 0x1d	; 29
     ed8:	a2 01       	movw	r20, r4
     eda:	91 01       	movw	r18, r2
     edc:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
     ee0:	5b 01       	movw	r10, r22
     ee2:	6c 01       	movw	r12, r24
     ee4:	a8 01       	movw	r20, r16
     ee6:	97 01       	movw	r18, r14
     ee8:	26 0d       	add	r18, r6
     eea:	37 1d       	adc	r19, r7
     eec:	48 1d       	adc	r20, r8
     eee:	59 1d       	adc	r21, r9
     ef0:	69 96       	adiw	r28, 0x19	; 25
     ef2:	6c ac       	ldd	r6, Y+60	; 0x3c
     ef4:	7d ac       	ldd	r7, Y+61	; 0x3d
     ef6:	8e ac       	ldd	r8, Y+62	; 0x3e
     ef8:	9f ac       	ldd	r9, Y+63	; 0x3f
     efa:	69 97       	sbiw	r28, 0x19	; 25
     efc:	c4 01       	movw	r24, r8
     efe:	aa 27       	eor	r26, r26
     f00:	bb 27       	eor	r27, r27
     f02:	28 0f       	add	r18, r24
     f04:	39 1f       	adc	r19, r25
     f06:	4a 1f       	adc	r20, r26
     f08:	5b 1f       	adc	r21, r27
     f0a:	2e 15       	cp	r18, r14
     f0c:	3f 05       	cpc	r19, r15
     f0e:	40 07       	cpc	r20, r16
     f10:	51 07       	cpc	r21, r17
     f12:	48 f4       	brcc	.+18     	; 0xf26 <__stack+0x6c7>
     f14:	e1 2c       	mov	r14, r1
     f16:	f1 2c       	mov	r15, r1
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	06 2f       	mov	r16, r22
     f1c:	11 2d       	mov	r17, r1
     f1e:	ae 0c       	add	r10, r14
     f20:	bf 1c       	adc	r11, r15
     f22:	c0 1e       	adc	r12, r16
     f24:	d1 1e       	adc	r13, r17
     f26:	ca 01       	movw	r24, r20
     f28:	aa 27       	eor	r26, r26
     f2a:	bb 27       	eor	r27, r27
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	6a 0d       	add	r22, r10
     f32:	7b 1d       	adc	r23, r11
     f34:	8c 1d       	adc	r24, r12
     f36:	9d 1d       	adc	r25, r13
     f38:	69 8c       	ldd	r6, Y+25	; 0x19
     f3a:	7a 8c       	ldd	r7, Y+26	; 0x1a
     f3c:	8b 8c       	ldd	r8, Y+27	; 0x1b
     f3e:	9c 8c       	ldd	r9, Y+28	; 0x1c
     f40:	66 16       	cp	r6, r22
     f42:	77 06       	cpc	r7, r23
     f44:	88 06       	cpc	r8, r24
     f46:	99 06       	cpc	r9, r25
     f48:	40 f1       	brcs	.+80     	; 0xf9a <__stack+0x73b>
     f4a:	66 15       	cp	r22, r6
     f4c:	77 05       	cpc	r23, r7
     f4e:	88 05       	cpc	r24, r8
     f50:	99 05       	cpc	r25, r9
     f52:	09 f0       	breq	.+2      	; 0xf56 <__stack+0x6f7>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <__stack+0x77d>
     f56:	d9 01       	movw	r26, r18
     f58:	99 27       	eor	r25, r25
     f5a:	88 27       	eor	r24, r24
     f5c:	69 96       	adiw	r28, 0x19	; 25
     f5e:	2c ad       	ldd	r18, Y+60	; 0x3c
     f60:	3d ad       	ldd	r19, Y+61	; 0x3d
     f62:	4e ad       	ldd	r20, Y+62	; 0x3e
     f64:	5f ad       	ldd	r21, Y+63	; 0x3f
     f66:	69 97       	sbiw	r28, 0x19	; 25
     f68:	40 70       	andi	r20, 0x00	; 0
     f6a:	50 70       	andi	r21, 0x00	; 0
     f6c:	82 0f       	add	r24, r18
     f6e:	93 1f       	adc	r25, r19
     f70:	a4 1f       	adc	r26, r20
     f72:	b5 1f       	adc	r27, r21
     f74:	2d a5       	ldd	r18, Y+45	; 0x2d
     f76:	3e a5       	ldd	r19, Y+46	; 0x2e
     f78:	4f a5       	ldd	r20, Y+47	; 0x2f
     f7a:	58 a9       	ldd	r21, Y+48	; 0x30
     f7c:	6e 96       	adiw	r28, 0x1e	; 30
     f7e:	0f ac       	ldd	r0, Y+63	; 0x3f
     f80:	6e 97       	sbiw	r28, 0x1e	; 30
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <__stack+0x72d>
     f84:	22 0f       	add	r18, r18
     f86:	33 1f       	adc	r19, r19
     f88:	44 1f       	adc	r20, r20
     f8a:	55 1f       	adc	r21, r21
     f8c:	0a 94       	dec	r0
     f8e:	d2 f7       	brpl	.-12     	; 0xf84 <__stack+0x725>
     f90:	28 17       	cp	r18, r24
     f92:	39 07       	cpc	r19, r25
     f94:	4a 07       	cpc	r20, r26
     f96:	5b 07       	cpc	r21, r27
     f98:	08 f5       	brcc	.+66     	; 0xfdc <__stack+0x77d>
     f9a:	09 a9       	ldd	r16, Y+49	; 0x31
     f9c:	1a a9       	ldd	r17, Y+50	; 0x32
     f9e:	2b a9       	ldd	r18, Y+51	; 0x33
     fa0:	3c a9       	ldd	r19, Y+52	; 0x34
     fa2:	01 50       	subi	r16, 0x01	; 1
     fa4:	10 40       	sbci	r17, 0x00	; 0
     fa6:	20 40       	sbci	r18, 0x00	; 0
     fa8:	30 40       	sbci	r19, 0x00	; 0
     faa:	09 ab       	std	Y+49, r16	; 0x31
     fac:	1a ab       	std	Y+50, r17	; 0x32
     fae:	2b ab       	std	Y+51, r18	; 0x33
     fb0:	3c ab       	std	Y+52, r19	; 0x34
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <__stack+0x77d>
     fb4:	66 24       	eor	r6, r6
     fb6:	77 24       	eor	r7, r7
     fb8:	43 01       	movw	r8, r6
     fba:	21 e0       	ldi	r18, 0x01	; 1
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	29 ab       	std	Y+49, r18	; 0x31
     fc4:	3a ab       	std	Y+50, r19	; 0x32
     fc6:	4b ab       	std	Y+51, r20	; 0x33
     fc8:	5c ab       	std	Y+52, r21	; 0x34
     fca:	0b c0       	rjmp	.+22     	; 0xfe2 <__stack+0x783>
     fcc:	66 24       	eor	r6, r6
     fce:	77 24       	eor	r7, r7
     fd0:	43 01       	movw	r8, r6
     fd2:	19 aa       	std	Y+49, r1	; 0x31
     fd4:	1a aa       	std	Y+50, r1	; 0x32
     fd6:	1b aa       	std	Y+51, r1	; 0x33
     fd8:	1c aa       	std	Y+52, r1	; 0x34
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <__stack+0x783>
     fdc:	66 24       	eor	r6, r6
     fde:	77 24       	eor	r7, r7
     fe0:	43 01       	movw	r8, r6
     fe2:	fe 01       	movw	r30, r28
     fe4:	71 96       	adiw	r30, 0x11	; 17
     fe6:	88 e0       	ldi	r24, 0x08	; 8
     fe8:	df 01       	movw	r26, r30
     fea:	1d 92       	st	X+, r1
     fec:	8a 95       	dec	r24
     fee:	e9 f7       	brne	.-6      	; 0xfea <__stack+0x78b>
     ff0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ff2:	ba a8       	ldd	r11, Y+50	; 0x32
     ff4:	cb a8       	ldd	r12, Y+51	; 0x33
     ff6:	dc a8       	ldd	r13, Y+52	; 0x34
     ff8:	a9 8a       	std	Y+17, r10	; 0x11
     ffa:	ba 8a       	std	Y+18, r11	; 0x12
     ffc:	cb 8a       	std	Y+19, r12	; 0x13
     ffe:	dc 8a       	std	Y+20, r13	; 0x14
    1000:	6d 8a       	std	Y+21, r6	; 0x15
    1002:	7e 8a       	std	Y+22, r7	; 0x16
    1004:	8f 8a       	std	Y+23, r8	; 0x17
    1006:	98 8e       	std	Y+24, r9	; 0x18
    1008:	29 a9       	ldd	r18, Y+49	; 0x31
    100a:	3a 89       	ldd	r19, Y+18	; 0x12
    100c:	4b 89       	ldd	r20, Y+19	; 0x13
    100e:	5c 89       	ldd	r21, Y+20	; 0x14
    1010:	66 2d       	mov	r22, r6
    1012:	7e 89       	ldd	r23, Y+22	; 0x16
    1014:	8f 89       	ldd	r24, Y+23	; 0x17
    1016:	98 8d       	ldd	r25, Y+24	; 0x18
    1018:	c2 5a       	subi	r28, 0xA2	; 162
    101a:	df 4f       	sbci	r29, 0xFF	; 255
    101c:	e2 e1       	ldi	r30, 0x12	; 18
    101e:	0c 94 7e 37 	jmp	0x6efc	; 0x6efc <__epilogue_restores__>

00001022 <__umoddi3>:
    1022:	ab e5       	ldi	r26, 0x5B	; 91
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e1       	ldi	r30, 0x17	; 23
    1028:	f8 e0       	ldi	r31, 0x08	; 8
    102a:	0c 94 62 37 	jmp	0x6ec4	; 0x6ec4 <__prologue_saves__>
    102e:	a8 e0       	ldi	r26, 0x08	; 8
    1030:	4e 01       	movw	r8, r28
    1032:	08 94       	sec
    1034:	81 1c       	adc	r8, r1
    1036:	91 1c       	adc	r9, r1
    1038:	f4 01       	movw	r30, r8
    103a:	6a 2e       	mov	r6, r26
    103c:	11 92       	st	Z+, r1
    103e:	6a 94       	dec	r6
    1040:	e9 f7       	brne	.-6      	; 0x103c <__umoddi3+0x1a>
    1042:	29 83       	std	Y+1, r18	; 0x01
    1044:	3a 83       	std	Y+2, r19	; 0x02
    1046:	4b 83       	std	Y+3, r20	; 0x03
    1048:	5c 83       	std	Y+4, r21	; 0x04
    104a:	6d 83       	std	Y+5, r22	; 0x05
    104c:	7e 83       	std	Y+6, r23	; 0x06
    104e:	8f 83       	std	Y+7, r24	; 0x07
    1050:	98 87       	std	Y+8, r25	; 0x08
    1052:	ce 01       	movw	r24, r28
    1054:	09 96       	adiw	r24, 0x09	; 9
    1056:	fc 01       	movw	r30, r24
    1058:	11 92       	st	Z+, r1
    105a:	aa 95       	dec	r26
    105c:	e9 f7       	brne	.-6      	; 0x1058 <__umoddi3+0x36>
    105e:	a9 86       	std	Y+9, r10	; 0x09
    1060:	ba 86       	std	Y+10, r11	; 0x0a
    1062:	cb 86       	std	Y+11, r12	; 0x0b
    1064:	dc 86       	std	Y+12, r13	; 0x0c
    1066:	ed 86       	std	Y+13, r14	; 0x0d
    1068:	fe 86       	std	Y+14, r15	; 0x0e
    106a:	0f 87       	std	Y+15, r16	; 0x0f
    106c:	18 8b       	std	Y+16, r17	; 0x10
    106e:	29 84       	ldd	r2, Y+9	; 0x09
    1070:	3a 84       	ldd	r3, Y+10	; 0x0a
    1072:	4b 84       	ldd	r4, Y+11	; 0x0b
    1074:	5c 84       	ldd	r5, Y+12	; 0x0c
    1076:	ad 84       	ldd	r10, Y+13	; 0x0d
    1078:	be 84       	ldd	r11, Y+14	; 0x0e
    107a:	cf 84       	ldd	r12, Y+15	; 0x0f
    107c:	d8 88       	ldd	r13, Y+16	; 0x10
    107e:	29 81       	ldd	r18, Y+1	; 0x01
    1080:	3a 81       	ldd	r19, Y+2	; 0x02
    1082:	4b 81       	ldd	r20, Y+3	; 0x03
    1084:	5c 81       	ldd	r21, Y+4	; 0x04
    1086:	69 96       	adiw	r28, 0x19	; 25
    1088:	2f af       	std	Y+63, r18	; 0x3f
    108a:	69 97       	sbiw	r28, 0x19	; 25
    108c:	6a 96       	adiw	r28, 0x1a	; 26
    108e:	3f af       	std	Y+63, r19	; 0x3f
    1090:	6a 97       	sbiw	r28, 0x1a	; 26
    1092:	6b 96       	adiw	r28, 0x1b	; 27
    1094:	4f af       	std	Y+63, r20	; 0x3f
    1096:	6b 97       	sbiw	r28, 0x1b	; 27
    1098:	6c 96       	adiw	r28, 0x1c	; 28
    109a:	5f af       	std	Y+63, r21	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	6c 96       	adiw	r28, 0x1c	; 28
    10a0:	6c ac       	ldd	r6, Y+60	; 0x3c
    10a2:	7d ac       	ldd	r7, Y+61	; 0x3d
    10a4:	8e ac       	ldd	r8, Y+62	; 0x3e
    10a6:	9f ac       	ldd	r9, Y+63	; 0x3f
    10a8:	6c 97       	sbiw	r28, 0x1c	; 28
    10aa:	69 aa       	std	Y+49, r6	; 0x31
    10ac:	7a aa       	std	Y+50, r7	; 0x32
    10ae:	8b aa       	std	Y+51, r8	; 0x33
    10b0:	9c aa       	std	Y+52, r9	; 0x34
    10b2:	6d 81       	ldd	r22, Y+5	; 0x05
    10b4:	7e 81       	ldd	r23, Y+6	; 0x06
    10b6:	8f 81       	ldd	r24, Y+7	; 0x07
    10b8:	98 85       	ldd	r25, Y+8	; 0x08
    10ba:	3b 01       	movw	r6, r22
    10bc:	4c 01       	movw	r8, r24
    10be:	6d aa       	std	Y+53, r6	; 0x35
    10c0:	7e aa       	std	Y+54, r7	; 0x36
    10c2:	8f aa       	std	Y+55, r8	; 0x37
    10c4:	98 ae       	std	Y+56, r9	; 0x38
    10c6:	a1 14       	cp	r10, r1
    10c8:	b1 04       	cpc	r11, r1
    10ca:	c1 04       	cpc	r12, r1
    10cc:	d1 04       	cpc	r13, r1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <__umoddi3+0xb0>
    10d0:	04 c3       	rjmp	.+1544   	; 0x16da <__umoddi3+0x6b8>
    10d2:	62 14       	cp	r6, r2
    10d4:	73 04       	cpc	r7, r3
    10d6:	84 04       	cpc	r8, r4
    10d8:	95 04       	cpc	r9, r5
    10da:	08 f0       	brcs	.+2      	; 0x10de <__umoddi3+0xbc>
    10dc:	00 c1       	rjmp	.+512    	; 0x12de <__umoddi3+0x2bc>
    10de:	00 e0       	ldi	r16, 0x00	; 0
    10e0:	20 16       	cp	r2, r16
    10e2:	00 e0       	ldi	r16, 0x00	; 0
    10e4:	30 06       	cpc	r3, r16
    10e6:	01 e0       	ldi	r16, 0x01	; 1
    10e8:	40 06       	cpc	r4, r16
    10ea:	00 e0       	ldi	r16, 0x00	; 0
    10ec:	50 06       	cpc	r5, r16
    10ee:	88 f4       	brcc	.+34     	; 0x1112 <__umoddi3+0xf0>
    10f0:	1f ef       	ldi	r17, 0xFF	; 255
    10f2:	21 16       	cp	r2, r17
    10f4:	31 04       	cpc	r3, r1
    10f6:	41 04       	cpc	r4, r1
    10f8:	51 04       	cpc	r5, r1
    10fa:	39 f0       	breq	.+14     	; 0x110a <__umoddi3+0xe8>
    10fc:	30 f0       	brcs	.+12     	; 0x110a <__umoddi3+0xe8>
    10fe:	88 e0       	ldi	r24, 0x08	; 8
    1100:	e8 2e       	mov	r14, r24
    1102:	f1 2c       	mov	r15, r1
    1104:	01 2d       	mov	r16, r1
    1106:	11 2d       	mov	r17, r1
    1108:	18 c0       	rjmp	.+48     	; 0x113a <__umoddi3+0x118>
    110a:	ee 24       	eor	r14, r14
    110c:	ff 24       	eor	r15, r15
    110e:	87 01       	movw	r16, r14
    1110:	14 c0       	rjmp	.+40     	; 0x113a <__umoddi3+0x118>
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	24 16       	cp	r2, r20
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	34 06       	cpc	r3, r20
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	44 06       	cpc	r4, r20
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	54 06       	cpc	r5, r20
    1122:	30 f0       	brcs	.+12     	; 0x1130 <__umoddi3+0x10e>
    1124:	b8 e1       	ldi	r27, 0x18	; 24
    1126:	eb 2e       	mov	r14, r27
    1128:	f1 2c       	mov	r15, r1
    112a:	01 2d       	mov	r16, r1
    112c:	11 2d       	mov	r17, r1
    112e:	05 c0       	rjmp	.+10     	; 0x113a <__umoddi3+0x118>
    1130:	a0 e1       	ldi	r26, 0x10	; 16
    1132:	ea 2e       	mov	r14, r26
    1134:	f1 2c       	mov	r15, r1
    1136:	01 2d       	mov	r16, r1
    1138:	11 2d       	mov	r17, r1
    113a:	d2 01       	movw	r26, r4
    113c:	c1 01       	movw	r24, r2
    113e:	0e 2c       	mov	r0, r14
    1140:	04 c0       	rjmp	.+8      	; 0x114a <__umoddi3+0x128>
    1142:	b6 95       	lsr	r27
    1144:	a7 95       	ror	r26
    1146:	97 95       	ror	r25
    1148:	87 95       	ror	r24
    114a:	0a 94       	dec	r0
    114c:	d2 f7       	brpl	.-12     	; 0x1142 <__umoddi3+0x120>
    114e:	8c 55       	subi	r24, 0x5C	; 92
    1150:	9e 4f       	sbci	r25, 0xFE	; 254
    1152:	dc 01       	movw	r26, r24
    1154:	2c 91       	ld	r18, X
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a0 e0       	ldi	r26, 0x00	; 0
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	8e 19       	sub	r24, r14
    1160:	9f 09       	sbc	r25, r15
    1162:	a0 0b       	sbc	r26, r16
    1164:	b1 0b       	sbc	r27, r17
    1166:	5c 01       	movw	r10, r24
    1168:	6d 01       	movw	r12, r26
    116a:	a2 1a       	sub	r10, r18
    116c:	b1 08       	sbc	r11, r1
    116e:	c1 08       	sbc	r12, r1
    1170:	d1 08       	sbc	r13, r1
    1172:	a9 ae       	std	Y+57, r10	; 0x39
    1174:	ba ae       	std	Y+58, r11	; 0x3a
    1176:	cb ae       	std	Y+59, r12	; 0x3b
    1178:	dc ae       	std	Y+60, r13	; 0x3c
    117a:	a1 14       	cp	r10, r1
    117c:	b1 04       	cpc	r11, r1
    117e:	c1 04       	cpc	r12, r1
    1180:	d1 04       	cpc	r13, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <__umoddi3+0x164>
    1184:	3f c0       	rjmp	.+126    	; 0x1204 <__umoddi3+0x1e2>
    1186:	69 ad       	ldd	r22, Y+57	; 0x39
    1188:	06 2e       	mov	r0, r22
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <__umoddi3+0x172>
    118c:	22 0c       	add	r2, r2
    118e:	33 1c       	adc	r3, r3
    1190:	44 1c       	adc	r4, r4
    1192:	55 1c       	adc	r5, r5
    1194:	0a 94       	dec	r0
    1196:	d2 f7       	brpl	.-12     	; 0x118c <__umoddi3+0x16a>
    1198:	a4 01       	movw	r20, r8
    119a:	93 01       	movw	r18, r6
    119c:	06 2e       	mov	r0, r22
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <__umoddi3+0x186>
    11a0:	22 0f       	add	r18, r18
    11a2:	33 1f       	adc	r19, r19
    11a4:	44 1f       	adc	r20, r20
    11a6:	55 1f       	adc	r21, r21
    11a8:	0a 94       	dec	r0
    11aa:	d2 f7       	brpl	.-12     	; 0x11a0 <__umoddi3+0x17e>
    11ac:	80 e2       	ldi	r24, 0x20	; 32
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	8a 19       	sub	r24, r10
    11b2:	9b 09       	sbc	r25, r11
    11b4:	6c 96       	adiw	r28, 0x1c	; 28
    11b6:	cc ac       	ldd	r12, Y+60	; 0x3c
    11b8:	dd ac       	ldd	r13, Y+61	; 0x3d
    11ba:	ee ac       	ldd	r14, Y+62	; 0x3e
    11bc:	ff ac       	ldd	r15, Y+63	; 0x3f
    11be:	6c 97       	sbiw	r28, 0x1c	; 28
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <__umoddi3+0x1a8>
    11c2:	f6 94       	lsr	r15
    11c4:	e7 94       	ror	r14
    11c6:	d7 94       	ror	r13
    11c8:	c7 94       	ror	r12
    11ca:	8a 95       	dec	r24
    11cc:	d2 f7       	brpl	.-12     	; 0x11c2 <__umoddi3+0x1a0>
    11ce:	87 01       	movw	r16, r14
    11d0:	76 01       	movw	r14, r12
    11d2:	e2 2a       	or	r14, r18
    11d4:	f3 2a       	or	r15, r19
    11d6:	04 2b       	or	r16, r20
    11d8:	15 2b       	or	r17, r21
    11da:	ed aa       	std	Y+53, r14	; 0x35
    11dc:	fe aa       	std	Y+54, r15	; 0x36
    11de:	0f ab       	std	Y+55, r16	; 0x37
    11e0:	18 af       	std	Y+56, r17	; 0x38
    11e2:	6c 96       	adiw	r28, 0x1c	; 28
    11e4:	8c ad       	ldd	r24, Y+60	; 0x3c
    11e6:	9d ad       	ldd	r25, Y+61	; 0x3d
    11e8:	ae ad       	ldd	r26, Y+62	; 0x3e
    11ea:	bf ad       	ldd	r27, Y+63	; 0x3f
    11ec:	6c 97       	sbiw	r28, 0x1c	; 28
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <__umoddi3+0x1d6>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	aa 1f       	adc	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	6a 95       	dec	r22
    11fa:	d2 f7       	brpl	.-12     	; 0x11f0 <__umoddi3+0x1ce>
    11fc:	89 ab       	std	Y+49, r24	; 0x31
    11fe:	9a ab       	std	Y+50, r25	; 0x32
    1200:	ab ab       	std	Y+51, r26	; 0x33
    1202:	bc ab       	std	Y+52, r27	; 0x34
    1204:	32 01       	movw	r6, r4
    1206:	88 24       	eor	r8, r8
    1208:	99 24       	eor	r9, r9
    120a:	b2 01       	movw	r22, r4
    120c:	a1 01       	movw	r20, r2
    120e:	60 70       	andi	r22, 0x00	; 0
    1210:	70 70       	andi	r23, 0x00	; 0
    1212:	21 96       	adiw	r28, 0x01	; 1
    1214:	4c af       	std	Y+60, r20	; 0x3c
    1216:	5d af       	std	Y+61, r21	; 0x3d
    1218:	6e af       	std	Y+62, r22	; 0x3e
    121a:	7f af       	std	Y+63, r23	; 0x3f
    121c:	21 97       	sbiw	r28, 0x01	; 1
    121e:	6d a9       	ldd	r22, Y+53	; 0x35
    1220:	7e a9       	ldd	r23, Y+54	; 0x36
    1222:	8f a9       	ldd	r24, Y+55	; 0x37
    1224:	98 ad       	ldd	r25, Y+56	; 0x38
    1226:	a4 01       	movw	r20, r8
    1228:	93 01       	movw	r18, r6
    122a:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    122e:	7b 01       	movw	r14, r22
    1230:	8c 01       	movw	r16, r24
    1232:	6d a9       	ldd	r22, Y+53	; 0x35
    1234:	7e a9       	ldd	r23, Y+54	; 0x36
    1236:	8f a9       	ldd	r24, Y+55	; 0x37
    1238:	98 ad       	ldd	r25, Y+56	; 0x38
    123a:	a4 01       	movw	r20, r8
    123c:	93 01       	movw	r18, r6
    123e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    1242:	ca 01       	movw	r24, r20
    1244:	b9 01       	movw	r22, r18
    1246:	21 96       	adiw	r28, 0x01	; 1
    1248:	2c ad       	ldd	r18, Y+60	; 0x3c
    124a:	3d ad       	ldd	r19, Y+61	; 0x3d
    124c:	4e ad       	ldd	r20, Y+62	; 0x3e
    124e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1250:	21 97       	sbiw	r28, 0x01	; 1
    1252:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	87 01       	movw	r16, r14
    125c:	ff 24       	eor	r15, r15
    125e:	ee 24       	eor	r14, r14
    1260:	a9 a8       	ldd	r10, Y+49	; 0x31
    1262:	ba a8       	ldd	r11, Y+50	; 0x32
    1264:	cb a8       	ldd	r12, Y+51	; 0x33
    1266:	dc a8       	ldd	r13, Y+52	; 0x34
    1268:	c6 01       	movw	r24, r12
    126a:	aa 27       	eor	r26, r26
    126c:	bb 27       	eor	r27, r27
    126e:	57 01       	movw	r10, r14
    1270:	68 01       	movw	r12, r16
    1272:	a8 2a       	or	r10, r24
    1274:	b9 2a       	or	r11, r25
    1276:	ca 2a       	or	r12, r26
    1278:	db 2a       	or	r13, r27
    127a:	a2 16       	cp	r10, r18
    127c:	b3 06       	cpc	r11, r19
    127e:	c4 06       	cpc	r12, r20
    1280:	d5 06       	cpc	r13, r21
    1282:	90 f4       	brcc	.+36     	; 0x12a8 <__umoddi3+0x286>
    1284:	a2 0c       	add	r10, r2
    1286:	b3 1c       	adc	r11, r3
    1288:	c4 1c       	adc	r12, r4
    128a:	d5 1c       	adc	r13, r5
    128c:	a2 14       	cp	r10, r2
    128e:	b3 04       	cpc	r11, r3
    1290:	c4 04       	cpc	r12, r4
    1292:	d5 04       	cpc	r13, r5
    1294:	48 f0       	brcs	.+18     	; 0x12a8 <__umoddi3+0x286>
    1296:	a2 16       	cp	r10, r18
    1298:	b3 06       	cpc	r11, r19
    129a:	c4 06       	cpc	r12, r20
    129c:	d5 06       	cpc	r13, r21
    129e:	20 f4       	brcc	.+8      	; 0x12a8 <__umoddi3+0x286>
    12a0:	a2 0c       	add	r10, r2
    12a2:	b3 1c       	adc	r11, r3
    12a4:	c4 1c       	adc	r12, r4
    12a6:	d5 1c       	adc	r13, r5
    12a8:	a2 1a       	sub	r10, r18
    12aa:	b3 0a       	sbc	r11, r19
    12ac:	c4 0a       	sbc	r12, r20
    12ae:	d5 0a       	sbc	r13, r21
    12b0:	c6 01       	movw	r24, r12
    12b2:	b5 01       	movw	r22, r10
    12b4:	a4 01       	movw	r20, r8
    12b6:	93 01       	movw	r18, r6
    12b8:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    12bc:	7b 01       	movw	r14, r22
    12be:	8c 01       	movw	r16, r24
    12c0:	c6 01       	movw	r24, r12
    12c2:	b5 01       	movw	r22, r10
    12c4:	a4 01       	movw	r20, r8
    12c6:	93 01       	movw	r18, r6
    12c8:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    12cc:	ca 01       	movw	r24, r20
    12ce:	b9 01       	movw	r22, r18
    12d0:	21 96       	adiw	r28, 0x01	; 1
    12d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12da:	21 97       	sbiw	r28, 0x01	; 1
    12dc:	ba c1       	rjmp	.+884    	; 0x1652 <__umoddi3+0x630>
    12de:	21 14       	cp	r2, r1
    12e0:	31 04       	cpc	r3, r1
    12e2:	41 04       	cpc	r4, r1
    12e4:	51 04       	cpc	r5, r1
    12e6:	71 f4       	brne	.+28     	; 0x1304 <__umoddi3+0x2e2>
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    12fc:	c9 01       	movw	r24, r18
    12fe:	da 01       	movw	r26, r20
    1300:	1c 01       	movw	r2, r24
    1302:	2d 01       	movw	r4, r26
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	20 16       	cp	r2, r16
    1308:	00 e0       	ldi	r16, 0x00	; 0
    130a:	30 06       	cpc	r3, r16
    130c:	01 e0       	ldi	r16, 0x01	; 1
    130e:	40 06       	cpc	r4, r16
    1310:	00 e0       	ldi	r16, 0x00	; 0
    1312:	50 06       	cpc	r5, r16
    1314:	88 f4       	brcc	.+34     	; 0x1338 <__umoddi3+0x316>
    1316:	1f ef       	ldi	r17, 0xFF	; 255
    1318:	21 16       	cp	r2, r17
    131a:	31 04       	cpc	r3, r1
    131c:	41 04       	cpc	r4, r1
    131e:	51 04       	cpc	r5, r1
    1320:	39 f0       	breq	.+14     	; 0x1330 <__umoddi3+0x30e>
    1322:	30 f0       	brcs	.+12     	; 0x1330 <__umoddi3+0x30e>
    1324:	68 e0       	ldi	r22, 0x08	; 8
    1326:	e6 2e       	mov	r14, r22
    1328:	f1 2c       	mov	r15, r1
    132a:	01 2d       	mov	r16, r1
    132c:	11 2d       	mov	r17, r1
    132e:	18 c0       	rjmp	.+48     	; 0x1360 <__umoddi3+0x33e>
    1330:	ee 24       	eor	r14, r14
    1332:	ff 24       	eor	r15, r15
    1334:	87 01       	movw	r16, r14
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <__umoddi3+0x33e>
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	24 16       	cp	r2, r20
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	34 06       	cpc	r3, r20
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	44 06       	cpc	r4, r20
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	54 06       	cpc	r5, r20
    1348:	30 f0       	brcs	.+12     	; 0x1356 <__umoddi3+0x334>
    134a:	58 e1       	ldi	r21, 0x18	; 24
    134c:	e5 2e       	mov	r14, r21
    134e:	f1 2c       	mov	r15, r1
    1350:	01 2d       	mov	r16, r1
    1352:	11 2d       	mov	r17, r1
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <__umoddi3+0x33e>
    1356:	40 e1       	ldi	r20, 0x10	; 16
    1358:	e4 2e       	mov	r14, r20
    135a:	f1 2c       	mov	r15, r1
    135c:	01 2d       	mov	r16, r1
    135e:	11 2d       	mov	r17, r1
    1360:	d2 01       	movw	r26, r4
    1362:	c1 01       	movw	r24, r2
    1364:	0e 2c       	mov	r0, r14
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <__umoddi3+0x34e>
    1368:	b6 95       	lsr	r27
    136a:	a7 95       	ror	r26
    136c:	97 95       	ror	r25
    136e:	87 95       	ror	r24
    1370:	0a 94       	dec	r0
    1372:	d2 f7       	brpl	.-12     	; 0x1368 <__umoddi3+0x346>
    1374:	8c 55       	subi	r24, 0x5C	; 92
    1376:	9e 4f       	sbci	r25, 0xFE	; 254
    1378:	dc 01       	movw	r26, r24
    137a:	2c 91       	ld	r18, X
    137c:	30 e2       	ldi	r19, 0x20	; 32
    137e:	a3 2e       	mov	r10, r19
    1380:	b1 2c       	mov	r11, r1
    1382:	c1 2c       	mov	r12, r1
    1384:	d1 2c       	mov	r13, r1
    1386:	d6 01       	movw	r26, r12
    1388:	c5 01       	movw	r24, r10
    138a:	8e 19       	sub	r24, r14
    138c:	9f 09       	sbc	r25, r15
    138e:	a0 0b       	sbc	r26, r16
    1390:	b1 0b       	sbc	r27, r17
    1392:	7c 01       	movw	r14, r24
    1394:	8d 01       	movw	r16, r26
    1396:	e2 1a       	sub	r14, r18
    1398:	f1 08       	sbc	r15, r1
    139a:	01 09       	sbc	r16, r1
    139c:	11 09       	sbc	r17, r1
    139e:	e9 ae       	std	Y+57, r14	; 0x39
    13a0:	fa ae       	std	Y+58, r15	; 0x3a
    13a2:	0b af       	std	Y+59, r16	; 0x3b
    13a4:	1c af       	std	Y+60, r17	; 0x3c
    13a6:	e1 14       	cp	r14, r1
    13a8:	f1 04       	cpc	r15, r1
    13aa:	01 05       	cpc	r16, r1
    13ac:	11 05       	cpc	r17, r1
    13ae:	39 f4       	brne	.+14     	; 0x13be <__umoddi3+0x39c>
    13b0:	64 01       	movw	r12, r8
    13b2:	53 01       	movw	r10, r6
    13b4:	a2 18       	sub	r10, r2
    13b6:	b3 08       	sbc	r11, r3
    13b8:	c4 08       	sbc	r12, r4
    13ba:	d5 08       	sbc	r13, r5
    13bc:	e2 c0       	rjmp	.+452    	; 0x1582 <__umoddi3+0x560>
    13be:	f9 ac       	ldd	r15, Y+57	; 0x39
    13c0:	68 96       	adiw	r28, 0x18	; 24
    13c2:	ff ae       	std	Y+63, r15	; 0x3f
    13c4:	68 97       	sbiw	r28, 0x18	; 24
    13c6:	0f 2c       	mov	r0, r15
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <__umoddi3+0x3b0>
    13ca:	22 0c       	add	r2, r2
    13cc:	33 1c       	adc	r3, r3
    13ce:	44 1c       	adc	r4, r4
    13d0:	55 1c       	adc	r5, r5
    13d2:	0a 94       	dec	r0
    13d4:	d2 f7       	brpl	.-12     	; 0x13ca <__umoddi3+0x3a8>
    13d6:	8a 2d       	mov	r24, r10
    13d8:	8f 19       	sub	r24, r15
    13da:	64 01       	movw	r12, r8
    13dc:	53 01       	movw	r10, r6
    13de:	08 2e       	mov	r0, r24
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <__umoddi3+0x3c8>
    13e2:	d6 94       	lsr	r13
    13e4:	c7 94       	ror	r12
    13e6:	b7 94       	ror	r11
    13e8:	a7 94       	ror	r10
    13ea:	0a 94       	dec	r0
    13ec:	d2 f7       	brpl	.-12     	; 0x13e2 <__umoddi3+0x3c0>
    13ee:	a4 01       	movw	r20, r8
    13f0:	93 01       	movw	r18, r6
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <__umoddi3+0x3da>
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	44 1f       	adc	r20, r20
    13fa:	55 1f       	adc	r21, r21
    13fc:	fa 94       	dec	r15
    13fe:	d2 f7       	brpl	.-12     	; 0x13f4 <__umoddi3+0x3d2>
    1400:	6c 96       	adiw	r28, 0x1c	; 28
    1402:	6c ac       	ldd	r6, Y+60	; 0x3c
    1404:	7d ac       	ldd	r7, Y+61	; 0x3d
    1406:	8e ac       	ldd	r8, Y+62	; 0x3e
    1408:	9f ac       	ldd	r9, Y+63	; 0x3f
    140a:	6c 97       	sbiw	r28, 0x1c	; 28
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <__umoddi3+0x3f4>
    140e:	96 94       	lsr	r9
    1410:	87 94       	ror	r8
    1412:	77 94       	ror	r7
    1414:	67 94       	ror	r6
    1416:	8a 95       	dec	r24
    1418:	d2 f7       	brpl	.-12     	; 0x140e <__umoddi3+0x3ec>
    141a:	84 01       	movw	r16, r8
    141c:	73 01       	movw	r14, r6
    141e:	e2 2a       	or	r14, r18
    1420:	f3 2a       	or	r15, r19
    1422:	04 2b       	or	r16, r20
    1424:	15 2b       	or	r17, r21
    1426:	ed a6       	std	Y+45, r14	; 0x2d
    1428:	fe a6       	std	Y+46, r15	; 0x2e
    142a:	0f a7       	std	Y+47, r16	; 0x2f
    142c:	18 ab       	std	Y+48, r17	; 0x30
    142e:	32 01       	movw	r6, r4
    1430:	88 24       	eor	r8, r8
    1432:	99 24       	eor	r9, r9
    1434:	b2 01       	movw	r22, r4
    1436:	a1 01       	movw	r20, r2
    1438:	60 70       	andi	r22, 0x00	; 0
    143a:	70 70       	andi	r23, 0x00	; 0
    143c:	25 96       	adiw	r28, 0x05	; 5
    143e:	4c af       	std	Y+60, r20	; 0x3c
    1440:	5d af       	std	Y+61, r21	; 0x3d
    1442:	6e af       	std	Y+62, r22	; 0x3e
    1444:	7f af       	std	Y+63, r23	; 0x3f
    1446:	25 97       	sbiw	r28, 0x05	; 5
    1448:	c6 01       	movw	r24, r12
    144a:	b5 01       	movw	r22, r10
    144c:	a4 01       	movw	r20, r8
    144e:	93 01       	movw	r18, r6
    1450:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    1454:	7b 01       	movw	r14, r22
    1456:	8c 01       	movw	r16, r24
    1458:	c6 01       	movw	r24, r12
    145a:	b5 01       	movw	r22, r10
    145c:	a4 01       	movw	r20, r8
    145e:	93 01       	movw	r18, r6
    1460:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    1464:	ca 01       	movw	r24, r20
    1466:	b9 01       	movw	r22, r18
    1468:	25 96       	adiw	r28, 0x05	; 5
    146a:	2c ad       	ldd	r18, Y+60	; 0x3c
    146c:	3d ad       	ldd	r19, Y+61	; 0x3d
    146e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1470:	5f ad       	ldd	r21, Y+63	; 0x3f
    1472:	25 97       	sbiw	r28, 0x05	; 5
    1474:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    1478:	9b 01       	movw	r18, r22
    147a:	ac 01       	movw	r20, r24
    147c:	87 01       	movw	r16, r14
    147e:	ff 24       	eor	r15, r15
    1480:	ee 24       	eor	r14, r14
    1482:	ad a4       	ldd	r10, Y+45	; 0x2d
    1484:	be a4       	ldd	r11, Y+46	; 0x2e
    1486:	cf a4       	ldd	r12, Y+47	; 0x2f
    1488:	d8 a8       	ldd	r13, Y+48	; 0x30
    148a:	c6 01       	movw	r24, r12
    148c:	aa 27       	eor	r26, r26
    148e:	bb 27       	eor	r27, r27
    1490:	5c 01       	movw	r10, r24
    1492:	6d 01       	movw	r12, r26
    1494:	ae 28       	or	r10, r14
    1496:	bf 28       	or	r11, r15
    1498:	c0 2a       	or	r12, r16
    149a:	d1 2a       	or	r13, r17
    149c:	a2 16       	cp	r10, r18
    149e:	b3 06       	cpc	r11, r19
    14a0:	c4 06       	cpc	r12, r20
    14a2:	d5 06       	cpc	r13, r21
    14a4:	90 f4       	brcc	.+36     	; 0x14ca <__umoddi3+0x4a8>
    14a6:	a2 0c       	add	r10, r2
    14a8:	b3 1c       	adc	r11, r3
    14aa:	c4 1c       	adc	r12, r4
    14ac:	d5 1c       	adc	r13, r5
    14ae:	a2 14       	cp	r10, r2
    14b0:	b3 04       	cpc	r11, r3
    14b2:	c4 04       	cpc	r12, r4
    14b4:	d5 04       	cpc	r13, r5
    14b6:	48 f0       	brcs	.+18     	; 0x14ca <__umoddi3+0x4a8>
    14b8:	a2 16       	cp	r10, r18
    14ba:	b3 06       	cpc	r11, r19
    14bc:	c4 06       	cpc	r12, r20
    14be:	d5 06       	cpc	r13, r21
    14c0:	20 f4       	brcc	.+8      	; 0x14ca <__umoddi3+0x4a8>
    14c2:	a2 0c       	add	r10, r2
    14c4:	b3 1c       	adc	r11, r3
    14c6:	c4 1c       	adc	r12, r4
    14c8:	d5 1c       	adc	r13, r5
    14ca:	a2 1a       	sub	r10, r18
    14cc:	b3 0a       	sbc	r11, r19
    14ce:	c4 0a       	sbc	r12, r20
    14d0:	d5 0a       	sbc	r13, r21
    14d2:	c6 01       	movw	r24, r12
    14d4:	b5 01       	movw	r22, r10
    14d6:	a4 01       	movw	r20, r8
    14d8:	93 01       	movw	r18, r6
    14da:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    14de:	7b 01       	movw	r14, r22
    14e0:	8c 01       	movw	r16, r24
    14e2:	c6 01       	movw	r24, r12
    14e4:	b5 01       	movw	r22, r10
    14e6:	a4 01       	movw	r20, r8
    14e8:	93 01       	movw	r18, r6
    14ea:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    14ee:	ca 01       	movw	r24, r20
    14f0:	b9 01       	movw	r22, r18
    14f2:	25 96       	adiw	r28, 0x05	; 5
    14f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    14f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    14f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    14fc:	25 97       	sbiw	r28, 0x05	; 5
    14fe:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    1502:	9b 01       	movw	r18, r22
    1504:	ac 01       	movw	r20, r24
    1506:	87 01       	movw	r16, r14
    1508:	ff 24       	eor	r15, r15
    150a:	ee 24       	eor	r14, r14
    150c:	8d a5       	ldd	r24, Y+45	; 0x2d
    150e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1510:	af a5       	ldd	r26, Y+47	; 0x2f
    1512:	b8 a9       	ldd	r27, Y+48	; 0x30
    1514:	a0 70       	andi	r26, 0x00	; 0
    1516:	b0 70       	andi	r27, 0x00	; 0
    1518:	57 01       	movw	r10, r14
    151a:	68 01       	movw	r12, r16
    151c:	a8 2a       	or	r10, r24
    151e:	b9 2a       	or	r11, r25
    1520:	ca 2a       	or	r12, r26
    1522:	db 2a       	or	r13, r27
    1524:	a2 16       	cp	r10, r18
    1526:	b3 06       	cpc	r11, r19
    1528:	c4 06       	cpc	r12, r20
    152a:	d5 06       	cpc	r13, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x530>
    152e:	a2 0c       	add	r10, r2
    1530:	b3 1c       	adc	r11, r3
    1532:	c4 1c       	adc	r12, r4
    1534:	d5 1c       	adc	r13, r5
    1536:	a2 14       	cp	r10, r2
    1538:	b3 04       	cpc	r11, r3
    153a:	c4 04       	cpc	r12, r4
    153c:	d5 04       	cpc	r13, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x530>
    1540:	a2 16       	cp	r10, r18
    1542:	b3 06       	cpc	r11, r19
    1544:	c4 06       	cpc	r12, r20
    1546:	d5 06       	cpc	r13, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x530>
    154a:	a2 0c       	add	r10, r2
    154c:	b3 1c       	adc	r11, r3
    154e:	c4 1c       	adc	r12, r4
    1550:	d5 1c       	adc	r13, r5
    1552:	6c 96       	adiw	r28, 0x1c	; 28
    1554:	ec ac       	ldd	r14, Y+60	; 0x3c
    1556:	fd ac       	ldd	r15, Y+61	; 0x3d
    1558:	0e ad       	ldd	r16, Y+62	; 0x3e
    155a:	1f ad       	ldd	r17, Y+63	; 0x3f
    155c:	6c 97       	sbiw	r28, 0x1c	; 28
    155e:	68 96       	adiw	r28, 0x18	; 24
    1560:	0f ac       	ldd	r0, Y+63	; 0x3f
    1562:	68 97       	sbiw	r28, 0x18	; 24
    1564:	04 c0       	rjmp	.+8      	; 0x156e <__umoddi3+0x54c>
    1566:	ee 0c       	add	r14, r14
    1568:	ff 1c       	adc	r15, r15
    156a:	00 1f       	adc	r16, r16
    156c:	11 1f       	adc	r17, r17
    156e:	0a 94       	dec	r0
    1570:	d2 f7       	brpl	.-12     	; 0x1566 <__umoddi3+0x544>
    1572:	e9 aa       	std	Y+49, r14	; 0x31
    1574:	fa aa       	std	Y+50, r15	; 0x32
    1576:	0b ab       	std	Y+51, r16	; 0x33
    1578:	1c ab       	std	Y+52, r17	; 0x34
    157a:	a2 1a       	sub	r10, r18
    157c:	b3 0a       	sbc	r11, r19
    157e:	c4 0a       	sbc	r12, r20
    1580:	d5 0a       	sbc	r13, r21
    1582:	32 01       	movw	r6, r4
    1584:	88 24       	eor	r8, r8
    1586:	99 24       	eor	r9, r9
    1588:	b2 01       	movw	r22, r4
    158a:	a1 01       	movw	r20, r2
    158c:	60 70       	andi	r22, 0x00	; 0
    158e:	70 70       	andi	r23, 0x00	; 0
    1590:	29 96       	adiw	r28, 0x09	; 9
    1592:	4c af       	std	Y+60, r20	; 0x3c
    1594:	5d af       	std	Y+61, r21	; 0x3d
    1596:	6e af       	std	Y+62, r22	; 0x3e
    1598:	7f af       	std	Y+63, r23	; 0x3f
    159a:	29 97       	sbiw	r28, 0x09	; 9
    159c:	c6 01       	movw	r24, r12
    159e:	b5 01       	movw	r22, r10
    15a0:	a4 01       	movw	r20, r8
    15a2:	93 01       	movw	r18, r6
    15a4:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    15a8:	7b 01       	movw	r14, r22
    15aa:	8c 01       	movw	r16, r24
    15ac:	c6 01       	movw	r24, r12
    15ae:	b5 01       	movw	r22, r10
    15b0:	a4 01       	movw	r20, r8
    15b2:	93 01       	movw	r18, r6
    15b4:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    15b8:	ca 01       	movw	r24, r20
    15ba:	b9 01       	movw	r22, r18
    15bc:	29 96       	adiw	r28, 0x09	; 9
    15be:	2c ad       	ldd	r18, Y+60	; 0x3c
    15c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    15c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    15c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    15c6:	29 97       	sbiw	r28, 0x09	; 9
    15c8:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	87 01       	movw	r16, r14
    15d2:	ff 24       	eor	r15, r15
    15d4:	ee 24       	eor	r14, r14
    15d6:	a9 a8       	ldd	r10, Y+49	; 0x31
    15d8:	ba a8       	ldd	r11, Y+50	; 0x32
    15da:	cb a8       	ldd	r12, Y+51	; 0x33
    15dc:	dc a8       	ldd	r13, Y+52	; 0x34
    15de:	c6 01       	movw	r24, r12
    15e0:	aa 27       	eor	r26, r26
    15e2:	bb 27       	eor	r27, r27
    15e4:	57 01       	movw	r10, r14
    15e6:	68 01       	movw	r12, r16
    15e8:	a8 2a       	or	r10, r24
    15ea:	b9 2a       	or	r11, r25
    15ec:	ca 2a       	or	r12, r26
    15ee:	db 2a       	or	r13, r27
    15f0:	a2 16       	cp	r10, r18
    15f2:	b3 06       	cpc	r11, r19
    15f4:	c4 06       	cpc	r12, r20
    15f6:	d5 06       	cpc	r13, r21
    15f8:	90 f4       	brcc	.+36     	; 0x161e <__umoddi3+0x5fc>
    15fa:	a2 0c       	add	r10, r2
    15fc:	b3 1c       	adc	r11, r3
    15fe:	c4 1c       	adc	r12, r4
    1600:	d5 1c       	adc	r13, r5
    1602:	a2 14       	cp	r10, r2
    1604:	b3 04       	cpc	r11, r3
    1606:	c4 04       	cpc	r12, r4
    1608:	d5 04       	cpc	r13, r5
    160a:	48 f0       	brcs	.+18     	; 0x161e <__umoddi3+0x5fc>
    160c:	a2 16       	cp	r10, r18
    160e:	b3 06       	cpc	r11, r19
    1610:	c4 06       	cpc	r12, r20
    1612:	d5 06       	cpc	r13, r21
    1614:	20 f4       	brcc	.+8      	; 0x161e <__umoddi3+0x5fc>
    1616:	a2 0c       	add	r10, r2
    1618:	b3 1c       	adc	r11, r3
    161a:	c4 1c       	adc	r12, r4
    161c:	d5 1c       	adc	r13, r5
    161e:	a2 1a       	sub	r10, r18
    1620:	b3 0a       	sbc	r11, r19
    1622:	c4 0a       	sbc	r12, r20
    1624:	d5 0a       	sbc	r13, r21
    1626:	c6 01       	movw	r24, r12
    1628:	b5 01       	movw	r22, r10
    162a:	a4 01       	movw	r20, r8
    162c:	93 01       	movw	r18, r6
    162e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    1632:	7b 01       	movw	r14, r22
    1634:	8c 01       	movw	r16, r24
    1636:	c6 01       	movw	r24, r12
    1638:	b5 01       	movw	r22, r10
    163a:	a4 01       	movw	r20, r8
    163c:	93 01       	movw	r18, r6
    163e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    1642:	ca 01       	movw	r24, r20
    1644:	b9 01       	movw	r22, r18
    1646:	29 96       	adiw	r28, 0x09	; 9
    1648:	2c ad       	ldd	r18, Y+60	; 0x3c
    164a:	3d ad       	ldd	r19, Y+61	; 0x3d
    164c:	4e ad       	ldd	r20, Y+62	; 0x3e
    164e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1650:	29 97       	sbiw	r28, 0x09	; 9
    1652:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	87 01       	movw	r16, r14
    165c:	ff 24       	eor	r15, r15
    165e:	ee 24       	eor	r14, r14
    1660:	89 a9       	ldd	r24, Y+49	; 0x31
    1662:	9a a9       	ldd	r25, Y+50	; 0x32
    1664:	ab a9       	ldd	r26, Y+51	; 0x33
    1666:	bc a9       	ldd	r27, Y+52	; 0x34
    1668:	a0 70       	andi	r26, 0x00	; 0
    166a:	b0 70       	andi	r27, 0x00	; 0
    166c:	e8 2a       	or	r14, r24
    166e:	f9 2a       	or	r15, r25
    1670:	0a 2b       	or	r16, r26
    1672:	1b 2b       	or	r17, r27
    1674:	e2 16       	cp	r14, r18
    1676:	f3 06       	cpc	r15, r19
    1678:	04 07       	cpc	r16, r20
    167a:	15 07       	cpc	r17, r21
    167c:	90 f4       	brcc	.+36     	; 0x16a2 <__umoddi3+0x680>
    167e:	e2 0c       	add	r14, r2
    1680:	f3 1c       	adc	r15, r3
    1682:	04 1d       	adc	r16, r4
    1684:	15 1d       	adc	r17, r5
    1686:	e2 14       	cp	r14, r2
    1688:	f3 04       	cpc	r15, r3
    168a:	04 05       	cpc	r16, r4
    168c:	15 05       	cpc	r17, r5
    168e:	48 f0       	brcs	.+18     	; 0x16a2 <__umoddi3+0x680>
    1690:	e2 16       	cp	r14, r18
    1692:	f3 06       	cpc	r15, r19
    1694:	04 07       	cpc	r16, r20
    1696:	15 07       	cpc	r17, r21
    1698:	20 f4       	brcc	.+8      	; 0x16a2 <__umoddi3+0x680>
    169a:	e2 0c       	add	r14, r2
    169c:	f3 1c       	adc	r15, r3
    169e:	04 1d       	adc	r16, r4
    16a0:	15 1d       	adc	r17, r5
    16a2:	e2 1a       	sub	r14, r18
    16a4:	f3 0a       	sbc	r15, r19
    16a6:	04 0b       	sbc	r16, r20
    16a8:	15 0b       	sbc	r17, r21
    16aa:	d8 01       	movw	r26, r16
    16ac:	c7 01       	movw	r24, r14
    16ae:	09 ac       	ldd	r0, Y+57	; 0x39
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <__umoddi3+0x698>
    16b2:	b6 95       	lsr	r27
    16b4:	a7 95       	ror	r26
    16b6:	97 95       	ror	r25
    16b8:	87 95       	ror	r24
    16ba:	0a 94       	dec	r0
    16bc:	d2 f7       	brpl	.-12     	; 0x16b2 <__umoddi3+0x690>
    16be:	89 8b       	std	Y+17, r24	; 0x11
    16c0:	9a 8b       	std	Y+18, r25	; 0x12
    16c2:	ab 8b       	std	Y+19, r26	; 0x13
    16c4:	bc 8b       	std	Y+20, r27	; 0x14
    16c6:	1d 8a       	std	Y+21, r1	; 0x15
    16c8:	1e 8a       	std	Y+22, r1	; 0x16
    16ca:	1f 8a       	std	Y+23, r1	; 0x17
    16cc:	18 8e       	std	Y+24, r1	; 0x18
    16ce:	28 2f       	mov	r18, r24
    16d0:	3a 89       	ldd	r19, Y+18	; 0x12
    16d2:	4b 89       	ldd	r20, Y+19	; 0x13
    16d4:	5c 89       	ldd	r21, Y+20	; 0x14
    16d6:	6d 89       	ldd	r22, Y+21	; 0x15
    16d8:	0c c3       	rjmp	.+1560   	; 0x1cf2 <__umoddi3+0xcd0>
    16da:	6a 14       	cp	r6, r10
    16dc:	7b 04       	cpc	r7, r11
    16de:	8c 04       	cpc	r8, r12
    16e0:	9d 04       	cpc	r9, r13
    16e2:	08 f4       	brcc	.+2      	; 0x16e6 <__umoddi3+0x6c4>
    16e4:	09 c3       	rjmp	.+1554   	; 0x1cf8 <__umoddi3+0xcd6>
    16e6:	00 e0       	ldi	r16, 0x00	; 0
    16e8:	a0 16       	cp	r10, r16
    16ea:	00 e0       	ldi	r16, 0x00	; 0
    16ec:	b0 06       	cpc	r11, r16
    16ee:	01 e0       	ldi	r16, 0x01	; 1
    16f0:	c0 06       	cpc	r12, r16
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	d0 06       	cpc	r13, r16
    16f6:	88 f4       	brcc	.+34     	; 0x171a <__umoddi3+0x6f8>
    16f8:	1f ef       	ldi	r17, 0xFF	; 255
    16fa:	a1 16       	cp	r10, r17
    16fc:	b1 04       	cpc	r11, r1
    16fe:	c1 04       	cpc	r12, r1
    1700:	d1 04       	cpc	r13, r1
    1702:	39 f0       	breq	.+14     	; 0x1712 <__umoddi3+0x6f0>
    1704:	30 f0       	brcs	.+12     	; 0x1712 <__umoddi3+0x6f0>
    1706:	28 e0       	ldi	r18, 0x08	; 8
    1708:	e2 2e       	mov	r14, r18
    170a:	f1 2c       	mov	r15, r1
    170c:	01 2d       	mov	r16, r1
    170e:	11 2d       	mov	r17, r1
    1710:	18 c0       	rjmp	.+48     	; 0x1742 <__umoddi3+0x720>
    1712:	ee 24       	eor	r14, r14
    1714:	ff 24       	eor	r15, r15
    1716:	87 01       	movw	r16, r14
    1718:	14 c0       	rjmp	.+40     	; 0x1742 <__umoddi3+0x720>
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	a4 16       	cp	r10, r20
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	b4 06       	cpc	r11, r20
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	c4 06       	cpc	r12, r20
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	d4 06       	cpc	r13, r20
    172a:	30 f0       	brcs	.+12     	; 0x1738 <__umoddi3+0x716>
    172c:	98 e1       	ldi	r25, 0x18	; 24
    172e:	e9 2e       	mov	r14, r25
    1730:	f1 2c       	mov	r15, r1
    1732:	01 2d       	mov	r16, r1
    1734:	11 2d       	mov	r17, r1
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <__umoddi3+0x720>
    1738:	80 e1       	ldi	r24, 0x10	; 16
    173a:	e8 2e       	mov	r14, r24
    173c:	f1 2c       	mov	r15, r1
    173e:	01 2d       	mov	r16, r1
    1740:	11 2d       	mov	r17, r1
    1742:	d6 01       	movw	r26, r12
    1744:	c5 01       	movw	r24, r10
    1746:	0e 2c       	mov	r0, r14
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <__umoddi3+0x730>
    174a:	b6 95       	lsr	r27
    174c:	a7 95       	ror	r26
    174e:	97 95       	ror	r25
    1750:	87 95       	ror	r24
    1752:	0a 94       	dec	r0
    1754:	d2 f7       	brpl	.-12     	; 0x174a <__umoddi3+0x728>
    1756:	8c 55       	subi	r24, 0x5C	; 92
    1758:	9e 4f       	sbci	r25, 0xFE	; 254
    175a:	dc 01       	movw	r26, r24
    175c:	2c 91       	ld	r18, X
    175e:	80 e2       	ldi	r24, 0x20	; 32
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a0 e0       	ldi	r26, 0x00	; 0
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	8e 19       	sub	r24, r14
    1768:	9f 09       	sbc	r25, r15
    176a:	a0 0b       	sbc	r26, r16
    176c:	b1 0b       	sbc	r27, r17
    176e:	82 1b       	sub	r24, r18
    1770:	91 09       	sbc	r25, r1
    1772:	a1 09       	sbc	r26, r1
    1774:	b1 09       	sbc	r27, r1
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	a1 05       	cpc	r26, r1
    177a:	b1 05       	cpc	r27, r1
    177c:	09 f0       	breq	.+2      	; 0x1780 <__umoddi3+0x75e>
    177e:	4f c0       	rjmp	.+158    	; 0x181e <__umoddi3+0x7fc>
    1780:	a6 14       	cp	r10, r6
    1782:	b7 04       	cpc	r11, r7
    1784:	c8 04       	cpc	r12, r8
    1786:	d9 04       	cpc	r13, r9
    1788:	58 f0       	brcs	.+22     	; 0x17a0 <__umoddi3+0x77e>
    178a:	6c 96       	adiw	r28, 0x1c	; 28
    178c:	ec ac       	ldd	r14, Y+60	; 0x3c
    178e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1790:	0e ad       	ldd	r16, Y+62	; 0x3e
    1792:	1f ad       	ldd	r17, Y+63	; 0x3f
    1794:	6c 97       	sbiw	r28, 0x1c	; 28
    1796:	e2 14       	cp	r14, r2
    1798:	f3 04       	cpc	r15, r3
    179a:	04 05       	cpc	r16, r4
    179c:	15 05       	cpc	r17, r5
    179e:	68 f1       	brcs	.+90     	; 0x17fa <__umoddi3+0x7d8>
    17a0:	6c 96       	adiw	r28, 0x1c	; 28
    17a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    17aa:	6c 97       	sbiw	r28, 0x1c	; 28
    17ac:	e2 18       	sub	r14, r2
    17ae:	f3 08       	sbc	r15, r3
    17b0:	04 09       	sbc	r16, r4
    17b2:	15 09       	sbc	r17, r5
    17b4:	a4 01       	movw	r20, r8
    17b6:	93 01       	movw	r18, r6
    17b8:	2a 19       	sub	r18, r10
    17ba:	3b 09       	sbc	r19, r11
    17bc:	4c 09       	sbc	r20, r12
    17be:	5d 09       	sbc	r21, r13
    17c0:	aa 24       	eor	r10, r10
    17c2:	bb 24       	eor	r11, r11
    17c4:	65 01       	movw	r12, r10
    17c6:	6c 96       	adiw	r28, 0x1c	; 28
    17c8:	6c ad       	ldd	r22, Y+60	; 0x3c
    17ca:	7d ad       	ldd	r23, Y+61	; 0x3d
    17cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    17ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    17d0:	6c 97       	sbiw	r28, 0x1c	; 28
    17d2:	6e 15       	cp	r22, r14
    17d4:	7f 05       	cpc	r23, r15
    17d6:	80 07       	cpc	r24, r16
    17d8:	91 07       	cpc	r25, r17
    17da:	28 f4       	brcc	.+10     	; 0x17e6 <__umoddi3+0x7c4>
    17dc:	b1 e0       	ldi	r27, 0x01	; 1
    17de:	ab 2e       	mov	r10, r27
    17e0:	b1 2c       	mov	r11, r1
    17e2:	c1 2c       	mov	r12, r1
    17e4:	d1 2c       	mov	r13, r1
    17e6:	da 01       	movw	r26, r20
    17e8:	c9 01       	movw	r24, r18
    17ea:	8a 19       	sub	r24, r10
    17ec:	9b 09       	sbc	r25, r11
    17ee:	ac 09       	sbc	r26, r12
    17f0:	bd 09       	sbc	r27, r13
    17f2:	8d ab       	std	Y+53, r24	; 0x35
    17f4:	9e ab       	std	Y+54, r25	; 0x36
    17f6:	af ab       	std	Y+55, r26	; 0x37
    17f8:	b8 af       	std	Y+56, r27	; 0x38
    17fa:	e9 8a       	std	Y+17, r14	; 0x11
    17fc:	fa 8a       	std	Y+18, r15	; 0x12
    17fe:	0b 8b       	std	Y+19, r16	; 0x13
    1800:	1c 8b       	std	Y+20, r17	; 0x14
    1802:	6d a8       	ldd	r6, Y+53	; 0x35
    1804:	7e a8       	ldd	r7, Y+54	; 0x36
    1806:	8f a8       	ldd	r8, Y+55	; 0x37
    1808:	98 ac       	ldd	r9, Y+56	; 0x38
    180a:	6d 8a       	std	Y+21, r6	; 0x15
    180c:	7e 8a       	std	Y+22, r7	; 0x16
    180e:	8f 8a       	std	Y+23, r8	; 0x17
    1810:	98 8e       	std	Y+24, r9	; 0x18
    1812:	2e 2d       	mov	r18, r14
    1814:	3a 89       	ldd	r19, Y+18	; 0x12
    1816:	4b 89       	ldd	r20, Y+19	; 0x13
    1818:	5c 89       	ldd	r21, Y+20	; 0x14
    181a:	6d a9       	ldd	r22, Y+53	; 0x35
    181c:	6a c2       	rjmp	.+1236   	; 0x1cf2 <__umoddi3+0xcd0>
    181e:	67 96       	adiw	r28, 0x17	; 23
    1820:	8f af       	std	Y+63, r24	; 0x3f
    1822:	67 97       	sbiw	r28, 0x17	; 23
    1824:	a6 01       	movw	r20, r12
    1826:	95 01       	movw	r18, r10
    1828:	08 2e       	mov	r0, r24
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <__umoddi3+0x812>
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	44 1f       	adc	r20, r20
    1832:	55 1f       	adc	r21, r21
    1834:	0a 94       	dec	r0
    1836:	d2 f7       	brpl	.-12     	; 0x182c <__umoddi3+0x80a>
    1838:	a0 e2       	ldi	r26, 0x20	; 32
    183a:	aa 2e       	mov	r10, r26
    183c:	a8 1a       	sub	r10, r24
    183e:	66 96       	adiw	r28, 0x16	; 22
    1840:	af ae       	std	Y+63, r10	; 0x3f
    1842:	66 97       	sbiw	r28, 0x16	; 22
    1844:	d2 01       	movw	r26, r4
    1846:	c1 01       	movw	r24, r2
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <__umoddi3+0x830>
    184a:	b6 95       	lsr	r27
    184c:	a7 95       	ror	r26
    184e:	97 95       	ror	r25
    1850:	87 95       	ror	r24
    1852:	aa 94       	dec	r10
    1854:	d2 f7       	brpl	.-12     	; 0x184a <__umoddi3+0x828>
    1856:	6c 01       	movw	r12, r24
    1858:	7d 01       	movw	r14, r26
    185a:	c2 2a       	or	r12, r18
    185c:	d3 2a       	or	r13, r19
    185e:	e4 2a       	or	r14, r20
    1860:	f5 2a       	or	r15, r21
    1862:	c9 a6       	std	Y+41, r12	; 0x29
    1864:	da a6       	std	Y+42, r13	; 0x2a
    1866:	eb a6       	std	Y+43, r14	; 0x2b
    1868:	fc a6       	std	Y+44, r15	; 0x2c
    186a:	82 01       	movw	r16, r4
    186c:	71 01       	movw	r14, r2
    186e:	67 96       	adiw	r28, 0x17	; 23
    1870:	0f ac       	ldd	r0, Y+63	; 0x3f
    1872:	67 97       	sbiw	r28, 0x17	; 23
    1874:	04 c0       	rjmp	.+8      	; 0x187e <__umoddi3+0x85c>
    1876:	ee 0c       	add	r14, r14
    1878:	ff 1c       	adc	r15, r15
    187a:	00 1f       	adc	r16, r16
    187c:	11 1f       	adc	r17, r17
    187e:	0a 94       	dec	r0
    1880:	d2 f7       	brpl	.-12     	; 0x1876 <__umoddi3+0x854>
    1882:	ed a2       	std	Y+37, r14	; 0x25
    1884:	fe a2       	std	Y+38, r15	; 0x26
    1886:	0f a3       	std	Y+39, r16	; 0x27
    1888:	18 a7       	std	Y+40, r17	; 0x28
    188a:	64 01       	movw	r12, r8
    188c:	53 01       	movw	r10, r6
    188e:	66 96       	adiw	r28, 0x16	; 22
    1890:	0f ac       	ldd	r0, Y+63	; 0x3f
    1892:	66 97       	sbiw	r28, 0x16	; 22
    1894:	04 c0       	rjmp	.+8      	; 0x189e <__umoddi3+0x87c>
    1896:	d6 94       	lsr	r13
    1898:	c7 94       	ror	r12
    189a:	b7 94       	ror	r11
    189c:	a7 94       	ror	r10
    189e:	0a 94       	dec	r0
    18a0:	d2 f7       	brpl	.-12     	; 0x1896 <__umoddi3+0x874>
    18a2:	a4 01       	movw	r20, r8
    18a4:	93 01       	movw	r18, r6
    18a6:	67 96       	adiw	r28, 0x17	; 23
    18a8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18aa:	67 97       	sbiw	r28, 0x17	; 23
    18ac:	04 c0       	rjmp	.+8      	; 0x18b6 <__umoddi3+0x894>
    18ae:	22 0f       	add	r18, r18
    18b0:	33 1f       	adc	r19, r19
    18b2:	44 1f       	adc	r20, r20
    18b4:	55 1f       	adc	r21, r21
    18b6:	0a 94       	dec	r0
    18b8:	d2 f7       	brpl	.-12     	; 0x18ae <__umoddi3+0x88c>
    18ba:	6c 96       	adiw	r28, 0x1c	; 28
    18bc:	8c ad       	ldd	r24, Y+60	; 0x3c
    18be:	9d ad       	ldd	r25, Y+61	; 0x3d
    18c0:	ae ad       	ldd	r26, Y+62	; 0x3e
    18c2:	bf ad       	ldd	r27, Y+63	; 0x3f
    18c4:	6c 97       	sbiw	r28, 0x1c	; 28
    18c6:	66 96       	adiw	r28, 0x16	; 22
    18c8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18ca:	66 97       	sbiw	r28, 0x16	; 22
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <__umoddi3+0x8b4>
    18ce:	b6 95       	lsr	r27
    18d0:	a7 95       	ror	r26
    18d2:	97 95       	ror	r25
    18d4:	87 95       	ror	r24
    18d6:	0a 94       	dec	r0
    18d8:	d2 f7       	brpl	.-12     	; 0x18ce <__umoddi3+0x8ac>
    18da:	3c 01       	movw	r6, r24
    18dc:	4d 01       	movw	r8, r26
    18de:	62 2a       	or	r6, r18
    18e0:	73 2a       	or	r7, r19
    18e2:	84 2a       	or	r8, r20
    18e4:	95 2a       	or	r9, r21
    18e6:	69 a2       	std	Y+33, r6	; 0x21
    18e8:	7a a2       	std	Y+34, r7	; 0x22
    18ea:	8b a2       	std	Y+35, r8	; 0x23
    18ec:	9c a2       	std	Y+36, r9	; 0x24
    18ee:	6c 96       	adiw	r28, 0x1c	; 28
    18f0:	ec ac       	ldd	r14, Y+60	; 0x3c
    18f2:	fd ac       	ldd	r15, Y+61	; 0x3d
    18f4:	0e ad       	ldd	r16, Y+62	; 0x3e
    18f6:	1f ad       	ldd	r17, Y+63	; 0x3f
    18f8:	6c 97       	sbiw	r28, 0x1c	; 28
    18fa:	67 96       	adiw	r28, 0x17	; 23
    18fc:	0f ac       	ldd	r0, Y+63	; 0x3f
    18fe:	67 97       	sbiw	r28, 0x17	; 23
    1900:	04 c0       	rjmp	.+8      	; 0x190a <__umoddi3+0x8e8>
    1902:	ee 0c       	add	r14, r14
    1904:	ff 1c       	adc	r15, r15
    1906:	00 1f       	adc	r16, r16
    1908:	11 1f       	adc	r17, r17
    190a:	0a 94       	dec	r0
    190c:	d2 f7       	brpl	.-12     	; 0x1902 <__umoddi3+0x8e0>
    190e:	ed 8e       	std	Y+29, r14	; 0x1d
    1910:	fe 8e       	std	Y+30, r15	; 0x1e
    1912:	0f 8f       	std	Y+31, r16	; 0x1f
    1914:	18 a3       	std	Y+32, r17	; 0x20
    1916:	49 a5       	ldd	r20, Y+41	; 0x29
    1918:	5a a5       	ldd	r21, Y+42	; 0x2a
    191a:	6b a5       	ldd	r22, Y+43	; 0x2b
    191c:	7c a5       	ldd	r23, Y+44	; 0x2c
    191e:	3b 01       	movw	r6, r22
    1920:	88 24       	eor	r8, r8
    1922:	99 24       	eor	r9, r9
    1924:	60 70       	andi	r22, 0x00	; 0
    1926:	70 70       	andi	r23, 0x00	; 0
    1928:	2d 96       	adiw	r28, 0x0d	; 13
    192a:	4c af       	std	Y+60, r20	; 0x3c
    192c:	5d af       	std	Y+61, r21	; 0x3d
    192e:	6e af       	std	Y+62, r22	; 0x3e
    1930:	7f af       	std	Y+63, r23	; 0x3f
    1932:	2d 97       	sbiw	r28, 0x0d	; 13
    1934:	c6 01       	movw	r24, r12
    1936:	b5 01       	movw	r22, r10
    1938:	a4 01       	movw	r20, r8
    193a:	93 01       	movw	r18, r6
    193c:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    1940:	7b 01       	movw	r14, r22
    1942:	8c 01       	movw	r16, r24
    1944:	c6 01       	movw	r24, r12
    1946:	b5 01       	movw	r22, r10
    1948:	a4 01       	movw	r20, r8
    194a:	93 01       	movw	r18, r6
    194c:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    1950:	c9 01       	movw	r24, r18
    1952:	da 01       	movw	r26, r20
    1954:	1c 01       	movw	r2, r24
    1956:	2d 01       	movw	r4, r26
    1958:	c2 01       	movw	r24, r4
    195a:	b1 01       	movw	r22, r2
    195c:	2d 96       	adiw	r28, 0x0d	; 13
    195e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1960:	3d ad       	ldd	r19, Y+61	; 0x3d
    1962:	4e ad       	ldd	r20, Y+62	; 0x3e
    1964:	5f ad       	ldd	r21, Y+63	; 0x3f
    1966:	2d 97       	sbiw	r28, 0x0d	; 13
    1968:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	87 01       	movw	r16, r14
    1972:	ff 24       	eor	r15, r15
    1974:	ee 24       	eor	r14, r14
    1976:	a9 a0       	ldd	r10, Y+33	; 0x21
    1978:	ba a0       	ldd	r11, Y+34	; 0x22
    197a:	cb a0       	ldd	r12, Y+35	; 0x23
    197c:	dc a0       	ldd	r13, Y+36	; 0x24
    197e:	c6 01       	movw	r24, r12
    1980:	aa 27       	eor	r26, r26
    1982:	bb 27       	eor	r27, r27
    1984:	57 01       	movw	r10, r14
    1986:	68 01       	movw	r12, r16
    1988:	a8 2a       	or	r10, r24
    198a:	b9 2a       	or	r11, r25
    198c:	ca 2a       	or	r12, r26
    198e:	db 2a       	or	r13, r27
    1990:	a2 16       	cp	r10, r18
    1992:	b3 06       	cpc	r11, r19
    1994:	c4 06       	cpc	r12, r20
    1996:	d5 06       	cpc	r13, r21
    1998:	00 f5       	brcc	.+64     	; 0x19da <__umoddi3+0x9b8>
    199a:	08 94       	sec
    199c:	21 08       	sbc	r2, r1
    199e:	31 08       	sbc	r3, r1
    19a0:	41 08       	sbc	r4, r1
    19a2:	51 08       	sbc	r5, r1
    19a4:	e9 a4       	ldd	r14, Y+41	; 0x29
    19a6:	fa a4       	ldd	r15, Y+42	; 0x2a
    19a8:	0b a5       	ldd	r16, Y+43	; 0x2b
    19aa:	1c a5       	ldd	r17, Y+44	; 0x2c
    19ac:	ae 0c       	add	r10, r14
    19ae:	bf 1c       	adc	r11, r15
    19b0:	c0 1e       	adc	r12, r16
    19b2:	d1 1e       	adc	r13, r17
    19b4:	ae 14       	cp	r10, r14
    19b6:	bf 04       	cpc	r11, r15
    19b8:	c0 06       	cpc	r12, r16
    19ba:	d1 06       	cpc	r13, r17
    19bc:	70 f0       	brcs	.+28     	; 0x19da <__umoddi3+0x9b8>
    19be:	a2 16       	cp	r10, r18
    19c0:	b3 06       	cpc	r11, r19
    19c2:	c4 06       	cpc	r12, r20
    19c4:	d5 06       	cpc	r13, r21
    19c6:	48 f4       	brcc	.+18     	; 0x19da <__umoddi3+0x9b8>
    19c8:	08 94       	sec
    19ca:	21 08       	sbc	r2, r1
    19cc:	31 08       	sbc	r3, r1
    19ce:	41 08       	sbc	r4, r1
    19d0:	51 08       	sbc	r5, r1
    19d2:	ae 0c       	add	r10, r14
    19d4:	bf 1c       	adc	r11, r15
    19d6:	c0 1e       	adc	r12, r16
    19d8:	d1 1e       	adc	r13, r17
    19da:	a2 1a       	sub	r10, r18
    19dc:	b3 0a       	sbc	r11, r19
    19de:	c4 0a       	sbc	r12, r20
    19e0:	d5 0a       	sbc	r13, r21
    19e2:	c6 01       	movw	r24, r12
    19e4:	b5 01       	movw	r22, r10
    19e6:	a4 01       	movw	r20, r8
    19e8:	93 01       	movw	r18, r6
    19ea:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    19ee:	7b 01       	movw	r14, r22
    19f0:	8c 01       	movw	r16, r24
    19f2:	c6 01       	movw	r24, r12
    19f4:	b5 01       	movw	r22, r10
    19f6:	a4 01       	movw	r20, r8
    19f8:	93 01       	movw	r18, r6
    19fa:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodsi4>
    19fe:	c9 01       	movw	r24, r18
    1a00:	da 01       	movw	r26, r20
    1a02:	3c 01       	movw	r6, r24
    1a04:	4d 01       	movw	r8, r26
    1a06:	c4 01       	movw	r24, r8
    1a08:	b3 01       	movw	r22, r6
    1a0a:	2d 96       	adiw	r28, 0x0d	; 13
    1a0c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a0e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a10:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a12:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a14:	2d 97       	sbiw	r28, 0x0d	; 13
    1a16:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	87 01       	movw	r16, r14
    1a20:	ff 24       	eor	r15, r15
    1a22:	ee 24       	eor	r14, r14
    1a24:	89 a1       	ldd	r24, Y+33	; 0x21
    1a26:	9a a1       	ldd	r25, Y+34	; 0x22
    1a28:	ab a1       	ldd	r26, Y+35	; 0x23
    1a2a:	bc a1       	ldd	r27, Y+36	; 0x24
    1a2c:	a0 70       	andi	r26, 0x00	; 0
    1a2e:	b0 70       	andi	r27, 0x00	; 0
    1a30:	57 01       	movw	r10, r14
    1a32:	68 01       	movw	r12, r16
    1a34:	a8 2a       	or	r10, r24
    1a36:	b9 2a       	or	r11, r25
    1a38:	ca 2a       	or	r12, r26
    1a3a:	db 2a       	or	r13, r27
    1a3c:	a2 16       	cp	r10, r18
    1a3e:	b3 06       	cpc	r11, r19
    1a40:	c4 06       	cpc	r12, r20
    1a42:	d5 06       	cpc	r13, r21
    1a44:	00 f5       	brcc	.+64     	; 0x1a86 <__umoddi3+0xa64>
    1a46:	08 94       	sec
    1a48:	61 08       	sbc	r6, r1
    1a4a:	71 08       	sbc	r7, r1
    1a4c:	81 08       	sbc	r8, r1
    1a4e:	91 08       	sbc	r9, r1
    1a50:	69 a5       	ldd	r22, Y+41	; 0x29
    1a52:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	a6 0e       	add	r10, r22
    1a5a:	b7 1e       	adc	r11, r23
    1a5c:	c8 1e       	adc	r12, r24
    1a5e:	d9 1e       	adc	r13, r25
    1a60:	a6 16       	cp	r10, r22
    1a62:	b7 06       	cpc	r11, r23
    1a64:	c8 06       	cpc	r12, r24
    1a66:	d9 06       	cpc	r13, r25
    1a68:	70 f0       	brcs	.+28     	; 0x1a86 <__umoddi3+0xa64>
    1a6a:	a2 16       	cp	r10, r18
    1a6c:	b3 06       	cpc	r11, r19
    1a6e:	c4 06       	cpc	r12, r20
    1a70:	d5 06       	cpc	r13, r21
    1a72:	48 f4       	brcc	.+18     	; 0x1a86 <__umoddi3+0xa64>
    1a74:	08 94       	sec
    1a76:	61 08       	sbc	r6, r1
    1a78:	71 08       	sbc	r7, r1
    1a7a:	81 08       	sbc	r8, r1
    1a7c:	91 08       	sbc	r9, r1
    1a7e:	a6 0e       	add	r10, r22
    1a80:	b7 1e       	adc	r11, r23
    1a82:	c8 1e       	adc	r12, r24
    1a84:	d9 1e       	adc	r13, r25
    1a86:	d6 01       	movw	r26, r12
    1a88:	c5 01       	movw	r24, r10
    1a8a:	82 1b       	sub	r24, r18
    1a8c:	93 0b       	sbc	r25, r19
    1a8e:	a4 0b       	sbc	r26, r20
    1a90:	b5 0b       	sbc	r27, r21
    1a92:	89 8f       	std	Y+25, r24	; 0x19
    1a94:	9a 8f       	std	Y+26, r25	; 0x1a
    1a96:	ab 8f       	std	Y+27, r26	; 0x1b
    1a98:	bc 8f       	std	Y+28, r27	; 0x1c
    1a9a:	d1 01       	movw	r26, r2
    1a9c:	99 27       	eor	r25, r25
    1a9e:	88 27       	eor	r24, r24
    1aa0:	84 01       	movw	r16, r8
    1aa2:	73 01       	movw	r14, r6
    1aa4:	e8 2a       	or	r14, r24
    1aa6:	f9 2a       	or	r15, r25
    1aa8:	0a 2b       	or	r16, r26
    1aaa:	1b 2b       	or	r17, r27
    1aac:	4f ef       	ldi	r20, 0xFF	; 255
    1aae:	a4 2e       	mov	r10, r20
    1ab0:	4f ef       	ldi	r20, 0xFF	; 255
    1ab2:	b4 2e       	mov	r11, r20
    1ab4:	c1 2c       	mov	r12, r1
    1ab6:	d1 2c       	mov	r13, r1
    1ab8:	ae 20       	and	r10, r14
    1aba:	bf 20       	and	r11, r15
    1abc:	c0 22       	and	r12, r16
    1abe:	d1 22       	and	r13, r17
    1ac0:	78 01       	movw	r14, r16
    1ac2:	00 27       	eor	r16, r16
    1ac4:	11 27       	eor	r17, r17
    1ac6:	6d a0       	ldd	r6, Y+37	; 0x25
    1ac8:	7e a0       	ldd	r7, Y+38	; 0x26
    1aca:	8f a0       	ldd	r8, Y+39	; 0x27
    1acc:	98 a4       	ldd	r9, Y+40	; 0x28
    1ace:	4f ef       	ldi	r20, 0xFF	; 255
    1ad0:	5f ef       	ldi	r21, 0xFF	; 255
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	64 22       	and	r6, r20
    1ad8:	75 22       	and	r7, r21
    1ada:	86 22       	and	r8, r22
    1adc:	97 22       	and	r9, r23
    1ade:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae2:	af a1       	ldd	r26, Y+39	; 0x27
    1ae4:	b8 a5       	ldd	r27, Y+40	; 0x28
    1ae6:	bd 01       	movw	r22, r26
    1ae8:	88 27       	eor	r24, r24
    1aea:	99 27       	eor	r25, r25
    1aec:	65 96       	adiw	r28, 0x15	; 21
    1aee:	6c af       	std	Y+60, r22	; 0x3c
    1af0:	7d af       	std	Y+61, r23	; 0x3d
    1af2:	8e af       	std	Y+62, r24	; 0x3e
    1af4:	9f af       	std	Y+63, r25	; 0x3f
    1af6:	65 97       	sbiw	r28, 0x15	; 21
    1af8:	c6 01       	movw	r24, r12
    1afa:	b5 01       	movw	r22, r10
    1afc:	a4 01       	movw	r20, r8
    1afe:	93 01       	movw	r18, r6
    1b00:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    1b04:	61 96       	adiw	r28, 0x11	; 17
    1b06:	6c af       	std	Y+60, r22	; 0x3c
    1b08:	7d af       	std	Y+61, r23	; 0x3d
    1b0a:	8e af       	std	Y+62, r24	; 0x3e
    1b0c:	9f af       	std	Y+63, r25	; 0x3f
    1b0e:	61 97       	sbiw	r28, 0x11	; 17
    1b10:	c6 01       	movw	r24, r12
    1b12:	b5 01       	movw	r22, r10
    1b14:	65 96       	adiw	r28, 0x15	; 21
    1b16:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b18:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b1a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b1c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b1e:	65 97       	sbiw	r28, 0x15	; 21
    1b20:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    1b24:	1b 01       	movw	r2, r22
    1b26:	2c 01       	movw	r4, r24
    1b28:	c8 01       	movw	r24, r16
    1b2a:	b7 01       	movw	r22, r14
    1b2c:	a4 01       	movw	r20, r8
    1b2e:	93 01       	movw	r18, r6
    1b30:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    1b34:	5b 01       	movw	r10, r22
    1b36:	6c 01       	movw	r12, r24
    1b38:	c8 01       	movw	r24, r16
    1b3a:	b7 01       	movw	r22, r14
    1b3c:	65 96       	adiw	r28, 0x15	; 21
    1b3e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b40:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b42:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b44:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b46:	65 97       	sbiw	r28, 0x15	; 21
    1b48:	0e 94 21 37 	call	0x6e42	; 0x6e42 <__mulsi3>
    1b4c:	7b 01       	movw	r14, r22
    1b4e:	8c 01       	movw	r16, r24
    1b50:	a6 01       	movw	r20, r12
    1b52:	95 01       	movw	r18, r10
    1b54:	22 0d       	add	r18, r2
    1b56:	33 1d       	adc	r19, r3
    1b58:	44 1d       	adc	r20, r4
    1b5a:	55 1d       	adc	r21, r5
    1b5c:	61 96       	adiw	r28, 0x11	; 17
    1b5e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b60:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b62:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b64:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b66:	61 97       	sbiw	r28, 0x11	; 17
    1b68:	c4 01       	movw	r24, r8
    1b6a:	aa 27       	eor	r26, r26
    1b6c:	bb 27       	eor	r27, r27
    1b6e:	28 0f       	add	r18, r24
    1b70:	39 1f       	adc	r19, r25
    1b72:	4a 1f       	adc	r20, r26
    1b74:	5b 1f       	adc	r21, r27
    1b76:	2a 15       	cp	r18, r10
    1b78:	3b 05       	cpc	r19, r11
    1b7a:	4c 05       	cpc	r20, r12
    1b7c:	5d 05       	cpc	r21, r13
    1b7e:	48 f4       	brcc	.+18     	; 0x1b92 <__umoddi3+0xb70>
    1b80:	81 2c       	mov	r8, r1
    1b82:	91 2c       	mov	r9, r1
    1b84:	e1 e0       	ldi	r30, 0x01	; 1
    1b86:	ae 2e       	mov	r10, r30
    1b88:	b1 2c       	mov	r11, r1
    1b8a:	e8 0c       	add	r14, r8
    1b8c:	f9 1c       	adc	r15, r9
    1b8e:	0a 1d       	adc	r16, r10
    1b90:	1b 1d       	adc	r17, r11
    1b92:	ca 01       	movw	r24, r20
    1b94:	aa 27       	eor	r26, r26
    1b96:	bb 27       	eor	r27, r27
    1b98:	57 01       	movw	r10, r14
    1b9a:	68 01       	movw	r12, r16
    1b9c:	a8 0e       	add	r10, r24
    1b9e:	b9 1e       	adc	r11, r25
    1ba0:	ca 1e       	adc	r12, r26
    1ba2:	db 1e       	adc	r13, r27
    1ba4:	a9 01       	movw	r20, r18
    1ba6:	33 27       	eor	r19, r19
    1ba8:	22 27       	eor	r18, r18
    1baa:	61 96       	adiw	r28, 0x11	; 17
    1bac:	8c ad       	ldd	r24, Y+60	; 0x3c
    1bae:	9d ad       	ldd	r25, Y+61	; 0x3d
    1bb0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bb2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bb4:	61 97       	sbiw	r28, 0x11	; 17
    1bb6:	a0 70       	andi	r26, 0x00	; 0
    1bb8:	b0 70       	andi	r27, 0x00	; 0
    1bba:	28 0f       	add	r18, r24
    1bbc:	39 1f       	adc	r19, r25
    1bbe:	4a 1f       	adc	r20, r26
    1bc0:	5b 1f       	adc	r21, r27
    1bc2:	e9 8c       	ldd	r14, Y+25	; 0x19
    1bc4:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1bc6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1bc8:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1bca:	ea 14       	cp	r14, r10
    1bcc:	fb 04       	cpc	r15, r11
    1bce:	0c 05       	cpc	r16, r12
    1bd0:	1d 05       	cpc	r17, r13
    1bd2:	70 f0       	brcs	.+28     	; 0x1bf0 <__umoddi3+0xbce>
    1bd4:	ae 14       	cp	r10, r14
    1bd6:	bf 04       	cpc	r11, r15
    1bd8:	c0 06       	cpc	r12, r16
    1bda:	d1 06       	cpc	r13, r17
    1bdc:	69 f5       	brne	.+90     	; 0x1c38 <__umoddi3+0xc16>
    1bde:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1be0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1be2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1be4:	98 a1       	ldd	r25, Y+32	; 0x20
    1be6:	62 17       	cp	r22, r18
    1be8:	73 07       	cpc	r23, r19
    1bea:	84 07       	cpc	r24, r20
    1bec:	95 07       	cpc	r25, r21
    1bee:	20 f5       	brcc	.+72     	; 0x1c38 <__umoddi3+0xc16>
    1bf0:	da 01       	movw	r26, r20
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	6d a0       	ldd	r6, Y+37	; 0x25
    1bf6:	7e a0       	ldd	r7, Y+38	; 0x26
    1bf8:	8f a0       	ldd	r8, Y+39	; 0x27
    1bfa:	98 a4       	ldd	r9, Y+40	; 0x28
    1bfc:	86 19       	sub	r24, r6
    1bfe:	97 09       	sbc	r25, r7
    1c00:	a8 09       	sbc	r26, r8
    1c02:	b9 09       	sbc	r27, r9
    1c04:	e9 a4       	ldd	r14, Y+41	; 0x29
    1c06:	fa a4       	ldd	r15, Y+42	; 0x2a
    1c08:	0b a5       	ldd	r16, Y+43	; 0x2b
    1c0a:	1c a5       	ldd	r17, Y+44	; 0x2c
    1c0c:	ae 18       	sub	r10, r14
    1c0e:	bf 08       	sbc	r11, r15
    1c10:	c0 0a       	sbc	r12, r16
    1c12:	d1 0a       	sbc	r13, r17
    1c14:	ee 24       	eor	r14, r14
    1c16:	ff 24       	eor	r15, r15
    1c18:	87 01       	movw	r16, r14
    1c1a:	28 17       	cp	r18, r24
    1c1c:	39 07       	cpc	r19, r25
    1c1e:	4a 07       	cpc	r20, r26
    1c20:	5b 07       	cpc	r21, r27
    1c22:	28 f4       	brcc	.+10     	; 0x1c2e <__umoddi3+0xc0c>
    1c24:	21 e0       	ldi	r18, 0x01	; 1
    1c26:	e2 2e       	mov	r14, r18
    1c28:	f1 2c       	mov	r15, r1
    1c2a:	01 2d       	mov	r16, r1
    1c2c:	11 2d       	mov	r17, r1
    1c2e:	ae 18       	sub	r10, r14
    1c30:	bf 08       	sbc	r11, r15
    1c32:	c0 0a       	sbc	r12, r16
    1c34:	d1 0a       	sbc	r13, r17
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <__umoddi3+0xc1a>
    1c38:	da 01       	movw	r26, r20
    1c3a:	c9 01       	movw	r24, r18
    1c3c:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1c3e:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1c40:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1c42:	98 a0       	ldd	r9, Y+32	; 0x20
    1c44:	68 1a       	sub	r6, r24
    1c46:	79 0a       	sbc	r7, r25
    1c48:	8a 0a       	sbc	r8, r26
    1c4a:	9b 0a       	sbc	r9, r27
    1c4c:	49 8d       	ldd	r20, Y+25	; 0x19
    1c4e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1c50:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1c52:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1c54:	4a 19       	sub	r20, r10
    1c56:	5b 09       	sbc	r21, r11
    1c58:	6c 09       	sbc	r22, r12
    1c5a:	7d 09       	sbc	r23, r13
    1c5c:	5a 01       	movw	r10, r20
    1c5e:	6b 01       	movw	r12, r22
    1c60:	22 24       	eor	r2, r2
    1c62:	33 24       	eor	r3, r3
    1c64:	21 01       	movw	r4, r2
    1c66:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c68:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c6e:	66 15       	cp	r22, r6
    1c70:	77 05       	cpc	r23, r7
    1c72:	88 05       	cpc	r24, r8
    1c74:	99 05       	cpc	r25, r9
    1c76:	28 f4       	brcc	.+10     	; 0x1c82 <__umoddi3+0xc60>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	28 2e       	mov	r2, r24
    1c7c:	31 2c       	mov	r3, r1
    1c7e:	41 2c       	mov	r4, r1
    1c80:	51 2c       	mov	r5, r1
    1c82:	86 01       	movw	r16, r12
    1c84:	75 01       	movw	r14, r10
    1c86:	e2 18       	sub	r14, r2
    1c88:	f3 08       	sbc	r15, r3
    1c8a:	04 09       	sbc	r16, r4
    1c8c:	15 09       	sbc	r17, r5
    1c8e:	a8 01       	movw	r20, r16
    1c90:	97 01       	movw	r18, r14
    1c92:	66 96       	adiw	r28, 0x16	; 22
    1c94:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c96:	66 97       	sbiw	r28, 0x16	; 22
    1c98:	04 c0       	rjmp	.+8      	; 0x1ca2 <__umoddi3+0xc80>
    1c9a:	22 0f       	add	r18, r18
    1c9c:	33 1f       	adc	r19, r19
    1c9e:	44 1f       	adc	r20, r20
    1ca0:	55 1f       	adc	r21, r21
    1ca2:	0a 94       	dec	r0
    1ca4:	d2 f7       	brpl	.-12     	; 0x1c9a <__umoddi3+0xc78>
    1ca6:	d4 01       	movw	r26, r8
    1ca8:	c3 01       	movw	r24, r6
    1caa:	67 96       	adiw	r28, 0x17	; 23
    1cac:	0f ac       	ldd	r0, Y+63	; 0x3f
    1cae:	67 97       	sbiw	r28, 0x17	; 23
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <__umoddi3+0xc98>
    1cb2:	b6 95       	lsr	r27
    1cb4:	a7 95       	ror	r26
    1cb6:	97 95       	ror	r25
    1cb8:	87 95       	ror	r24
    1cba:	0a 94       	dec	r0
    1cbc:	d2 f7       	brpl	.-12     	; 0x1cb2 <__umoddi3+0xc90>
    1cbe:	28 2b       	or	r18, r24
    1cc0:	39 2b       	or	r19, r25
    1cc2:	4a 2b       	or	r20, r26
    1cc4:	5b 2b       	or	r21, r27
    1cc6:	29 8b       	std	Y+17, r18	; 0x11
    1cc8:	3a 8b       	std	Y+18, r19	; 0x12
    1cca:	4b 8b       	std	Y+19, r20	; 0x13
    1ccc:	5c 8b       	std	Y+20, r21	; 0x14
    1cce:	67 96       	adiw	r28, 0x17	; 23
    1cd0:	0f ac       	ldd	r0, Y+63	; 0x3f
    1cd2:	67 97       	sbiw	r28, 0x17	; 23
    1cd4:	04 c0       	rjmp	.+8      	; 0x1cde <__umoddi3+0xcbc>
    1cd6:	16 95       	lsr	r17
    1cd8:	07 95       	ror	r16
    1cda:	f7 94       	ror	r15
    1cdc:	e7 94       	ror	r14
    1cde:	0a 94       	dec	r0
    1ce0:	d2 f7       	brpl	.-12     	; 0x1cd6 <__umoddi3+0xcb4>
    1ce2:	ed 8a       	std	Y+21, r14	; 0x15
    1ce4:	fe 8a       	std	Y+22, r15	; 0x16
    1ce6:	0f 8b       	std	Y+23, r16	; 0x17
    1ce8:	18 8f       	std	Y+24, r17	; 0x18
    1cea:	3a 89       	ldd	r19, Y+18	; 0x12
    1cec:	4b 89       	ldd	r20, Y+19	; 0x13
    1cee:	5c 89       	ldd	r21, Y+20	; 0x14
    1cf0:	6e 2d       	mov	r22, r14
    1cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf8:	c5 5a       	subi	r28, 0xA5	; 165
    1cfa:	df 4f       	sbci	r29, 0xFF	; 255
    1cfc:	e2 e1       	ldi	r30, 0x12	; 18
    1cfe:	0c 94 7e 37 	jmp	0x6efc	; 0x6efc <__epilogue_restores__>

00001d02 <_fpadd_parts>:
    1d02:	a0 e0       	ldi	r26, 0x00	; 0
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e7 e8       	ldi	r30, 0x87	; 135
    1d08:	fe e0       	ldi	r31, 0x0E	; 14
    1d0a:	0c 94 62 37 	jmp	0x6ec4	; 0x6ec4 <__prologue_saves__>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	2b 01       	movw	r4, r22
    1d12:	fa 01       	movw	r30, r20
    1d14:	9c 91       	ld	r25, X
    1d16:	92 30       	cpi	r25, 0x02	; 2
    1d18:	08 f4       	brcc	.+2      	; 0x1d1c <_fpadd_parts+0x1a>
    1d1a:	39 c1       	rjmp	.+626    	; 0x1f8e <_fpadd_parts+0x28c>
    1d1c:	eb 01       	movw	r28, r22
    1d1e:	88 81       	ld	r24, Y
    1d20:	82 30       	cpi	r24, 0x02	; 2
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <_fpadd_parts+0x24>
    1d24:	33 c1       	rjmp	.+614    	; 0x1f8c <_fpadd_parts+0x28a>
    1d26:	94 30       	cpi	r25, 0x04	; 4
    1d28:	69 f4       	brne	.+26     	; 0x1d44 <_fpadd_parts+0x42>
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <_fpadd_parts+0x2e>
    1d2e:	2f c1       	rjmp	.+606    	; 0x1f8e <_fpadd_parts+0x28c>
    1d30:	11 96       	adiw	r26, 0x01	; 1
    1d32:	9c 91       	ld	r25, X
    1d34:	11 97       	sbiw	r26, 0x01	; 1
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	98 17       	cp	r25, r24
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <_fpadd_parts+0x3c>
    1d3c:	28 c1       	rjmp	.+592    	; 0x1f8e <_fpadd_parts+0x28c>
    1d3e:	ac e9       	ldi	r26, 0x9C	; 156
    1d40:	b1 e0       	ldi	r27, 0x01	; 1
    1d42:	25 c1       	rjmp	.+586    	; 0x1f8e <_fpadd_parts+0x28c>
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <_fpadd_parts+0x48>
    1d48:	21 c1       	rjmp	.+578    	; 0x1f8c <_fpadd_parts+0x28a>
    1d4a:	82 30       	cpi	r24, 0x02	; 2
    1d4c:	a9 f4       	brne	.+42     	; 0x1d78 <_fpadd_parts+0x76>
    1d4e:	92 30       	cpi	r25, 0x02	; 2
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <_fpadd_parts+0x52>
    1d52:	1d c1       	rjmp	.+570    	; 0x1f8e <_fpadd_parts+0x28c>
    1d54:	9a 01       	movw	r18, r20
    1d56:	ad 01       	movw	r20, r26
    1d58:	88 e0       	ldi	r24, 0x08	; 8
    1d5a:	ea 01       	movw	r28, r20
    1d5c:	09 90       	ld	r0, Y+
    1d5e:	ae 01       	movw	r20, r28
    1d60:	e9 01       	movw	r28, r18
    1d62:	09 92       	st	Y+, r0
    1d64:	9e 01       	movw	r18, r28
    1d66:	81 50       	subi	r24, 0x01	; 1
    1d68:	c1 f7       	brne	.-16     	; 0x1d5a <_fpadd_parts+0x58>
    1d6a:	e2 01       	movw	r28, r4
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	9c 91       	ld	r25, X
    1d72:	89 23       	and	r24, r25
    1d74:	81 83       	std	Z+1, r24	; 0x01
    1d76:	08 c1       	rjmp	.+528    	; 0x1f88 <_fpadd_parts+0x286>
    1d78:	92 30       	cpi	r25, 0x02	; 2
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <_fpadd_parts+0x7c>
    1d7c:	07 c1       	rjmp	.+526    	; 0x1f8c <_fpadd_parts+0x28a>
    1d7e:	12 96       	adiw	r26, 0x02	; 2
    1d80:	2d 90       	ld	r2, X+
    1d82:	3c 90       	ld	r3, X
    1d84:	13 97       	sbiw	r26, 0x03	; 3
    1d86:	eb 01       	movw	r28, r22
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	14 96       	adiw	r26, 0x04	; 4
    1d8e:	ad 90       	ld	r10, X+
    1d90:	bd 90       	ld	r11, X+
    1d92:	cd 90       	ld	r12, X+
    1d94:	dc 90       	ld	r13, X
    1d96:	17 97       	sbiw	r26, 0x07	; 7
    1d98:	ec 80       	ldd	r14, Y+4	; 0x04
    1d9a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d9c:	0e 81       	ldd	r16, Y+6	; 0x06
    1d9e:	1f 81       	ldd	r17, Y+7	; 0x07
    1da0:	91 01       	movw	r18, r2
    1da2:	28 1b       	sub	r18, r24
    1da4:	39 0b       	sbc	r19, r25
    1da6:	b9 01       	movw	r22, r18
    1da8:	37 ff       	sbrs	r19, 7
    1daa:	04 c0       	rjmp	.+8      	; 0x1db4 <_fpadd_parts+0xb2>
    1dac:	66 27       	eor	r22, r22
    1dae:	77 27       	eor	r23, r23
    1db0:	62 1b       	sub	r22, r18
    1db2:	73 0b       	sbc	r23, r19
    1db4:	60 32       	cpi	r22, 0x20	; 32
    1db6:	71 05       	cpc	r23, r1
    1db8:	0c f0       	brlt	.+2      	; 0x1dbc <_fpadd_parts+0xba>
    1dba:	61 c0       	rjmp	.+194    	; 0x1e7e <_fpadd_parts+0x17c>
    1dbc:	12 16       	cp	r1, r18
    1dbe:	13 06       	cpc	r1, r19
    1dc0:	6c f5       	brge	.+90     	; 0x1e1c <_fpadd_parts+0x11a>
    1dc2:	37 01       	movw	r6, r14
    1dc4:	48 01       	movw	r8, r16
    1dc6:	06 2e       	mov	r0, r22
    1dc8:	04 c0       	rjmp	.+8      	; 0x1dd2 <_fpadd_parts+0xd0>
    1dca:	96 94       	lsr	r9
    1dcc:	87 94       	ror	r8
    1dce:	77 94       	ror	r7
    1dd0:	67 94       	ror	r6
    1dd2:	0a 94       	dec	r0
    1dd4:	d2 f7       	brpl	.-12     	; 0x1dca <_fpadd_parts+0xc8>
    1dd6:	21 e0       	ldi	r18, 0x01	; 1
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <_fpadd_parts+0xe6>
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	44 1f       	adc	r20, r20
    1de6:	55 1f       	adc	r21, r21
    1de8:	6a 95       	dec	r22
    1dea:	d2 f7       	brpl	.-12     	; 0x1de0 <_fpadd_parts+0xde>
    1dec:	21 50       	subi	r18, 0x01	; 1
    1dee:	30 40       	sbci	r19, 0x00	; 0
    1df0:	40 40       	sbci	r20, 0x00	; 0
    1df2:	50 40       	sbci	r21, 0x00	; 0
    1df4:	2e 21       	and	r18, r14
    1df6:	3f 21       	and	r19, r15
    1df8:	40 23       	and	r20, r16
    1dfa:	51 23       	and	r21, r17
    1dfc:	21 15       	cp	r18, r1
    1dfe:	31 05       	cpc	r19, r1
    1e00:	41 05       	cpc	r20, r1
    1e02:	51 05       	cpc	r21, r1
    1e04:	21 f0       	breq	.+8      	; 0x1e0e <_fpadd_parts+0x10c>
    1e06:	21 e0       	ldi	r18, 0x01	; 1
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	79 01       	movw	r14, r18
    1e10:	8a 01       	movw	r16, r20
    1e12:	e6 28       	or	r14, r6
    1e14:	f7 28       	or	r15, r7
    1e16:	08 29       	or	r16, r8
    1e18:	19 29       	or	r17, r9
    1e1a:	3c c0       	rjmp	.+120    	; 0x1e94 <_fpadd_parts+0x192>
    1e1c:	23 2b       	or	r18, r19
    1e1e:	d1 f1       	breq	.+116    	; 0x1e94 <_fpadd_parts+0x192>
    1e20:	26 0e       	add	r2, r22
    1e22:	37 1e       	adc	r3, r23
    1e24:	35 01       	movw	r6, r10
    1e26:	46 01       	movw	r8, r12
    1e28:	06 2e       	mov	r0, r22
    1e2a:	04 c0       	rjmp	.+8      	; 0x1e34 <_fpadd_parts+0x132>
    1e2c:	96 94       	lsr	r9
    1e2e:	87 94       	ror	r8
    1e30:	77 94       	ror	r7
    1e32:	67 94       	ror	r6
    1e34:	0a 94       	dec	r0
    1e36:	d2 f7       	brpl	.-12     	; 0x1e2c <_fpadd_parts+0x12a>
    1e38:	21 e0       	ldi	r18, 0x01	; 1
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <_fpadd_parts+0x148>
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	44 1f       	adc	r20, r20
    1e48:	55 1f       	adc	r21, r21
    1e4a:	6a 95       	dec	r22
    1e4c:	d2 f7       	brpl	.-12     	; 0x1e42 <_fpadd_parts+0x140>
    1e4e:	21 50       	subi	r18, 0x01	; 1
    1e50:	30 40       	sbci	r19, 0x00	; 0
    1e52:	40 40       	sbci	r20, 0x00	; 0
    1e54:	50 40       	sbci	r21, 0x00	; 0
    1e56:	2a 21       	and	r18, r10
    1e58:	3b 21       	and	r19, r11
    1e5a:	4c 21       	and	r20, r12
    1e5c:	5d 21       	and	r21, r13
    1e5e:	21 15       	cp	r18, r1
    1e60:	31 05       	cpc	r19, r1
    1e62:	41 05       	cpc	r20, r1
    1e64:	51 05       	cpc	r21, r1
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <_fpadd_parts+0x16e>
    1e68:	21 e0       	ldi	r18, 0x01	; 1
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	59 01       	movw	r10, r18
    1e72:	6a 01       	movw	r12, r20
    1e74:	a6 28       	or	r10, r6
    1e76:	b7 28       	or	r11, r7
    1e78:	c8 28       	or	r12, r8
    1e7a:	d9 28       	or	r13, r9
    1e7c:	0b c0       	rjmp	.+22     	; 0x1e94 <_fpadd_parts+0x192>
    1e7e:	82 15       	cp	r24, r2
    1e80:	93 05       	cpc	r25, r3
    1e82:	2c f0       	brlt	.+10     	; 0x1e8e <_fpadd_parts+0x18c>
    1e84:	1c 01       	movw	r2, r24
    1e86:	aa 24       	eor	r10, r10
    1e88:	bb 24       	eor	r11, r11
    1e8a:	65 01       	movw	r12, r10
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <_fpadd_parts+0x192>
    1e8e:	ee 24       	eor	r14, r14
    1e90:	ff 24       	eor	r15, r15
    1e92:	87 01       	movw	r16, r14
    1e94:	11 96       	adiw	r26, 0x01	; 1
    1e96:	9c 91       	ld	r25, X
    1e98:	d2 01       	movw	r26, r4
    1e9a:	11 96       	adiw	r26, 0x01	; 1
    1e9c:	8c 91       	ld	r24, X
    1e9e:	98 17       	cp	r25, r24
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <_fpadd_parts+0x1a2>
    1ea2:	45 c0       	rjmp	.+138    	; 0x1f2e <_fpadd_parts+0x22c>
    1ea4:	99 23       	and	r25, r25
    1ea6:	39 f0       	breq	.+14     	; 0x1eb6 <_fpadd_parts+0x1b4>
    1ea8:	a8 01       	movw	r20, r16
    1eaa:	97 01       	movw	r18, r14
    1eac:	2a 19       	sub	r18, r10
    1eae:	3b 09       	sbc	r19, r11
    1eb0:	4c 09       	sbc	r20, r12
    1eb2:	5d 09       	sbc	r21, r13
    1eb4:	06 c0       	rjmp	.+12     	; 0x1ec2 <_fpadd_parts+0x1c0>
    1eb6:	a6 01       	movw	r20, r12
    1eb8:	95 01       	movw	r18, r10
    1eba:	2e 19       	sub	r18, r14
    1ebc:	3f 09       	sbc	r19, r15
    1ebe:	40 0b       	sbc	r20, r16
    1ec0:	51 0b       	sbc	r21, r17
    1ec2:	57 fd       	sbrc	r21, 7
    1ec4:	08 c0       	rjmp	.+16     	; 0x1ed6 <_fpadd_parts+0x1d4>
    1ec6:	11 82       	std	Z+1, r1	; 0x01
    1ec8:	33 82       	std	Z+3, r3	; 0x03
    1eca:	22 82       	std	Z+2, r2	; 0x02
    1ecc:	24 83       	std	Z+4, r18	; 0x04
    1ece:	35 83       	std	Z+5, r19	; 0x05
    1ed0:	46 83       	std	Z+6, r20	; 0x06
    1ed2:	57 83       	std	Z+7, r21	; 0x07
    1ed4:	1d c0       	rjmp	.+58     	; 0x1f10 <_fpadd_parts+0x20e>
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	81 83       	std	Z+1, r24	; 0x01
    1eda:	33 82       	std	Z+3, r3	; 0x03
    1edc:	22 82       	std	Z+2, r2	; 0x02
    1ede:	88 27       	eor	r24, r24
    1ee0:	99 27       	eor	r25, r25
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	82 1b       	sub	r24, r18
    1ee6:	93 0b       	sbc	r25, r19
    1ee8:	a4 0b       	sbc	r26, r20
    1eea:	b5 0b       	sbc	r27, r21
    1eec:	84 83       	std	Z+4, r24	; 0x04
    1eee:	95 83       	std	Z+5, r25	; 0x05
    1ef0:	a6 83       	std	Z+6, r26	; 0x06
    1ef2:	b7 83       	std	Z+7, r27	; 0x07
    1ef4:	0d c0       	rjmp	.+26     	; 0x1f10 <_fpadd_parts+0x20e>
    1ef6:	22 0f       	add	r18, r18
    1ef8:	33 1f       	adc	r19, r19
    1efa:	44 1f       	adc	r20, r20
    1efc:	55 1f       	adc	r21, r21
    1efe:	24 83       	std	Z+4, r18	; 0x04
    1f00:	35 83       	std	Z+5, r19	; 0x05
    1f02:	46 83       	std	Z+6, r20	; 0x06
    1f04:	57 83       	std	Z+7, r21	; 0x07
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	93 83       	std	Z+3, r25	; 0x03
    1f0e:	82 83       	std	Z+2, r24	; 0x02
    1f10:	24 81       	ldd	r18, Z+4	; 0x04
    1f12:	35 81       	ldd	r19, Z+5	; 0x05
    1f14:	46 81       	ldd	r20, Z+6	; 0x06
    1f16:	57 81       	ldd	r21, Z+7	; 0x07
    1f18:	da 01       	movw	r26, r20
    1f1a:	c9 01       	movw	r24, r18
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	a1 09       	sbc	r26, r1
    1f20:	b1 09       	sbc	r27, r1
    1f22:	8f 5f       	subi	r24, 0xFF	; 255
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	af 4f       	sbci	r26, 0xFF	; 255
    1f28:	bf 43       	sbci	r27, 0x3F	; 63
    1f2a:	28 f3       	brcs	.-54     	; 0x1ef6 <_fpadd_parts+0x1f4>
    1f2c:	0b c0       	rjmp	.+22     	; 0x1f44 <_fpadd_parts+0x242>
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	33 82       	std	Z+3, r3	; 0x03
    1f32:	22 82       	std	Z+2, r2	; 0x02
    1f34:	ea 0c       	add	r14, r10
    1f36:	fb 1c       	adc	r15, r11
    1f38:	0c 1d       	adc	r16, r12
    1f3a:	1d 1d       	adc	r17, r13
    1f3c:	e4 82       	std	Z+4, r14	; 0x04
    1f3e:	f5 82       	std	Z+5, r15	; 0x05
    1f40:	06 83       	std	Z+6, r16	; 0x06
    1f42:	17 83       	std	Z+7, r17	; 0x07
    1f44:	83 e0       	ldi	r24, 0x03	; 3
    1f46:	80 83       	st	Z, r24
    1f48:	24 81       	ldd	r18, Z+4	; 0x04
    1f4a:	35 81       	ldd	r19, Z+5	; 0x05
    1f4c:	46 81       	ldd	r20, Z+6	; 0x06
    1f4e:	57 81       	ldd	r21, Z+7	; 0x07
    1f50:	57 ff       	sbrs	r21, 7
    1f52:	1a c0       	rjmp	.+52     	; 0x1f88 <_fpadd_parts+0x286>
    1f54:	c9 01       	movw	r24, r18
    1f56:	aa 27       	eor	r26, r26
    1f58:	97 fd       	sbrc	r25, 7
    1f5a:	a0 95       	com	r26
    1f5c:	ba 2f       	mov	r27, r26
    1f5e:	81 70       	andi	r24, 0x01	; 1
    1f60:	90 70       	andi	r25, 0x00	; 0
    1f62:	a0 70       	andi	r26, 0x00	; 0
    1f64:	b0 70       	andi	r27, 0x00	; 0
    1f66:	56 95       	lsr	r21
    1f68:	47 95       	ror	r20
    1f6a:	37 95       	ror	r19
    1f6c:	27 95       	ror	r18
    1f6e:	82 2b       	or	r24, r18
    1f70:	93 2b       	or	r25, r19
    1f72:	a4 2b       	or	r26, r20
    1f74:	b5 2b       	or	r27, r21
    1f76:	84 83       	std	Z+4, r24	; 0x04
    1f78:	95 83       	std	Z+5, r25	; 0x05
    1f7a:	a6 83       	std	Z+6, r26	; 0x06
    1f7c:	b7 83       	std	Z+7, r27	; 0x07
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	93 83       	std	Z+3, r25	; 0x03
    1f86:	82 83       	std	Z+2, r24	; 0x02
    1f88:	df 01       	movw	r26, r30
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <_fpadd_parts+0x28c>
    1f8c:	d2 01       	movw	r26, r4
    1f8e:	cd 01       	movw	r24, r26
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	e2 e1       	ldi	r30, 0x12	; 18
    1f96:	0c 94 7e 37 	jmp	0x6efc	; 0x6efc <__epilogue_restores__>

00001f9a <__subsf3>:
    1f9a:	a0 e2       	ldi	r26, 0x20	; 32
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1fa0:	ff e0       	ldi	r31, 0x0F	; 15
    1fa2:	0c 94 6e 37 	jmp	0x6edc	; 0x6edc <__prologue_saves__+0x18>
    1fa6:	69 83       	std	Y+1, r22	; 0x01
    1fa8:	7a 83       	std	Y+2, r23	; 0x02
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	2d 83       	std	Y+5, r18	; 0x05
    1fb0:	3e 83       	std	Y+6, r19	; 0x06
    1fb2:	4f 83       	std	Y+7, r20	; 0x07
    1fb4:	58 87       	std	Y+8, r21	; 0x08
    1fb6:	e9 e0       	ldi	r30, 0x09	; 9
    1fb8:	ee 2e       	mov	r14, r30
    1fba:	f1 2c       	mov	r15, r1
    1fbc:	ec 0e       	add	r14, r28
    1fbe:	fd 1e       	adc	r15, r29
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	b7 01       	movw	r22, r14
    1fc6:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1fca:	8e 01       	movw	r16, r28
    1fcc:	0f 5e       	subi	r16, 0xEF	; 239
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	05 96       	adiw	r24, 0x05	; 5
    1fd4:	b8 01       	movw	r22, r16
    1fd6:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1fda:	8a 89       	ldd	r24, Y+18	; 0x12
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	89 27       	eor	r24, r25
    1fe0:	8a 8b       	std	Y+18, r24	; 0x12
    1fe2:	c7 01       	movw	r24, r14
    1fe4:	b8 01       	movw	r22, r16
    1fe6:	ae 01       	movw	r20, r28
    1fe8:	47 5e       	subi	r20, 0xE7	; 231
    1fea:	5f 4f       	sbci	r21, 0xFF	; 255
    1fec:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_fpadd_parts>
    1ff0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    1ff4:	a0 96       	adiw	r28, 0x20	; 32
    1ff6:	e6 e0       	ldi	r30, 0x06	; 6
    1ff8:	0c 94 8a 37 	jmp	0x6f14	; 0x6f14 <__epilogue_restores__+0x18>

00001ffc <__addsf3>:
    1ffc:	a0 e2       	ldi	r26, 0x20	; 32
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e0       	ldi	r30, 0x04	; 4
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	0c 94 6e 37 	jmp	0x6edc	; 0x6edc <__prologue_saves__+0x18>
    2008:	69 83       	std	Y+1, r22	; 0x01
    200a:	7a 83       	std	Y+2, r23	; 0x02
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	2d 83       	std	Y+5, r18	; 0x05
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	4f 83       	std	Y+7, r20	; 0x07
    2016:	58 87       	std	Y+8, r21	; 0x08
    2018:	f9 e0       	ldi	r31, 0x09	; 9
    201a:	ef 2e       	mov	r14, r31
    201c:	f1 2c       	mov	r15, r1
    201e:	ec 0e       	add	r14, r28
    2020:	fd 1e       	adc	r15, r29
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    202c:	8e 01       	movw	r16, r28
    202e:	0f 5e       	subi	r16, 0xEF	; 239
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	ce 01       	movw	r24, r28
    2034:	05 96       	adiw	r24, 0x05	; 5
    2036:	b8 01       	movw	r22, r16
    2038:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    203c:	c7 01       	movw	r24, r14
    203e:	b8 01       	movw	r22, r16
    2040:	ae 01       	movw	r20, r28
    2042:	47 5e       	subi	r20, 0xE7	; 231
    2044:	5f 4f       	sbci	r21, 0xFF	; 255
    2046:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_fpadd_parts>
    204a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    204e:	a0 96       	adiw	r28, 0x20	; 32
    2050:	e6 e0       	ldi	r30, 0x06	; 6
    2052:	0c 94 8a 37 	jmp	0x6f14	; 0x6f14 <__epilogue_restores__+0x18>

00002056 <__mulsf3>:
    2056:	a0 e2       	ldi	r26, 0x20	; 32
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e1 e3       	ldi	r30, 0x31	; 49
    205c:	f0 e1       	ldi	r31, 0x10	; 16
    205e:	0c 94 62 37 	jmp	0x6ec4	; 0x6ec4 <__prologue_saves__>
    2062:	69 83       	std	Y+1, r22	; 0x01
    2064:	7a 83       	std	Y+2, r23	; 0x02
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	2d 83       	std	Y+5, r18	; 0x05
    206c:	3e 83       	std	Y+6, r19	; 0x06
    206e:	4f 83       	std	Y+7, r20	; 0x07
    2070:	58 87       	std	Y+8, r21	; 0x08
    2072:	ce 01       	movw	r24, r28
    2074:	01 96       	adiw	r24, 0x01	; 1
    2076:	be 01       	movw	r22, r28
    2078:	67 5f       	subi	r22, 0xF7	; 247
    207a:	7f 4f       	sbci	r23, 0xFF	; 255
    207c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2080:	ce 01       	movw	r24, r28
    2082:	05 96       	adiw	r24, 0x05	; 5
    2084:	be 01       	movw	r22, r28
    2086:	6f 5e       	subi	r22, 0xEF	; 239
    2088:	7f 4f       	sbci	r23, 0xFF	; 255
    208a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    208e:	99 85       	ldd	r25, Y+9	; 0x09
    2090:	92 30       	cpi	r25, 0x02	; 2
    2092:	88 f0       	brcs	.+34     	; 0x20b6 <__mulsf3+0x60>
    2094:	89 89       	ldd	r24, Y+17	; 0x11
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	c8 f0       	brcs	.+50     	; 0x20cc <__mulsf3+0x76>
    209a:	94 30       	cpi	r25, 0x04	; 4
    209c:	19 f4       	brne	.+6      	; 0x20a4 <__mulsf3+0x4e>
    209e:	82 30       	cpi	r24, 0x02	; 2
    20a0:	51 f4       	brne	.+20     	; 0x20b6 <__mulsf3+0x60>
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <__mulsf3+0x56>
    20a4:	84 30       	cpi	r24, 0x04	; 4
    20a6:	29 f4       	brne	.+10     	; 0x20b2 <__mulsf3+0x5c>
    20a8:	92 30       	cpi	r25, 0x02	; 2
    20aa:	81 f4       	brne	.+32     	; 0x20cc <__mulsf3+0x76>
    20ac:	8c e9       	ldi	r24, 0x9C	; 156
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	c6 c0       	rjmp	.+396    	; 0x223e <__mulsf3+0x1e8>
    20b2:	92 30       	cpi	r25, 0x02	; 2
    20b4:	49 f4       	brne	.+18     	; 0x20c8 <__mulsf3+0x72>
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	8a 89       	ldd	r24, Y+18	; 0x12
    20bc:	98 13       	cpse	r25, r24
    20be:	21 e0       	ldi	r18, 0x01	; 1
    20c0:	2a 87       	std	Y+10, r18	; 0x0a
    20c2:	ce 01       	movw	r24, r28
    20c4:	09 96       	adiw	r24, 0x09	; 9
    20c6:	bb c0       	rjmp	.+374    	; 0x223e <__mulsf3+0x1e8>
    20c8:	82 30       	cpi	r24, 0x02	; 2
    20ca:	49 f4       	brne	.+18     	; 0x20de <__mulsf3+0x88>
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	8a 89       	ldd	r24, Y+18	; 0x12
    20d2:	98 13       	cpse	r25, r24
    20d4:	21 e0       	ldi	r18, 0x01	; 1
    20d6:	2a 8b       	std	Y+18, r18	; 0x12
    20d8:	ce 01       	movw	r24, r28
    20da:	41 96       	adiw	r24, 0x11	; 17
    20dc:	b0 c0       	rjmp	.+352    	; 0x223e <__mulsf3+0x1e8>
    20de:	2d 84       	ldd	r2, Y+13	; 0x0d
    20e0:	3e 84       	ldd	r3, Y+14	; 0x0e
    20e2:	4f 84       	ldd	r4, Y+15	; 0x0f
    20e4:	58 88       	ldd	r5, Y+16	; 0x10
    20e6:	6d 88       	ldd	r6, Y+21	; 0x15
    20e8:	7e 88       	ldd	r7, Y+22	; 0x16
    20ea:	8f 88       	ldd	r8, Y+23	; 0x17
    20ec:	98 8c       	ldd	r9, Y+24	; 0x18
    20ee:	ee 24       	eor	r14, r14
    20f0:	ff 24       	eor	r15, r15
    20f2:	87 01       	movw	r16, r14
    20f4:	aa 24       	eor	r10, r10
    20f6:	bb 24       	eor	r11, r11
    20f8:	65 01       	movw	r12, r10
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	e0 e0       	ldi	r30, 0x00	; 0
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	c1 01       	movw	r24, r2
    2108:	81 70       	andi	r24, 0x01	; 1
    210a:	90 70       	andi	r25, 0x00	; 0
    210c:	89 2b       	or	r24, r25
    210e:	e9 f0       	breq	.+58     	; 0x214a <__mulsf3+0xf4>
    2110:	e6 0c       	add	r14, r6
    2112:	f7 1c       	adc	r15, r7
    2114:	08 1d       	adc	r16, r8
    2116:	19 1d       	adc	r17, r9
    2118:	9a 01       	movw	r18, r20
    211a:	ab 01       	movw	r20, r22
    211c:	2a 0d       	add	r18, r10
    211e:	3b 1d       	adc	r19, r11
    2120:	4c 1d       	adc	r20, r12
    2122:	5d 1d       	adc	r21, r13
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a0 e0       	ldi	r26, 0x00	; 0
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e6 14       	cp	r14, r6
    212e:	f7 04       	cpc	r15, r7
    2130:	08 05       	cpc	r16, r8
    2132:	19 05       	cpc	r17, r9
    2134:	20 f4       	brcc	.+8      	; 0x213e <__mulsf3+0xe8>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e0       	ldi	r26, 0x00	; 0
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	ba 01       	movw	r22, r20
    2140:	a9 01       	movw	r20, r18
    2142:	48 0f       	add	r20, r24
    2144:	59 1f       	adc	r21, r25
    2146:	6a 1f       	adc	r22, r26
    2148:	7b 1f       	adc	r23, r27
    214a:	aa 0c       	add	r10, r10
    214c:	bb 1c       	adc	r11, r11
    214e:	cc 1c       	adc	r12, r12
    2150:	dd 1c       	adc	r13, r13
    2152:	97 fe       	sbrs	r9, 7
    2154:	08 c0       	rjmp	.+16     	; 0x2166 <__mulsf3+0x110>
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 e0       	ldi	r26, 0x00	; 0
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	a8 2a       	or	r10, r24
    2160:	b9 2a       	or	r11, r25
    2162:	ca 2a       	or	r12, r26
    2164:	db 2a       	or	r13, r27
    2166:	31 96       	adiw	r30, 0x01	; 1
    2168:	e0 32       	cpi	r30, 0x20	; 32
    216a:	f1 05       	cpc	r31, r1
    216c:	49 f0       	breq	.+18     	; 0x2180 <__mulsf3+0x12a>
    216e:	66 0c       	add	r6, r6
    2170:	77 1c       	adc	r7, r7
    2172:	88 1c       	adc	r8, r8
    2174:	99 1c       	adc	r9, r9
    2176:	56 94       	lsr	r5
    2178:	47 94       	ror	r4
    217a:	37 94       	ror	r3
    217c:	27 94       	ror	r2
    217e:	c3 cf       	rjmp	.-122    	; 0x2106 <__mulsf3+0xb0>
    2180:	fa 85       	ldd	r31, Y+10	; 0x0a
    2182:	ea 89       	ldd	r30, Y+18	; 0x12
    2184:	2b 89       	ldd	r18, Y+19	; 0x13
    2186:	3c 89       	ldd	r19, Y+20	; 0x14
    2188:	8b 85       	ldd	r24, Y+11	; 0x0b
    218a:	9c 85       	ldd	r25, Y+12	; 0x0c
    218c:	28 0f       	add	r18, r24
    218e:	39 1f       	adc	r19, r25
    2190:	2e 5f       	subi	r18, 0xFE	; 254
    2192:	3f 4f       	sbci	r19, 0xFF	; 255
    2194:	17 c0       	rjmp	.+46     	; 0x21c4 <__mulsf3+0x16e>
    2196:	ca 01       	movw	r24, r20
    2198:	81 70       	andi	r24, 0x01	; 1
    219a:	90 70       	andi	r25, 0x00	; 0
    219c:	89 2b       	or	r24, r25
    219e:	61 f0       	breq	.+24     	; 0x21b8 <__mulsf3+0x162>
    21a0:	16 95       	lsr	r17
    21a2:	07 95       	ror	r16
    21a4:	f7 94       	ror	r15
    21a6:	e7 94       	ror	r14
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	b0 e8       	ldi	r27, 0x80	; 128
    21b0:	e8 2a       	or	r14, r24
    21b2:	f9 2a       	or	r15, r25
    21b4:	0a 2b       	or	r16, r26
    21b6:	1b 2b       	or	r17, r27
    21b8:	76 95       	lsr	r23
    21ba:	67 95       	ror	r22
    21bc:	57 95       	ror	r21
    21be:	47 95       	ror	r20
    21c0:	2f 5f       	subi	r18, 0xFF	; 255
    21c2:	3f 4f       	sbci	r19, 0xFF	; 255
    21c4:	77 fd       	sbrc	r23, 7
    21c6:	e7 cf       	rjmp	.-50     	; 0x2196 <__mulsf3+0x140>
    21c8:	0c c0       	rjmp	.+24     	; 0x21e2 <__mulsf3+0x18c>
    21ca:	44 0f       	add	r20, r20
    21cc:	55 1f       	adc	r21, r21
    21ce:	66 1f       	adc	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	17 fd       	sbrc	r17, 7
    21d4:	41 60       	ori	r20, 0x01	; 1
    21d6:	ee 0c       	add	r14, r14
    21d8:	ff 1c       	adc	r15, r15
    21da:	00 1f       	adc	r16, r16
    21dc:	11 1f       	adc	r17, r17
    21de:	21 50       	subi	r18, 0x01	; 1
    21e0:	30 40       	sbci	r19, 0x00	; 0
    21e2:	40 30       	cpi	r20, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	59 07       	cpc	r21, r25
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	69 07       	cpc	r22, r25
    21ec:	90 e4       	ldi	r25, 0x40	; 64
    21ee:	79 07       	cpc	r23, r25
    21f0:	60 f3       	brcs	.-40     	; 0x21ca <__mulsf3+0x174>
    21f2:	2b 8f       	std	Y+27, r18	; 0x1b
    21f4:	3c 8f       	std	Y+28, r19	; 0x1c
    21f6:	db 01       	movw	r26, r22
    21f8:	ca 01       	movw	r24, r20
    21fa:	8f 77       	andi	r24, 0x7F	; 127
    21fc:	90 70       	andi	r25, 0x00	; 0
    21fe:	a0 70       	andi	r26, 0x00	; 0
    2200:	b0 70       	andi	r27, 0x00	; 0
    2202:	80 34       	cpi	r24, 0x40	; 64
    2204:	91 05       	cpc	r25, r1
    2206:	a1 05       	cpc	r26, r1
    2208:	b1 05       	cpc	r27, r1
    220a:	61 f4       	brne	.+24     	; 0x2224 <__mulsf3+0x1ce>
    220c:	47 fd       	sbrc	r20, 7
    220e:	0a c0       	rjmp	.+20     	; 0x2224 <__mulsf3+0x1ce>
    2210:	e1 14       	cp	r14, r1
    2212:	f1 04       	cpc	r15, r1
    2214:	01 05       	cpc	r16, r1
    2216:	11 05       	cpc	r17, r1
    2218:	29 f0       	breq	.+10     	; 0x2224 <__mulsf3+0x1ce>
    221a:	40 5c       	subi	r20, 0xC0	; 192
    221c:	5f 4f       	sbci	r21, 0xFF	; 255
    221e:	6f 4f       	sbci	r22, 0xFF	; 255
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	40 78       	andi	r20, 0x80	; 128
    2224:	1a 8e       	std	Y+26, r1	; 0x1a
    2226:	fe 17       	cp	r31, r30
    2228:	11 f0       	breq	.+4      	; 0x222e <__mulsf3+0x1d8>
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	8a 8f       	std	Y+26, r24	; 0x1a
    222e:	4d 8f       	std	Y+29, r20	; 0x1d
    2230:	5e 8f       	std	Y+30, r21	; 0x1e
    2232:	6f 8f       	std	Y+31, r22	; 0x1f
    2234:	78 a3       	std	Y+32, r23	; 0x20
    2236:	83 e0       	ldi	r24, 0x03	; 3
    2238:	89 8f       	std	Y+25, r24	; 0x19
    223a:	ce 01       	movw	r24, r28
    223c:	49 96       	adiw	r24, 0x19	; 25
    223e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    2242:	a0 96       	adiw	r28, 0x20	; 32
    2244:	e2 e1       	ldi	r30, 0x12	; 18
    2246:	0c 94 7e 37 	jmp	0x6efc	; 0x6efc <__epilogue_restores__>

0000224a <__divsf3>:
    224a:	a8 e1       	ldi	r26, 0x18	; 24
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	eb e2       	ldi	r30, 0x2B	; 43
    2250:	f1 e1       	ldi	r31, 0x11	; 17
    2252:	0c 94 6a 37 	jmp	0x6ed4	; 0x6ed4 <__prologue_saves__+0x10>
    2256:	69 83       	std	Y+1, r22	; 0x01
    2258:	7a 83       	std	Y+2, r23	; 0x02
    225a:	8b 83       	std	Y+3, r24	; 0x03
    225c:	9c 83       	std	Y+4, r25	; 0x04
    225e:	2d 83       	std	Y+5, r18	; 0x05
    2260:	3e 83       	std	Y+6, r19	; 0x06
    2262:	4f 83       	std	Y+7, r20	; 0x07
    2264:	58 87       	std	Y+8, r21	; 0x08
    2266:	b9 e0       	ldi	r27, 0x09	; 9
    2268:	eb 2e       	mov	r14, r27
    226a:	f1 2c       	mov	r15, r1
    226c:	ec 0e       	add	r14, r28
    226e:	fd 1e       	adc	r15, r29
    2270:	ce 01       	movw	r24, r28
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	b7 01       	movw	r22, r14
    2276:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    227a:	8e 01       	movw	r16, r28
    227c:	0f 5e       	subi	r16, 0xEF	; 239
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	ce 01       	movw	r24, r28
    2282:	05 96       	adiw	r24, 0x05	; 5
    2284:	b8 01       	movw	r22, r16
    2286:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    228a:	29 85       	ldd	r18, Y+9	; 0x09
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	08 f4       	brcc	.+2      	; 0x2292 <__divsf3+0x48>
    2290:	7e c0       	rjmp	.+252    	; 0x238e <__divsf3+0x144>
    2292:	39 89       	ldd	r19, Y+17	; 0x11
    2294:	32 30       	cpi	r19, 0x02	; 2
    2296:	10 f4       	brcc	.+4      	; 0x229c <__divsf3+0x52>
    2298:	b8 01       	movw	r22, r16
    229a:	7c c0       	rjmp	.+248    	; 0x2394 <__divsf3+0x14a>
    229c:	8a 85       	ldd	r24, Y+10	; 0x0a
    229e:	9a 89       	ldd	r25, Y+18	; 0x12
    22a0:	89 27       	eor	r24, r25
    22a2:	8a 87       	std	Y+10, r24	; 0x0a
    22a4:	24 30       	cpi	r18, 0x04	; 4
    22a6:	11 f0       	breq	.+4      	; 0x22ac <__divsf3+0x62>
    22a8:	22 30       	cpi	r18, 0x02	; 2
    22aa:	31 f4       	brne	.+12     	; 0x22b8 <__divsf3+0x6e>
    22ac:	23 17       	cp	r18, r19
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <__divsf3+0x68>
    22b0:	6e c0       	rjmp	.+220    	; 0x238e <__divsf3+0x144>
    22b2:	6c e9       	ldi	r22, 0x9C	; 156
    22b4:	71 e0       	ldi	r23, 0x01	; 1
    22b6:	6e c0       	rjmp	.+220    	; 0x2394 <__divsf3+0x14a>
    22b8:	34 30       	cpi	r19, 0x04	; 4
    22ba:	39 f4       	brne	.+14     	; 0x22ca <__divsf3+0x80>
    22bc:	1d 86       	std	Y+13, r1	; 0x0d
    22be:	1e 86       	std	Y+14, r1	; 0x0e
    22c0:	1f 86       	std	Y+15, r1	; 0x0f
    22c2:	18 8a       	std	Y+16, r1	; 0x10
    22c4:	1c 86       	std	Y+12, r1	; 0x0c
    22c6:	1b 86       	std	Y+11, r1	; 0x0b
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <__divsf3+0x88>
    22ca:	32 30       	cpi	r19, 0x02	; 2
    22cc:	21 f4       	brne	.+8      	; 0x22d6 <__divsf3+0x8c>
    22ce:	84 e0       	ldi	r24, 0x04	; 4
    22d0:	89 87       	std	Y+9, r24	; 0x09
    22d2:	b7 01       	movw	r22, r14
    22d4:	5f c0       	rjmp	.+190    	; 0x2394 <__divsf3+0x14a>
    22d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    22d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    22da:	8b 89       	ldd	r24, Y+19	; 0x13
    22dc:	9c 89       	ldd	r25, Y+20	; 0x14
    22de:	28 1b       	sub	r18, r24
    22e0:	39 0b       	sbc	r19, r25
    22e2:	3c 87       	std	Y+12, r19	; 0x0c
    22e4:	2b 87       	std	Y+11, r18	; 0x0b
    22e6:	ed 84       	ldd	r14, Y+13	; 0x0d
    22e8:	fe 84       	ldd	r15, Y+14	; 0x0e
    22ea:	0f 85       	ldd	r16, Y+15	; 0x0f
    22ec:	18 89       	ldd	r17, Y+16	; 0x10
    22ee:	ad 88       	ldd	r10, Y+21	; 0x15
    22f0:	be 88       	ldd	r11, Y+22	; 0x16
    22f2:	cf 88       	ldd	r12, Y+23	; 0x17
    22f4:	d8 8c       	ldd	r13, Y+24	; 0x18
    22f6:	ea 14       	cp	r14, r10
    22f8:	fb 04       	cpc	r15, r11
    22fa:	0c 05       	cpc	r16, r12
    22fc:	1d 05       	cpc	r17, r13
    22fe:	40 f4       	brcc	.+16     	; 0x2310 <__divsf3+0xc6>
    2300:	ee 0c       	add	r14, r14
    2302:	ff 1c       	adc	r15, r15
    2304:	00 1f       	adc	r16, r16
    2306:	11 1f       	adc	r17, r17
    2308:	21 50       	subi	r18, 0x01	; 1
    230a:	30 40       	sbci	r19, 0x00	; 0
    230c:	3c 87       	std	Y+12, r19	; 0x0c
    230e:	2b 87       	std	Y+11, r18	; 0x0b
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e0       	ldi	r26, 0x00	; 0
    231e:	b0 e4       	ldi	r27, 0x40	; 64
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	ea 14       	cp	r14, r10
    2326:	fb 04       	cpc	r15, r11
    2328:	0c 05       	cpc	r16, r12
    232a:	1d 05       	cpc	r17, r13
    232c:	40 f0       	brcs	.+16     	; 0x233e <__divsf3+0xf4>
    232e:	28 2b       	or	r18, r24
    2330:	39 2b       	or	r19, r25
    2332:	4a 2b       	or	r20, r26
    2334:	5b 2b       	or	r21, r27
    2336:	ea 18       	sub	r14, r10
    2338:	fb 08       	sbc	r15, r11
    233a:	0c 09       	sbc	r16, r12
    233c:	1d 09       	sbc	r17, r13
    233e:	b6 95       	lsr	r27
    2340:	a7 95       	ror	r26
    2342:	97 95       	ror	r25
    2344:	87 95       	ror	r24
    2346:	ee 0c       	add	r14, r14
    2348:	ff 1c       	adc	r15, r15
    234a:	00 1f       	adc	r16, r16
    234c:	11 1f       	adc	r17, r17
    234e:	6f 5f       	subi	r22, 0xFF	; 255
    2350:	7f 4f       	sbci	r23, 0xFF	; 255
    2352:	6f 31       	cpi	r22, 0x1F	; 31
    2354:	71 05       	cpc	r23, r1
    2356:	31 f7       	brne	.-52     	; 0x2324 <__divsf3+0xda>
    2358:	da 01       	movw	r26, r20
    235a:	c9 01       	movw	r24, r18
    235c:	8f 77       	andi	r24, 0x7F	; 127
    235e:	90 70       	andi	r25, 0x00	; 0
    2360:	a0 70       	andi	r26, 0x00	; 0
    2362:	b0 70       	andi	r27, 0x00	; 0
    2364:	80 34       	cpi	r24, 0x40	; 64
    2366:	91 05       	cpc	r25, r1
    2368:	a1 05       	cpc	r26, r1
    236a:	b1 05       	cpc	r27, r1
    236c:	61 f4       	brne	.+24     	; 0x2386 <__divsf3+0x13c>
    236e:	27 fd       	sbrc	r18, 7
    2370:	0a c0       	rjmp	.+20     	; 0x2386 <__divsf3+0x13c>
    2372:	e1 14       	cp	r14, r1
    2374:	f1 04       	cpc	r15, r1
    2376:	01 05       	cpc	r16, r1
    2378:	11 05       	cpc	r17, r1
    237a:	29 f0       	breq	.+10     	; 0x2386 <__divsf3+0x13c>
    237c:	20 5c       	subi	r18, 0xC0	; 192
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	4f 4f       	sbci	r20, 0xFF	; 255
    2382:	5f 4f       	sbci	r21, 0xFF	; 255
    2384:	20 78       	andi	r18, 0x80	; 128
    2386:	2d 87       	std	Y+13, r18	; 0x0d
    2388:	3e 87       	std	Y+14, r19	; 0x0e
    238a:	4f 87       	std	Y+15, r20	; 0x0f
    238c:	58 8b       	std	Y+16, r21	; 0x10
    238e:	be 01       	movw	r22, r28
    2390:	67 5f       	subi	r22, 0xF7	; 247
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	cb 01       	movw	r24, r22
    2396:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    239a:	68 96       	adiw	r28, 0x18	; 24
    239c:	ea e0       	ldi	r30, 0x0A	; 10
    239e:	0c 94 86 37 	jmp	0x6f0c	; 0x6f0c <__epilogue_restores__+0x10>

000023a2 <__gtsf2>:
    23a2:	a8 e1       	ldi	r26, 0x18	; 24
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e7 ed       	ldi	r30, 0xD7	; 215
    23a8:	f1 e1       	ldi	r31, 0x11	; 17
    23aa:	0c 94 6e 37 	jmp	0x6edc	; 0x6edc <__prologue_saves__+0x18>
    23ae:	69 83       	std	Y+1, r22	; 0x01
    23b0:	7a 83       	std	Y+2, r23	; 0x02
    23b2:	8b 83       	std	Y+3, r24	; 0x03
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	2d 83       	std	Y+5, r18	; 0x05
    23b8:	3e 83       	std	Y+6, r19	; 0x06
    23ba:	4f 83       	std	Y+7, r20	; 0x07
    23bc:	58 87       	std	Y+8, r21	; 0x08
    23be:	89 e0       	ldi	r24, 0x09	; 9
    23c0:	e8 2e       	mov	r14, r24
    23c2:	f1 2c       	mov	r15, r1
    23c4:	ec 0e       	add	r14, r28
    23c6:	fd 1e       	adc	r15, r29
    23c8:	ce 01       	movw	r24, r28
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	b7 01       	movw	r22, r14
    23ce:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    23d2:	8e 01       	movw	r16, r28
    23d4:	0f 5e       	subi	r16, 0xEF	; 239
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	ce 01       	movw	r24, r28
    23da:	05 96       	adiw	r24, 0x05	; 5
    23dc:	b8 01       	movw	r22, r16
    23de:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	40 f0       	brcs	.+16     	; 0x23f8 <__gtsf2+0x56>
    23e8:	89 89       	ldd	r24, Y+17	; 0x11
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	28 f0       	brcs	.+10     	; 0x23f8 <__gtsf2+0x56>
    23ee:	c7 01       	movw	r24, r14
    23f0:	b8 01       	movw	r22, r16
    23f2:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fpcmp_parts_f>
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <__gtsf2+0x58>
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	68 96       	adiw	r28, 0x18	; 24
    23fc:	e6 e0       	ldi	r30, 0x06	; 6
    23fe:	0c 94 8a 37 	jmp	0x6f14	; 0x6f14 <__epilogue_restores__+0x18>

00002402 <__gesf2>:
    2402:	a8 e1       	ldi	r26, 0x18	; 24
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e7 e0       	ldi	r30, 0x07	; 7
    2408:	f2 e1       	ldi	r31, 0x12	; 18
    240a:	0c 94 6e 37 	jmp	0x6edc	; 0x6edc <__prologue_saves__+0x18>
    240e:	69 83       	std	Y+1, r22	; 0x01
    2410:	7a 83       	std	Y+2, r23	; 0x02
    2412:	8b 83       	std	Y+3, r24	; 0x03
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	2d 83       	std	Y+5, r18	; 0x05
    2418:	3e 83       	std	Y+6, r19	; 0x06
    241a:	4f 83       	std	Y+7, r20	; 0x07
    241c:	58 87       	std	Y+8, r21	; 0x08
    241e:	89 e0       	ldi	r24, 0x09	; 9
    2420:	e8 2e       	mov	r14, r24
    2422:	f1 2c       	mov	r15, r1
    2424:	ec 0e       	add	r14, r28
    2426:	fd 1e       	adc	r15, r29
    2428:	ce 01       	movw	r24, r28
    242a:	01 96       	adiw	r24, 0x01	; 1
    242c:	b7 01       	movw	r22, r14
    242e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2432:	8e 01       	movw	r16, r28
    2434:	0f 5e       	subi	r16, 0xEF	; 239
    2436:	1f 4f       	sbci	r17, 0xFF	; 255
    2438:	ce 01       	movw	r24, r28
    243a:	05 96       	adiw	r24, 0x05	; 5
    243c:	b8 01       	movw	r22, r16
    243e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	40 f0       	brcs	.+16     	; 0x2458 <__gesf2+0x56>
    2448:	89 89       	ldd	r24, Y+17	; 0x11
    244a:	82 30       	cpi	r24, 0x02	; 2
    244c:	28 f0       	brcs	.+10     	; 0x2458 <__gesf2+0x56>
    244e:	c7 01       	movw	r24, r14
    2450:	b8 01       	movw	r22, r16
    2452:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fpcmp_parts_f>
    2456:	01 c0       	rjmp	.+2      	; 0x245a <__gesf2+0x58>
    2458:	8f ef       	ldi	r24, 0xFF	; 255
    245a:	68 96       	adiw	r28, 0x18	; 24
    245c:	e6 e0       	ldi	r30, 0x06	; 6
    245e:	0c 94 8a 37 	jmp	0x6f14	; 0x6f14 <__epilogue_restores__+0x18>

00002462 <__ltsf2>:
    2462:	a8 e1       	ldi	r26, 0x18	; 24
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e7 e3       	ldi	r30, 0x37	; 55
    2468:	f2 e1       	ldi	r31, 0x12	; 18
    246a:	0c 94 6e 37 	jmp	0x6edc	; 0x6edc <__prologue_saves__+0x18>
    246e:	69 83       	std	Y+1, r22	; 0x01
    2470:	7a 83       	std	Y+2, r23	; 0x02
    2472:	8b 83       	std	Y+3, r24	; 0x03
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	2d 83       	std	Y+5, r18	; 0x05
    2478:	3e 83       	std	Y+6, r19	; 0x06
    247a:	4f 83       	std	Y+7, r20	; 0x07
    247c:	58 87       	std	Y+8, r21	; 0x08
    247e:	89 e0       	ldi	r24, 0x09	; 9
    2480:	e8 2e       	mov	r14, r24
    2482:	f1 2c       	mov	r15, r1
    2484:	ec 0e       	add	r14, r28
    2486:	fd 1e       	adc	r15, r29
    2488:	ce 01       	movw	r24, r28
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	b7 01       	movw	r22, r14
    248e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2492:	8e 01       	movw	r16, r28
    2494:	0f 5e       	subi	r16, 0xEF	; 239
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	ce 01       	movw	r24, r28
    249a:	05 96       	adiw	r24, 0x05	; 5
    249c:	b8 01       	movw	r22, r16
    249e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	82 30       	cpi	r24, 0x02	; 2
    24a6:	40 f0       	brcs	.+16     	; 0x24b8 <__ltsf2+0x56>
    24a8:	89 89       	ldd	r24, Y+17	; 0x11
    24aa:	82 30       	cpi	r24, 0x02	; 2
    24ac:	28 f0       	brcs	.+10     	; 0x24b8 <__ltsf2+0x56>
    24ae:	c7 01       	movw	r24, r14
    24b0:	b8 01       	movw	r22, r16
    24b2:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fpcmp_parts_f>
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <__ltsf2+0x58>
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	68 96       	adiw	r28, 0x18	; 24
    24bc:	e6 e0       	ldi	r30, 0x06	; 6
    24be:	0c 94 8a 37 	jmp	0x6f14	; 0x6f14 <__epilogue_restores__+0x18>

000024c2 <__fixsfsi>:
    24c2:	ac e0       	ldi	r26, 0x0C	; 12
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e7 e6       	ldi	r30, 0x67	; 103
    24c8:	f2 e1       	ldi	r31, 0x12	; 18
    24ca:	0c 94 72 37 	jmp	0x6ee4	; 0x6ee4 <__prologue_saves__+0x20>
    24ce:	69 83       	std	Y+1, r22	; 0x01
    24d0:	7a 83       	std	Y+2, r23	; 0x02
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	ce 01       	movw	r24, r28
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	be 01       	movw	r22, r28
    24dc:	6b 5f       	subi	r22, 0xFB	; 251
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	82 30       	cpi	r24, 0x02	; 2
    24e8:	61 f1       	breq	.+88     	; 0x2542 <__fixsfsi+0x80>
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	50 f1       	brcs	.+84     	; 0x2542 <__fixsfsi+0x80>
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	21 f4       	brne	.+8      	; 0x24fa <__fixsfsi+0x38>
    24f2:	8e 81       	ldd	r24, Y+6	; 0x06
    24f4:	88 23       	and	r24, r24
    24f6:	51 f1       	breq	.+84     	; 0x254c <__fixsfsi+0x8a>
    24f8:	2e c0       	rjmp	.+92     	; 0x2556 <__fixsfsi+0x94>
    24fa:	2f 81       	ldd	r18, Y+7	; 0x07
    24fc:	38 85       	ldd	r19, Y+8	; 0x08
    24fe:	37 fd       	sbrc	r19, 7
    2500:	20 c0       	rjmp	.+64     	; 0x2542 <__fixsfsi+0x80>
    2502:	6e 81       	ldd	r22, Y+6	; 0x06
    2504:	2f 31       	cpi	r18, 0x1F	; 31
    2506:	31 05       	cpc	r19, r1
    2508:	1c f0       	brlt	.+6      	; 0x2510 <__fixsfsi+0x4e>
    250a:	66 23       	and	r22, r22
    250c:	f9 f0       	breq	.+62     	; 0x254c <__fixsfsi+0x8a>
    250e:	23 c0       	rjmp	.+70     	; 0x2556 <__fixsfsi+0x94>
    2510:	8e e1       	ldi	r24, 0x1E	; 30
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	82 1b       	sub	r24, r18
    2516:	93 0b       	sbc	r25, r19
    2518:	29 85       	ldd	r18, Y+9	; 0x09
    251a:	3a 85       	ldd	r19, Y+10	; 0x0a
    251c:	4b 85       	ldd	r20, Y+11	; 0x0b
    251e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2520:	04 c0       	rjmp	.+8      	; 0x252a <__fixsfsi+0x68>
    2522:	56 95       	lsr	r21
    2524:	47 95       	ror	r20
    2526:	37 95       	ror	r19
    2528:	27 95       	ror	r18
    252a:	8a 95       	dec	r24
    252c:	d2 f7       	brpl	.-12     	; 0x2522 <__fixsfsi+0x60>
    252e:	66 23       	and	r22, r22
    2530:	b1 f0       	breq	.+44     	; 0x255e <__fixsfsi+0x9c>
    2532:	50 95       	com	r21
    2534:	40 95       	com	r20
    2536:	30 95       	com	r19
    2538:	21 95       	neg	r18
    253a:	3f 4f       	sbci	r19, 0xFF	; 255
    253c:	4f 4f       	sbci	r20, 0xFF	; 255
    253e:	5f 4f       	sbci	r21, 0xFF	; 255
    2540:	0e c0       	rjmp	.+28     	; 0x255e <__fixsfsi+0x9c>
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	09 c0       	rjmp	.+18     	; 0x255e <__fixsfsi+0x9c>
    254c:	2f ef       	ldi	r18, 0xFF	; 255
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f ef       	ldi	r20, 0xFF	; 255
    2552:	5f e7       	ldi	r21, 0x7F	; 127
    2554:	04 c0       	rjmp	.+8      	; 0x255e <__fixsfsi+0x9c>
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	50 e8       	ldi	r21, 0x80	; 128
    255e:	b9 01       	movw	r22, r18
    2560:	ca 01       	movw	r24, r20
    2562:	2c 96       	adiw	r28, 0x0c	; 12
    2564:	e2 e0       	ldi	r30, 0x02	; 2
    2566:	0c 94 8e 37 	jmp	0x6f1c	; 0x6f1c <__epilogue_restores__+0x20>

0000256a <__floatunsisf>:
    256a:	a8 e0       	ldi	r26, 0x08	; 8
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	eb eb       	ldi	r30, 0xBB	; 187
    2570:	f2 e1       	ldi	r31, 0x12	; 18
    2572:	0c 94 6a 37 	jmp	0x6ed4	; 0x6ed4 <__prologue_saves__+0x10>
    2576:	7b 01       	movw	r14, r22
    2578:	8c 01       	movw	r16, r24
    257a:	61 15       	cp	r22, r1
    257c:	71 05       	cpc	r23, r1
    257e:	81 05       	cpc	r24, r1
    2580:	91 05       	cpc	r25, r1
    2582:	19 f4       	brne	.+6      	; 0x258a <__floatunsisf+0x20>
    2584:	82 e0       	ldi	r24, 0x02	; 2
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	60 c0       	rjmp	.+192    	; 0x264a <__floatunsisf+0xe0>
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	8e e1       	ldi	r24, 0x1E	; 30
    2590:	c8 2e       	mov	r12, r24
    2592:	d1 2c       	mov	r13, r1
    2594:	dc 82       	std	Y+4, r13	; 0x04
    2596:	cb 82       	std	Y+3, r12	; 0x03
    2598:	ed 82       	std	Y+5, r14	; 0x05
    259a:	fe 82       	std	Y+6, r15	; 0x06
    259c:	0f 83       	std	Y+7, r16	; 0x07
    259e:	18 87       	std	Y+8, r17	; 0x08
    25a0:	c8 01       	movw	r24, r16
    25a2:	b7 01       	movw	r22, r14
    25a4:	0e 94 2e 13 	call	0x265c	; 0x265c <__clzsi2>
    25a8:	fc 01       	movw	r30, r24
    25aa:	31 97       	sbiw	r30, 0x01	; 1
    25ac:	f7 ff       	sbrs	r31, 7
    25ae:	3b c0       	rjmp	.+118    	; 0x2626 <__floatunsisf+0xbc>
    25b0:	22 27       	eor	r18, r18
    25b2:	33 27       	eor	r19, r19
    25b4:	2e 1b       	sub	r18, r30
    25b6:	3f 0b       	sbc	r19, r31
    25b8:	57 01       	movw	r10, r14
    25ba:	68 01       	movw	r12, r16
    25bc:	02 2e       	mov	r0, r18
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <__floatunsisf+0x5e>
    25c0:	d6 94       	lsr	r13
    25c2:	c7 94       	ror	r12
    25c4:	b7 94       	ror	r11
    25c6:	a7 94       	ror	r10
    25c8:	0a 94       	dec	r0
    25ca:	d2 f7       	brpl	.-12     	; 0x25c0 <__floatunsisf+0x56>
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a0 e0       	ldi	r26, 0x00	; 0
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	04 c0       	rjmp	.+8      	; 0x25e6 <__floatunsisf+0x7c>
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	aa 1f       	adc	r26, r26
    25e4:	bb 1f       	adc	r27, r27
    25e6:	2a 95       	dec	r18
    25e8:	d2 f7       	brpl	.-12     	; 0x25de <__floatunsisf+0x74>
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	a1 09       	sbc	r26, r1
    25ee:	b1 09       	sbc	r27, r1
    25f0:	8e 21       	and	r24, r14
    25f2:	9f 21       	and	r25, r15
    25f4:	a0 23       	and	r26, r16
    25f6:	b1 23       	and	r27, r17
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	a1 05       	cpc	r26, r1
    25fc:	b1 05       	cpc	r27, r1
    25fe:	21 f0       	breq	.+8      	; 0x2608 <__floatunsisf+0x9e>
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	4a 29       	or	r20, r10
    260a:	5b 29       	or	r21, r11
    260c:	6c 29       	or	r22, r12
    260e:	7d 29       	or	r23, r13
    2610:	4d 83       	std	Y+5, r20	; 0x05
    2612:	5e 83       	std	Y+6, r21	; 0x06
    2614:	6f 83       	std	Y+7, r22	; 0x07
    2616:	78 87       	std	Y+8, r23	; 0x08
    2618:	8e e1       	ldi	r24, 0x1E	; 30
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	8e 1b       	sub	r24, r30
    261e:	9f 0b       	sbc	r25, r31
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	8b 83       	std	Y+3, r24	; 0x03
    2624:	12 c0       	rjmp	.+36     	; 0x264a <__floatunsisf+0xe0>
    2626:	30 97       	sbiw	r30, 0x00	; 0
    2628:	81 f0       	breq	.+32     	; 0x264a <__floatunsisf+0xe0>
    262a:	0e 2e       	mov	r0, r30
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <__floatunsisf+0xcc>
    262e:	ee 0c       	add	r14, r14
    2630:	ff 1c       	adc	r15, r15
    2632:	00 1f       	adc	r16, r16
    2634:	11 1f       	adc	r17, r17
    2636:	0a 94       	dec	r0
    2638:	d2 f7       	brpl	.-12     	; 0x262e <__floatunsisf+0xc4>
    263a:	ed 82       	std	Y+5, r14	; 0x05
    263c:	fe 82       	std	Y+6, r15	; 0x06
    263e:	0f 83       	std	Y+7, r16	; 0x07
    2640:	18 87       	std	Y+8, r17	; 0x08
    2642:	ce 1a       	sub	r12, r30
    2644:	df 0a       	sbc	r13, r31
    2646:	dc 82       	std	Y+4, r13	; 0x04
    2648:	cb 82       	std	Y+3, r12	; 0x03
    264a:	1a 82       	std	Y+2, r1	; 0x02
    264c:	ce 01       	movw	r24, r28
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    2654:	28 96       	adiw	r28, 0x08	; 8
    2656:	ea e0       	ldi	r30, 0x0A	; 10
    2658:	0c 94 86 37 	jmp	0x6f0c	; 0x6f0c <__epilogue_restores__+0x10>

0000265c <__clzsi2>:
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	7b 01       	movw	r14, r22
    2666:	8c 01       	movw	r16, r24
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	e8 16       	cp	r14, r24
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	f8 06       	cpc	r15, r24
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	08 07       	cpc	r16, r24
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	18 07       	cpc	r17, r24
    2678:	88 f4       	brcc	.+34     	; 0x269c <__clzsi2+0x40>
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	e8 16       	cp	r14, r24
    267e:	f1 04       	cpc	r15, r1
    2680:	01 05       	cpc	r16, r1
    2682:	11 05       	cpc	r17, r1
    2684:	31 f0       	breq	.+12     	; 0x2692 <__clzsi2+0x36>
    2686:	28 f0       	brcs	.+10     	; 0x2692 <__clzsi2+0x36>
    2688:	88 e0       	ldi	r24, 0x08	; 8
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a0 e0       	ldi	r26, 0x00	; 0
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	17 c0       	rjmp	.+46     	; 0x26c0 <__clzsi2+0x64>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	12 c0       	rjmp	.+36     	; 0x26c0 <__clzsi2+0x64>
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	e8 16       	cp	r14, r24
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	f8 06       	cpc	r15, r24
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	08 07       	cpc	r16, r24
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	18 07       	cpc	r17, r24
    26ac:	28 f0       	brcs	.+10     	; 0x26b8 <__clzsi2+0x5c>
    26ae:	88 e1       	ldi	r24, 0x18	; 24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <__clzsi2+0x64>
    26b8:	80 e1       	ldi	r24, 0x10	; 16
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e0       	ldi	r26, 0x00	; 0
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	20 e2       	ldi	r18, 0x20	; 32
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	28 1b       	sub	r18, r24
    26ca:	39 0b       	sbc	r19, r25
    26cc:	4a 0b       	sbc	r20, r26
    26ce:	5b 0b       	sbc	r21, r27
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <__clzsi2+0x7e>
    26d2:	16 95       	lsr	r17
    26d4:	07 95       	ror	r16
    26d6:	f7 94       	ror	r15
    26d8:	e7 94       	ror	r14
    26da:	8a 95       	dec	r24
    26dc:	d2 f7       	brpl	.-12     	; 0x26d2 <__clzsi2+0x76>
    26de:	f7 01       	movw	r30, r14
    26e0:	ec 55       	subi	r30, 0x5C	; 92
    26e2:	fe 4f       	sbci	r31, 0xFE	; 254
    26e4:	80 81       	ld	r24, Z
    26e6:	28 1b       	sub	r18, r24
    26e8:	31 09       	sbc	r19, r1
    26ea:	41 09       	sbc	r20, r1
    26ec:	51 09       	sbc	r21, r1
    26ee:	c9 01       	movw	r24, r18
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	08 95       	ret

000026fa <__pack_f>:
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	fc 01       	movw	r30, r24
    2706:	e4 80       	ldd	r14, Z+4	; 0x04
    2708:	f5 80       	ldd	r15, Z+5	; 0x05
    270a:	06 81       	ldd	r16, Z+6	; 0x06
    270c:	17 81       	ldd	r17, Z+7	; 0x07
    270e:	d1 80       	ldd	r13, Z+1	; 0x01
    2710:	80 81       	ld	r24, Z
    2712:	82 30       	cpi	r24, 0x02	; 2
    2714:	48 f4       	brcc	.+18     	; 0x2728 <__pack_f+0x2e>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a0 e1       	ldi	r26, 0x10	; 16
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e8 2a       	or	r14, r24
    2720:	f9 2a       	or	r15, r25
    2722:	0a 2b       	or	r16, r26
    2724:	1b 2b       	or	r17, r27
    2726:	a5 c0       	rjmp	.+330    	; 0x2872 <__pack_f+0x178>
    2728:	84 30       	cpi	r24, 0x04	; 4
    272a:	09 f4       	brne	.+2      	; 0x272e <__pack_f+0x34>
    272c:	9f c0       	rjmp	.+318    	; 0x286c <__pack_f+0x172>
    272e:	82 30       	cpi	r24, 0x02	; 2
    2730:	21 f4       	brne	.+8      	; 0x273a <__pack_f+0x40>
    2732:	ee 24       	eor	r14, r14
    2734:	ff 24       	eor	r15, r15
    2736:	87 01       	movw	r16, r14
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <__pack_f+0x4a>
    273a:	e1 14       	cp	r14, r1
    273c:	f1 04       	cpc	r15, r1
    273e:	01 05       	cpc	r16, r1
    2740:	11 05       	cpc	r17, r1
    2742:	19 f4       	brne	.+6      	; 0x274a <__pack_f+0x50>
    2744:	e0 e0       	ldi	r30, 0x00	; 0
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	96 c0       	rjmp	.+300    	; 0x2876 <__pack_f+0x17c>
    274a:	62 81       	ldd	r22, Z+2	; 0x02
    274c:	73 81       	ldd	r23, Z+3	; 0x03
    274e:	9f ef       	ldi	r25, 0xFF	; 255
    2750:	62 38       	cpi	r22, 0x82	; 130
    2752:	79 07       	cpc	r23, r25
    2754:	0c f0       	brlt	.+2      	; 0x2758 <__pack_f+0x5e>
    2756:	5b c0       	rjmp	.+182    	; 0x280e <__pack_f+0x114>
    2758:	22 e8       	ldi	r18, 0x82	; 130
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	26 1b       	sub	r18, r22
    275e:	37 0b       	sbc	r19, r23
    2760:	2a 31       	cpi	r18, 0x1A	; 26
    2762:	31 05       	cpc	r19, r1
    2764:	2c f0       	brlt	.+10     	; 0x2770 <__pack_f+0x76>
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	2a c0       	rjmp	.+84     	; 0x27c4 <__pack_f+0xca>
    2770:	b8 01       	movw	r22, r16
    2772:	a7 01       	movw	r20, r14
    2774:	02 2e       	mov	r0, r18
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <__pack_f+0x86>
    2778:	76 95       	lsr	r23
    277a:	67 95       	ror	r22
    277c:	57 95       	ror	r21
    277e:	47 95       	ror	r20
    2780:	0a 94       	dec	r0
    2782:	d2 f7       	brpl	.-12     	; 0x2778 <__pack_f+0x7e>
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	a0 e0       	ldi	r26, 0x00	; 0
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	04 c0       	rjmp	.+8      	; 0x2796 <__pack_f+0x9c>
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	aa 1f       	adc	r26, r26
    2794:	bb 1f       	adc	r27, r27
    2796:	2a 95       	dec	r18
    2798:	d2 f7       	brpl	.-12     	; 0x278e <__pack_f+0x94>
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	a1 09       	sbc	r26, r1
    279e:	b1 09       	sbc	r27, r1
    27a0:	8e 21       	and	r24, r14
    27a2:	9f 21       	and	r25, r15
    27a4:	a0 23       	and	r26, r16
    27a6:	b1 23       	and	r27, r17
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	a1 05       	cpc	r26, r1
    27ac:	b1 05       	cpc	r27, r1
    27ae:	21 f0       	breq	.+8      	; 0x27b8 <__pack_f+0xbe>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	9a 01       	movw	r18, r20
    27ba:	ab 01       	movw	r20, r22
    27bc:	28 2b       	or	r18, r24
    27be:	39 2b       	or	r19, r25
    27c0:	4a 2b       	or	r20, r26
    27c2:	5b 2b       	or	r21, r27
    27c4:	da 01       	movw	r26, r20
    27c6:	c9 01       	movw	r24, r18
    27c8:	8f 77       	andi	r24, 0x7F	; 127
    27ca:	90 70       	andi	r25, 0x00	; 0
    27cc:	a0 70       	andi	r26, 0x00	; 0
    27ce:	b0 70       	andi	r27, 0x00	; 0
    27d0:	80 34       	cpi	r24, 0x40	; 64
    27d2:	91 05       	cpc	r25, r1
    27d4:	a1 05       	cpc	r26, r1
    27d6:	b1 05       	cpc	r27, r1
    27d8:	39 f4       	brne	.+14     	; 0x27e8 <__pack_f+0xee>
    27da:	27 ff       	sbrs	r18, 7
    27dc:	09 c0       	rjmp	.+18     	; 0x27f0 <__pack_f+0xf6>
    27de:	20 5c       	subi	r18, 0xC0	; 192
    27e0:	3f 4f       	sbci	r19, 0xFF	; 255
    27e2:	4f 4f       	sbci	r20, 0xFF	; 255
    27e4:	5f 4f       	sbci	r21, 0xFF	; 255
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <__pack_f+0xf6>
    27e8:	21 5c       	subi	r18, 0xC1	; 193
    27ea:	3f 4f       	sbci	r19, 0xFF	; 255
    27ec:	4f 4f       	sbci	r20, 0xFF	; 255
    27ee:	5f 4f       	sbci	r21, 0xFF	; 255
    27f0:	e0 e0       	ldi	r30, 0x00	; 0
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	20 30       	cpi	r18, 0x00	; 0
    27f6:	a0 e0       	ldi	r26, 0x00	; 0
    27f8:	3a 07       	cpc	r19, r26
    27fa:	a0 e0       	ldi	r26, 0x00	; 0
    27fc:	4a 07       	cpc	r20, r26
    27fe:	a0 e4       	ldi	r26, 0x40	; 64
    2800:	5a 07       	cpc	r21, r26
    2802:	10 f0       	brcs	.+4      	; 0x2808 <__pack_f+0x10e>
    2804:	e1 e0       	ldi	r30, 0x01	; 1
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	79 01       	movw	r14, r18
    280a:	8a 01       	movw	r16, r20
    280c:	27 c0       	rjmp	.+78     	; 0x285c <__pack_f+0x162>
    280e:	60 38       	cpi	r22, 0x80	; 128
    2810:	71 05       	cpc	r23, r1
    2812:	64 f5       	brge	.+88     	; 0x286c <__pack_f+0x172>
    2814:	fb 01       	movw	r30, r22
    2816:	e1 58       	subi	r30, 0x81	; 129
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	d8 01       	movw	r26, r16
    281c:	c7 01       	movw	r24, r14
    281e:	8f 77       	andi	r24, 0x7F	; 127
    2820:	90 70       	andi	r25, 0x00	; 0
    2822:	a0 70       	andi	r26, 0x00	; 0
    2824:	b0 70       	andi	r27, 0x00	; 0
    2826:	80 34       	cpi	r24, 0x40	; 64
    2828:	91 05       	cpc	r25, r1
    282a:	a1 05       	cpc	r26, r1
    282c:	b1 05       	cpc	r27, r1
    282e:	39 f4       	brne	.+14     	; 0x283e <__pack_f+0x144>
    2830:	e7 fe       	sbrs	r14, 7
    2832:	0d c0       	rjmp	.+26     	; 0x284e <__pack_f+0x154>
    2834:	80 e4       	ldi	r24, 0x40	; 64
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e0       	ldi	r26, 0x00	; 0
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <__pack_f+0x14c>
    283e:	8f e3       	ldi	r24, 0x3F	; 63
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e0       	ldi	r26, 0x00	; 0
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e8 0e       	add	r14, r24
    2848:	f9 1e       	adc	r15, r25
    284a:	0a 1f       	adc	r16, r26
    284c:	1b 1f       	adc	r17, r27
    284e:	17 ff       	sbrs	r17, 7
    2850:	05 c0       	rjmp	.+10     	; 0x285c <__pack_f+0x162>
    2852:	16 95       	lsr	r17
    2854:	07 95       	ror	r16
    2856:	f7 94       	ror	r15
    2858:	e7 94       	ror	r14
    285a:	31 96       	adiw	r30, 0x01	; 1
    285c:	87 e0       	ldi	r24, 0x07	; 7
    285e:	16 95       	lsr	r17
    2860:	07 95       	ror	r16
    2862:	f7 94       	ror	r15
    2864:	e7 94       	ror	r14
    2866:	8a 95       	dec	r24
    2868:	d1 f7       	brne	.-12     	; 0x285e <__pack_f+0x164>
    286a:	05 c0       	rjmp	.+10     	; 0x2876 <__pack_f+0x17c>
    286c:	ee 24       	eor	r14, r14
    286e:	ff 24       	eor	r15, r15
    2870:	87 01       	movw	r16, r14
    2872:	ef ef       	ldi	r30, 0xFF	; 255
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	6e 2f       	mov	r22, r30
    2878:	67 95       	ror	r22
    287a:	66 27       	eor	r22, r22
    287c:	67 95       	ror	r22
    287e:	90 2f       	mov	r25, r16
    2880:	9f 77       	andi	r25, 0x7F	; 127
    2882:	d7 94       	ror	r13
    2884:	dd 24       	eor	r13, r13
    2886:	d7 94       	ror	r13
    2888:	8e 2f       	mov	r24, r30
    288a:	86 95       	lsr	r24
    288c:	49 2f       	mov	r20, r25
    288e:	46 2b       	or	r20, r22
    2890:	58 2f       	mov	r21, r24
    2892:	5d 29       	or	r21, r13
    2894:	b7 01       	movw	r22, r14
    2896:	ca 01       	movw	r24, r20
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	ff 90       	pop	r15
    289e:	ef 90       	pop	r14
    28a0:	df 90       	pop	r13
    28a2:	08 95       	ret

000028a4 <__unpack_f>:
    28a4:	fc 01       	movw	r30, r24
    28a6:	db 01       	movw	r26, r22
    28a8:	40 81       	ld	r20, Z
    28aa:	51 81       	ldd	r21, Z+1	; 0x01
    28ac:	22 81       	ldd	r18, Z+2	; 0x02
    28ae:	62 2f       	mov	r22, r18
    28b0:	6f 77       	andi	r22, 0x7F	; 127
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	22 1f       	adc	r18, r18
    28b6:	22 27       	eor	r18, r18
    28b8:	22 1f       	adc	r18, r18
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	89 2f       	mov	r24, r25
    28be:	88 0f       	add	r24, r24
    28c0:	82 2b       	or	r24, r18
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	99 1f       	adc	r25, r25
    28c8:	99 27       	eor	r25, r25
    28ca:	99 1f       	adc	r25, r25
    28cc:	11 96       	adiw	r26, 0x01	; 1
    28ce:	9c 93       	st	X, r25
    28d0:	11 97       	sbiw	r26, 0x01	; 1
    28d2:	21 15       	cp	r18, r1
    28d4:	31 05       	cpc	r19, r1
    28d6:	a9 f5       	brne	.+106    	; 0x2942 <__unpack_f+0x9e>
    28d8:	41 15       	cp	r20, r1
    28da:	51 05       	cpc	r21, r1
    28dc:	61 05       	cpc	r22, r1
    28de:	71 05       	cpc	r23, r1
    28e0:	11 f4       	brne	.+4      	; 0x28e6 <__unpack_f+0x42>
    28e2:	82 e0       	ldi	r24, 0x02	; 2
    28e4:	37 c0       	rjmp	.+110    	; 0x2954 <__unpack_f+0xb0>
    28e6:	82 e8       	ldi	r24, 0x82	; 130
    28e8:	9f ef       	ldi	r25, 0xFF	; 255
    28ea:	13 96       	adiw	r26, 0x03	; 3
    28ec:	9c 93       	st	X, r25
    28ee:	8e 93       	st	-X, r24
    28f0:	12 97       	sbiw	r26, 0x02	; 2
    28f2:	9a 01       	movw	r18, r20
    28f4:	ab 01       	movw	r20, r22
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	44 1f       	adc	r20, r20
    28fe:	55 1f       	adc	r21, r21
    2900:	6a 95       	dec	r22
    2902:	d1 f7       	brne	.-12     	; 0x28f8 <__unpack_f+0x54>
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	8c 93       	st	X, r24
    2908:	0d c0       	rjmp	.+26     	; 0x2924 <__unpack_f+0x80>
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	44 1f       	adc	r20, r20
    2910:	55 1f       	adc	r21, r21
    2912:	12 96       	adiw	r26, 0x02	; 2
    2914:	8d 91       	ld	r24, X+
    2916:	9c 91       	ld	r25, X
    2918:	13 97       	sbiw	r26, 0x03	; 3
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	13 96       	adiw	r26, 0x03	; 3
    291e:	9c 93       	st	X, r25
    2920:	8e 93       	st	-X, r24
    2922:	12 97       	sbiw	r26, 0x02	; 2
    2924:	20 30       	cpi	r18, 0x00	; 0
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	38 07       	cpc	r19, r24
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	48 07       	cpc	r20, r24
    292e:	80 e4       	ldi	r24, 0x40	; 64
    2930:	58 07       	cpc	r21, r24
    2932:	58 f3       	brcs	.-42     	; 0x290a <__unpack_f+0x66>
    2934:	14 96       	adiw	r26, 0x04	; 4
    2936:	2d 93       	st	X+, r18
    2938:	3d 93       	st	X+, r19
    293a:	4d 93       	st	X+, r20
    293c:	5c 93       	st	X, r21
    293e:	17 97       	sbiw	r26, 0x07	; 7
    2940:	08 95       	ret
    2942:	2f 3f       	cpi	r18, 0xFF	; 255
    2944:	31 05       	cpc	r19, r1
    2946:	79 f4       	brne	.+30     	; 0x2966 <__unpack_f+0xc2>
    2948:	41 15       	cp	r20, r1
    294a:	51 05       	cpc	r21, r1
    294c:	61 05       	cpc	r22, r1
    294e:	71 05       	cpc	r23, r1
    2950:	19 f4       	brne	.+6      	; 0x2958 <__unpack_f+0xb4>
    2952:	84 e0       	ldi	r24, 0x04	; 4
    2954:	8c 93       	st	X, r24
    2956:	08 95       	ret
    2958:	64 ff       	sbrs	r22, 4
    295a:	03 c0       	rjmp	.+6      	; 0x2962 <__unpack_f+0xbe>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	8c 93       	st	X, r24
    2960:	12 c0       	rjmp	.+36     	; 0x2986 <__unpack_f+0xe2>
    2962:	1c 92       	st	X, r1
    2964:	10 c0       	rjmp	.+32     	; 0x2986 <__unpack_f+0xe2>
    2966:	2f 57       	subi	r18, 0x7F	; 127
    2968:	30 40       	sbci	r19, 0x00	; 0
    296a:	13 96       	adiw	r26, 0x03	; 3
    296c:	3c 93       	st	X, r19
    296e:	2e 93       	st	-X, r18
    2970:	12 97       	sbiw	r26, 0x02	; 2
    2972:	83 e0       	ldi	r24, 0x03	; 3
    2974:	8c 93       	st	X, r24
    2976:	87 e0       	ldi	r24, 0x07	; 7
    2978:	44 0f       	add	r20, r20
    297a:	55 1f       	adc	r21, r21
    297c:	66 1f       	adc	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	8a 95       	dec	r24
    2982:	d1 f7       	brne	.-12     	; 0x2978 <__unpack_f+0xd4>
    2984:	70 64       	ori	r23, 0x40	; 64
    2986:	14 96       	adiw	r26, 0x04	; 4
    2988:	4d 93       	st	X+, r20
    298a:	5d 93       	st	X+, r21
    298c:	6d 93       	st	X+, r22
    298e:	7c 93       	st	X, r23
    2990:	17 97       	sbiw	r26, 0x07	; 7
    2992:	08 95       	ret

00002994 <__fpcmp_parts_f>:
    2994:	1f 93       	push	r17
    2996:	dc 01       	movw	r26, r24
    2998:	fb 01       	movw	r30, r22
    299a:	9c 91       	ld	r25, X
    299c:	92 30       	cpi	r25, 0x02	; 2
    299e:	08 f4       	brcc	.+2      	; 0x29a2 <__fpcmp_parts_f+0xe>
    29a0:	47 c0       	rjmp	.+142    	; 0x2a30 <__fpcmp_parts_f+0x9c>
    29a2:	80 81       	ld	r24, Z
    29a4:	82 30       	cpi	r24, 0x02	; 2
    29a6:	08 f4       	brcc	.+2      	; 0x29aa <__fpcmp_parts_f+0x16>
    29a8:	43 c0       	rjmp	.+134    	; 0x2a30 <__fpcmp_parts_f+0x9c>
    29aa:	94 30       	cpi	r25, 0x04	; 4
    29ac:	51 f4       	brne	.+20     	; 0x29c2 <__fpcmp_parts_f+0x2e>
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	1c 91       	ld	r17, X
    29b2:	84 30       	cpi	r24, 0x04	; 4
    29b4:	99 f5       	brne	.+102    	; 0x2a1c <__fpcmp_parts_f+0x88>
    29b6:	81 81       	ldd	r24, Z+1	; 0x01
    29b8:	68 2f       	mov	r22, r24
    29ba:	70 e0       	ldi	r23, 0x00	; 0
    29bc:	61 1b       	sub	r22, r17
    29be:	71 09       	sbc	r23, r1
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <__fpcmp_parts_f+0xac>
    29c2:	84 30       	cpi	r24, 0x04	; 4
    29c4:	21 f0       	breq	.+8      	; 0x29ce <__fpcmp_parts_f+0x3a>
    29c6:	92 30       	cpi	r25, 0x02	; 2
    29c8:	31 f4       	brne	.+12     	; 0x29d6 <__fpcmp_parts_f+0x42>
    29ca:	82 30       	cpi	r24, 0x02	; 2
    29cc:	b9 f1       	breq	.+110    	; 0x2a3c <__fpcmp_parts_f+0xa8>
    29ce:	81 81       	ldd	r24, Z+1	; 0x01
    29d0:	88 23       	and	r24, r24
    29d2:	89 f1       	breq	.+98     	; 0x2a36 <__fpcmp_parts_f+0xa2>
    29d4:	2d c0       	rjmp	.+90     	; 0x2a30 <__fpcmp_parts_f+0x9c>
    29d6:	11 96       	adiw	r26, 0x01	; 1
    29d8:	1c 91       	ld	r17, X
    29da:	11 97       	sbiw	r26, 0x01	; 1
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	f1 f0       	breq	.+60     	; 0x2a1c <__fpcmp_parts_f+0x88>
    29e0:	81 81       	ldd	r24, Z+1	; 0x01
    29e2:	18 17       	cp	r17, r24
    29e4:	d9 f4       	brne	.+54     	; 0x2a1c <__fpcmp_parts_f+0x88>
    29e6:	12 96       	adiw	r26, 0x02	; 2
    29e8:	2d 91       	ld	r18, X+
    29ea:	3c 91       	ld	r19, X
    29ec:	13 97       	sbiw	r26, 0x03	; 3
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	82 17       	cp	r24, r18
    29f4:	93 07       	cpc	r25, r19
    29f6:	94 f0       	brlt	.+36     	; 0x2a1c <__fpcmp_parts_f+0x88>
    29f8:	28 17       	cp	r18, r24
    29fa:	39 07       	cpc	r19, r25
    29fc:	bc f0       	brlt	.+46     	; 0x2a2c <__fpcmp_parts_f+0x98>
    29fe:	14 96       	adiw	r26, 0x04	; 4
    2a00:	8d 91       	ld	r24, X+
    2a02:	9d 91       	ld	r25, X+
    2a04:	0d 90       	ld	r0, X+
    2a06:	bc 91       	ld	r27, X
    2a08:	a0 2d       	mov	r26, r0
    2a0a:	24 81       	ldd	r18, Z+4	; 0x04
    2a0c:	35 81       	ldd	r19, Z+5	; 0x05
    2a0e:	46 81       	ldd	r20, Z+6	; 0x06
    2a10:	57 81       	ldd	r21, Z+7	; 0x07
    2a12:	28 17       	cp	r18, r24
    2a14:	39 07       	cpc	r19, r25
    2a16:	4a 07       	cpc	r20, r26
    2a18:	5b 07       	cpc	r21, r27
    2a1a:	18 f4       	brcc	.+6      	; 0x2a22 <__fpcmp_parts_f+0x8e>
    2a1c:	11 23       	and	r17, r17
    2a1e:	41 f0       	breq	.+16     	; 0x2a30 <__fpcmp_parts_f+0x9c>
    2a20:	0a c0       	rjmp	.+20     	; 0x2a36 <__fpcmp_parts_f+0xa2>
    2a22:	82 17       	cp	r24, r18
    2a24:	93 07       	cpc	r25, r19
    2a26:	a4 07       	cpc	r26, r20
    2a28:	b5 07       	cpc	r27, r21
    2a2a:	40 f4       	brcc	.+16     	; 0x2a3c <__fpcmp_parts_f+0xa8>
    2a2c:	11 23       	and	r17, r17
    2a2e:	19 f0       	breq	.+6      	; 0x2a36 <__fpcmp_parts_f+0xa2>
    2a30:	61 e0       	ldi	r22, 0x01	; 1
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	05 c0       	rjmp	.+10     	; 0x2a40 <__fpcmp_parts_f+0xac>
    2a36:	6f ef       	ldi	r22, 0xFF	; 255
    2a38:	7f ef       	ldi	r23, 0xFF	; 255
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <__fpcmp_parts_f+0xac>
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	cb 01       	movw	r24, r22
    2a42:	1f 91       	pop	r17
    2a44:	08 95       	ret

00002a46 <TIM0_u8SetConfigurations>:
static u8 Prescaler_value = 0;
static u8 u8_TimerState = 0;
void TIM0_voidInit(void);

u8 TIM0_u8SetConfigurations(const TIM0_Config_t * Copy_structTimerConfigurations)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <TIM0_u8SetConfigurations+0x6>
    2a4c:	0f 92       	push	r0
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	9b 83       	std	Y+3, r25	; 0x03
    2a54:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_ErrorState = STD_OK;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_structTimerConfigurations != NULL)
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <TIM0_u8SetConfigurations+0x1e>
    2a62:	42 c0       	rjmp	.+132    	; 0x2ae8 <TIM0_u8SetConfigurations+0xa2>
	{
		TCCR0 |= Copy_structTimerConfigurations->TIMER0_Mode | Copy_structTimerConfigurations->TIMER0_COMPARE_OUTPUT;
    2a64:	a3 e5       	ldi	r26, 0x53	; 83
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e3 e5       	ldi	r30, 0x53	; 83
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	20 81       	ld	r18, Z
    2a6e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a70:	fb 81       	ldd	r31, Y+3	; 0x03
    2a72:	90 81       	ld	r25, Z
    2a74:	ea 81       	ldd	r30, Y+2	; 0x02
    2a76:	fb 81       	ldd	r31, Y+3	; 0x03
    2a78:	84 81       	ldd	r24, Z+4	; 0x04
    2a7a:	89 2b       	or	r24, r25
    2a7c:	82 2b       	or	r24, r18
    2a7e:	8c 93       	st	X, r24
		TIMSK |= Copy_structTimerConfigurations->TIMER0_Interrupt | Copy_structTimerConfigurations->TIMER_COMP_INTERRUPT;
    2a80:	a9 e5       	ldi	r26, 0x59	; 89
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e9 e5       	ldi	r30, 0x59	; 89
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	20 81       	ld	r18, Z
    2a8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a8e:	92 81       	ldd	r25, Z+2	; 0x02
    2a90:	ea 81       	ldd	r30, Y+2	; 0x02
    2a92:	fb 81       	ldd	r31, Y+3	; 0x03
    2a94:	83 81       	ldd	r24, Z+3	; 0x03
    2a96:	89 2b       	or	r24, r25
    2a98:	82 2b       	or	r24, r18
    2a9a:	8c 93       	st	X, r24
		Prescaler_value = Copy_structTimerConfigurations->TIMER0_CLOCK_SELECT;
    2a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2aa0:	81 81       	ldd	r24, Z+1	; 0x01
    2aa2:	80 93 ba 02 	sts	0x02BA, r24
		if (Copy_structTimerConfigurations->OVF_CALLBACK != NULL)
    2aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    2aa8:	fb 81       	ldd	r31, Y+3	; 0x03
    2aaa:	85 81       	ldd	r24, Z+5	; 0x05
    2aac:	96 81       	ldd	r25, Z+6	; 0x06
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	49 f0       	breq	.+18     	; 0x2ac4 <TIM0_u8SetConfigurations+0x7e>
		{
			TIMER0_OVF_CALLBACK = Copy_structTimerConfigurations->OVF_CALLBACK;
    2ab2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab6:	85 81       	ldd	r24, Z+5	; 0x05
    2ab8:	96 81       	ldd	r25, Z+6	; 0x06
    2aba:	90 93 b7 02 	sts	0x02B7, r25
    2abe:	80 93 b6 02 	sts	0x02B6, r24
    2ac2:	01 c0       	rjmp	.+2      	; 0x2ac6 <TIM0_u8SetConfigurations+0x80>
		}
		else
		{
			LOC_ErrorState = STD_NOK;
    2ac4:	19 82       	std	Y+1, r1	; 0x01
		}
		if (Copy_structTimerConfigurations->COMP_CALLBACK != NULL)
    2ac6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ac8:	fb 81       	ldd	r31, Y+3	; 0x03
    2aca:	87 81       	ldd	r24, Z+7	; 0x07
    2acc:	90 85       	ldd	r25, Z+8	; 0x08
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	49 f0       	breq	.+18     	; 0x2ae4 <TIM0_u8SetConfigurations+0x9e>
		{
			TIMER0_COMP_CALLBACK = Copy_structTimerConfigurations->COMP_CALLBACK;
    2ad2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ad4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ad6:	87 81       	ldd	r24, Z+7	; 0x07
    2ad8:	90 85       	ldd	r25, Z+8	; 0x08
    2ada:	90 93 b9 02 	sts	0x02B9, r25
    2ade:	80 93 b8 02 	sts	0x02B8, r24
    2ae2:	03 c0       	rjmp	.+6      	; 0x2aea <TIM0_u8SetConfigurations+0xa4>
		}
		else
		{
			LOC_ErrorState = STD_NOK;
    2ae4:	19 82       	std	Y+1, r1	; 0x01
    2ae6:	01 c0       	rjmp	.+2      	; 0x2aea <TIM0_u8SetConfigurations+0xa4>
		}
	}
	else
	{
		LOC_ErrorState = STD_NOK;
    2ae8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_ErrorState;
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <TIM0_u8Set_CompareRegister_Value>:

void TIM0_u8Set_CompareRegister_Value(u8 Copy_u8Counts)
{
    2af8:	df 93       	push	r29
    2afa:	cf 93       	push	r28
    2afc:	0f 92       	push	r0
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Counts;
    2b04:	ec e5       	ldi	r30, 0x5C	; 92
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	80 83       	st	Z, r24
}
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <TIM0_u8Set_CounterRegister_Value>:
void TIM0_u8Set_CounterRegister_Value(u8 Copy_u8Counts)
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	0f 92       	push	r0
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Counts;
    2b20:	e2 e5       	ldi	r30, 0x52	; 82
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	80 83       	st	Z, r24
}
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <TIM0_u8Get_CounterRegister_Value>:

u8 TIM0_u8Get_CounterRegister_Value(u8 * Copy_ptrData)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <TIM0_u8Get_CounterRegister_Value+0x6>
    2b36:	0f 92       	push	r0
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	9b 83       	std	Y+3, r25	; 0x03
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_ErrorState = STD_OK;
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_ptrData != NULL)
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
    2b46:	9b 81       	ldd	r25, Y+3	; 0x03
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	39 f0       	breq	.+14     	; 0x2b5a <TIM0_u8Get_CounterRegister_Value+0x2a>
	{
		*Copy_ptrData = TCNT0;
    2b4c:	e2 e5       	ldi	r30, 0x52	; 82
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	ea 81       	ldd	r30, Y+2	; 0x02
    2b54:	fb 81       	ldd	r31, Y+3	; 0x03
    2b56:	80 83       	st	Z, r24
    2b58:	01 c0       	rjmp	.+2      	; 0x2b5c <TIM0_u8Get_CounterRegister_Value+0x2c>
	}
	else
	{
		LOC_ErrorState = STD_NOK;
    2b5a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_ErrorState;
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <TIM0_Disable>:
void TIM0_Disable(void)
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~ ( 0b111);
    2b72:	a3 e5       	ldi	r26, 0x53	; 83
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	e3 e5       	ldi	r30, 0x53	; 83
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	88 7f       	andi	r24, 0xF8	; 248
    2b7e:	8c 93       	st	X, r24
	u8_TimerState = 0;
    2b80:	10 92 bb 02 	sts	0x02BB, r1
}
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <TIM0_Enable>:
void TIM0_Enable(void)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62

	if( u8_TimerState == 0 )
    2b92:	80 91 bb 02 	lds	r24, 0x02BB
    2b96:	88 23       	and	r24, r24
    2b98:	99 f4       	brne	.+38     	; 0x2bc0 <TIM0_Enable+0x36>
	{
		TCCR0 &= ~ ( 0b111);
    2b9a:	a3 e5       	ldi	r26, 0x53	; 83
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e3 e5       	ldi	r30, 0x53	; 83
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	88 7f       	andi	r24, 0xF8	; 248
    2ba6:	8c 93       	st	X, r24
		TCCR0 |= Prescaler_value;
    2ba8:	a3 e5       	ldi	r26, 0x53	; 83
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e3 e5       	ldi	r30, 0x53	; 83
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	90 81       	ld	r25, Z
    2bb2:	80 91 ba 02 	lds	r24, 0x02BA
    2bb6:	89 2b       	or	r24, r25
    2bb8:	8c 93       	st	X, r24
		u8_TimerState = 1;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	80 93 bb 02 	sts	0x02BB, r24
	}
	else
	{

	}
}
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <__vector_11>:
void __vector_11(void)
{
    2bc6:	1f 92       	push	r1
    2bc8:	0f 92       	push	r0
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	0f 92       	push	r0
    2bce:	11 24       	eor	r1, r1
    2bd0:	2f 93       	push	r18
    2bd2:	3f 93       	push	r19
    2bd4:	4f 93       	push	r20
    2bd6:	5f 93       	push	r21
    2bd8:	6f 93       	push	r22
    2bda:	7f 93       	push	r23
    2bdc:	8f 93       	push	r24
    2bde:	9f 93       	push	r25
    2be0:	af 93       	push	r26
    2be2:	bf 93       	push	r27
    2be4:	ef 93       	push	r30
    2be6:	ff 93       	push	r31
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CALLBACK != NULL)
    2bf0:	80 91 b6 02 	lds	r24, 0x02B6
    2bf4:	90 91 b7 02 	lds	r25, 0x02B7
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	29 f0       	breq	.+10     	; 0x2c06 <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
    2bfc:	e0 91 b6 02 	lds	r30, 0x02B6
    2c00:	f0 91 b7 02 	lds	r31, 0x02B7
    2c04:	09 95       	icall
	}
}
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	ff 91       	pop	r31
    2c0c:	ef 91       	pop	r30
    2c0e:	bf 91       	pop	r27
    2c10:	af 91       	pop	r26
    2c12:	9f 91       	pop	r25
    2c14:	8f 91       	pop	r24
    2c16:	7f 91       	pop	r23
    2c18:	6f 91       	pop	r22
    2c1a:	5f 91       	pop	r21
    2c1c:	4f 91       	pop	r20
    2c1e:	3f 91       	pop	r19
    2c20:	2f 91       	pop	r18
    2c22:	0f 90       	pop	r0
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	0f 90       	pop	r0
    2c28:	1f 90       	pop	r1
    2c2a:	18 95       	reti

00002c2c <__vector_10>:
void __vector_10(void)
{
    2c2c:	1f 92       	push	r1
    2c2e:	0f 92       	push	r0
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	0f 92       	push	r0
    2c34:	11 24       	eor	r1, r1
    2c36:	2f 93       	push	r18
    2c38:	3f 93       	push	r19
    2c3a:	4f 93       	push	r20
    2c3c:	5f 93       	push	r21
    2c3e:	6f 93       	push	r22
    2c40:	7f 93       	push	r23
    2c42:	8f 93       	push	r24
    2c44:	9f 93       	push	r25
    2c46:	af 93       	push	r26
    2c48:	bf 93       	push	r27
    2c4a:	ef 93       	push	r30
    2c4c:	ff 93       	push	r31
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_COMP_CALLBACK != NULL)
    2c56:	80 91 b8 02 	lds	r24, 0x02B8
    2c5a:	90 91 b9 02 	lds	r25, 0x02B9
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	29 f0       	breq	.+10     	; 0x2c6c <__vector_10+0x40>
	{
		TIMER0_COMP_CALLBACK();
    2c62:	e0 91 b8 02 	lds	r30, 0x02B8
    2c66:	f0 91 b9 02 	lds	r31, 0x02B9
    2c6a:	09 95       	icall
	}
}
    2c6c:	cf 91       	pop	r28
    2c6e:	df 91       	pop	r29
    2c70:	ff 91       	pop	r31
    2c72:	ef 91       	pop	r30
    2c74:	bf 91       	pop	r27
    2c76:	af 91       	pop	r26
    2c78:	9f 91       	pop	r25
    2c7a:	8f 91       	pop	r24
    2c7c:	7f 91       	pop	r23
    2c7e:	6f 91       	pop	r22
    2c80:	5f 91       	pop	r21
    2c82:	4f 91       	pop	r20
    2c84:	3f 91       	pop	r19
    2c86:	2f 91       	pop	r18
    2c88:	0f 90       	pop	r0
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	0f 90       	pop	r0
    2c8e:	1f 90       	pop	r1
    2c90:	18 95       	reti

00002c92 <SPI_u8SetMasterConfigs>:
#include "SPI_private.h"

void SPI_voidSPIInit(void);

u8 SPI_u8SetMasterConfigs(const SPI_MasterConfigs_t * Copy_structSpiConfigurations)
{
    2c92:	df 93       	push	r29
    2c94:	cf 93       	push	r28
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <SPI_u8SetMasterConfigs+0x6>
    2c98:	0f 92       	push	r0
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	9b 83       	std	Y+3, r25	; 0x03
    2ca0:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loacal_u8ErrorState = STD_OK;
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_structSpiConfigurations != NULL )
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <SPI_u8SetMasterConfigs+0x1e>
    2cae:	4c c0       	rjmp	.+152    	; 0x2d48 <SPI_u8SetMasterConfigs+0xb6>
	{
		SPCR = 0x00;
    2cb0:	ed e2       	ldi	r30, 0x2D	; 45
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	10 82       	st	Z, r1
		SPSR = 0x00;
    2cb6:	ee e2       	ldi	r30, 0x2E	; 46
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	10 82       	st	Z, r1
		/* Disable SPI */
		CLR_BIT(SPCR , SPE);
    2cbc:	ad e2       	ldi	r26, 0x2D	; 45
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	ed e2       	ldi	r30, 0x2D	; 45
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8f 7b       	andi	r24, 0xBF	; 191
    2cc8:	8c 93       	st	X, r24
		SPCR |= Copy_structSpiConfigurations->Mode |Copy_structSpiConfigurations->Spi_ClockPhase | Copy_structSpiConfigurations->Spi_ClockPolarity | Copy_structSpiConfigurations->Spi_DataOrder | Copy_structSpiConfigurations->Spi_Interrupt;
    2cca:	ad e2       	ldi	r26, 0x2D	; 45
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	ed e2       	ldi	r30, 0x2D	; 45
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	20 81       	ld	r18, Z
    2cd4:	ea 81       	ldd	r30, Y+2	; 0x02
    2cd6:	fb 81       	ldd	r31, Y+3	; 0x03
    2cd8:	90 81       	ld	r25, Z
    2cda:	ea 81       	ldd	r30, Y+2	; 0x02
    2cdc:	fb 81       	ldd	r31, Y+3	; 0x03
    2cde:	83 81       	ldd	r24, Z+3	; 0x03
    2ce0:	98 2b       	or	r25, r24
    2ce2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce6:	82 81       	ldd	r24, Z+2	; 0x02
    2ce8:	98 2b       	or	r25, r24
    2cea:	ea 81       	ldd	r30, Y+2	; 0x02
    2cec:	fb 81       	ldd	r31, Y+3	; 0x03
    2cee:	84 81       	ldd	r24, Z+4	; 0x04
    2cf0:	98 2b       	or	r25, r24
    2cf2:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf4:	fb 81       	ldd	r31, Y+3	; 0x03
    2cf6:	85 81       	ldd	r24, Z+5	; 0x05
    2cf8:	89 2b       	or	r24, r25
    2cfa:	82 2b       	or	r24, r18
    2cfc:	8c 93       	st	X, r24
		SPCR |= ( ( Copy_structSpiConfigurations->Spi_Speed ) & 0x03);
    2cfe:	ad e2       	ldi	r26, 0x2D	; 45
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	ed e2       	ldi	r30, 0x2D	; 45
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	98 2f       	mov	r25, r24
    2d0a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d0c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d0e:	81 81       	ldd	r24, Z+1	; 0x01
    2d10:	83 70       	andi	r24, 0x03	; 3
    2d12:	89 2b       	or	r24, r25
    2d14:	8c 93       	st	X, r24
		SPSR |=	GET_BIT(Copy_structSpiConfigurations->Spi_Speed , 2) ;
    2d16:	ae e2       	ldi	r26, 0x2E	; 46
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ee e2       	ldi	r30, 0x2E	; 46
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	98 2f       	mov	r25, r24
    2d22:	ea 81       	ldd	r30, Y+2	; 0x02
    2d24:	fb 81       	ldd	r31, Y+3	; 0x03
    2d26:	81 81       	ldd	r24, Z+1	; 0x01
    2d28:	86 95       	lsr	r24
    2d2a:	86 95       	lsr	r24
    2d2c:	81 70       	andi	r24, 0x01	; 1
    2d2e:	89 2b       	or	r24, r25
    2d30:	8c 93       	st	X, r24
		SPCR |= Copy_structSpiConfigurations->Spi_State;
    2d32:	ad e2       	ldi	r26, 0x2D	; 45
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	ed e2       	ldi	r30, 0x2D	; 45
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	90 81       	ld	r25, Z
    2d3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d40:	86 81       	ldd	r24, Z+6	; 0x06
    2d42:	89 2b       	or	r24, r25
    2d44:	8c 93       	st	X, r24
    2d46:	01 c0       	rjmp	.+2      	; 0x2d4a <SPI_u8SetMasterConfigs+0xb8>
	}
	else
	{
		Loacal_u8ErrorState = STD_NOK;
    2d48:	19 82       	std	Y+1, r1	; 0x01
	}
	return (Loacal_u8ErrorState);
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <SPI_u8SetSlaveConfigs>:

u8 SPI_u8SetSlaveConfigs(const SPI_SlaveConfigs_t * Copy_structSpiConfigurations)
{
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <SPI_u8SetSlaveConfigs+0x6>
    2d5e:	0f 92       	push	r0
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	9b 83       	std	Y+3, r25	; 0x03
    2d66:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loacal_u8ErrorState = STD_OK;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_structSpiConfigurations != NULL )
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	79 f1       	breq	.+94     	; 0x2dd2 <SPI_u8SetSlaveConfigs+0x7a>
	{
		SPCR = 0x00;
    2d74:	ed e2       	ldi	r30, 0x2D	; 45
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	10 82       	st	Z, r1
		/* Disable SPI */
		CLR_BIT(SPCR , SPE);
    2d7a:	ad e2       	ldi	r26, 0x2D	; 45
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	ed e2       	ldi	r30, 0x2D	; 45
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	8f 7b       	andi	r24, 0xBF	; 191
    2d86:	8c 93       	st	X, r24
		SPCR |= Copy_structSpiConfigurations->Mode |Copy_structSpiConfigurations->Spi_ClockPhase | Copy_structSpiConfigurations->Spi_ClockPolarity | Copy_structSpiConfigurations->Spi_DataOrder | Copy_structSpiConfigurations->Spi_Interrupt;
    2d88:	ad e2       	ldi	r26, 0x2D	; 45
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	ed e2       	ldi	r30, 0x2D	; 45
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	20 81       	ld	r18, Z
    2d92:	ea 81       	ldd	r30, Y+2	; 0x02
    2d94:	fb 81       	ldd	r31, Y+3	; 0x03
    2d96:	90 81       	ld	r25, Z
    2d98:	ea 81       	ldd	r30, Y+2	; 0x02
    2d9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9c:	82 81       	ldd	r24, Z+2	; 0x02
    2d9e:	98 2b       	or	r25, r24
    2da0:	ea 81       	ldd	r30, Y+2	; 0x02
    2da2:	fb 81       	ldd	r31, Y+3	; 0x03
    2da4:	81 81       	ldd	r24, Z+1	; 0x01
    2da6:	98 2b       	or	r25, r24
    2da8:	ea 81       	ldd	r30, Y+2	; 0x02
    2daa:	fb 81       	ldd	r31, Y+3	; 0x03
    2dac:	83 81       	ldd	r24, Z+3	; 0x03
    2dae:	98 2b       	or	r25, r24
    2db0:	ea 81       	ldd	r30, Y+2	; 0x02
    2db2:	fb 81       	ldd	r31, Y+3	; 0x03
    2db4:	84 81       	ldd	r24, Z+4	; 0x04
    2db6:	89 2b       	or	r24, r25
    2db8:	82 2b       	or	r24, r18
    2dba:	8c 93       	st	X, r24
		SPCR |= Copy_structSpiConfigurations->Spi_State;
    2dbc:	ad e2       	ldi	r26, 0x2D	; 45
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	ed e2       	ldi	r30, 0x2D	; 45
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	90 81       	ld	r25, Z
    2dc6:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc8:	fb 81       	ldd	r31, Y+3	; 0x03
    2dca:	85 81       	ldd	r24, Z+5	; 0x05
    2dcc:	89 2b       	or	r24, r25
    2dce:	8c 93       	st	X, r24
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <SPI_u8SetSlaveConfigs+0x7c>
	}
	else
	{
		Loacal_u8ErrorState = STD_NOK;
    2dd2:	19 82       	std	Y+1, r1	; 0x01
	}
	return (Loacal_u8ErrorState);
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01

}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <SPI_u8TransmitReceive>:
u8 SPI_u8TransmitReceive(u8 Copy_u8Data)
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	0f 92       	push	r0
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	89 83       	std	Y+1, r24	; 0x01
//	u8 Local_u8ErrorState = STD_OK;

	SPDR = Copy_u8Data;
    2dee:	ef e2       	ldi	r30, 0x2F	; 47
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	80 83       	st	Z, r24
	while( !(SPSR & (1<<SPIF)) );
    2df6:	ee e2       	ldi	r30, 0x2E	; 46
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	88 23       	and	r24, r24
    2dfe:	dc f7       	brge	.-10     	; 0x2df6 <SPI_u8TransmitReceive+0x14>
//	}
//	else
//	{
//		Local_u8ErrorState = STD_NOK;
//	}
	return SPDR;
    2e00:	ef e2       	ldi	r30, 0x2F	; 47
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
}
    2e06:	0f 90       	pop	r0
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIR_config.h"
#include "GIE_private.h"

void GIE_voidEnable(void)
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( SREG , GIE );
    2e16:	af e5       	ldi	r26, 0x5F	; 95
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	ef e5       	ldi	r30, 0x5F	; 95
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	80 68       	ori	r24, 0x80	; 128
    2e22:	8c 93       	st	X, r24
}
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( SREG , GIE );
    2e32:	af e5       	ldi	r26, 0x5F	; 95
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	ef e5       	ldi	r30, 0x5F	; 95
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	8f 77       	andi	r24, 0x7F	; 127
    2e3e:	8c 93       	st	X, r24
}
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <EEPROM_voidWriteByte>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidWriteByte	(u16 Copy_u16ByteAddress, u8 Copy_u8DataValue						)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <EEPROM_voidWriteByte+0x6>
    2e4c:	0f 92       	push	r0
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	9a 83       	std	Y+2, r25	; 0x02
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	6b 83       	std	Y+3, r22	; 0x03
	/* wait for the EEPROM to be ready for the next Write  */
	while ( GET_BIT(EECR, EEWE) == 1);
    2e58:	ec e3       	ldi	r30, 0x3C	; 60
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	86 95       	lsr	r24
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	81 70       	andi	r24, 0x01	; 1
    2e66:	90 70       	andi	r25, 0x00	; 0
    2e68:	88 23       	and	r24, r24
    2e6a:	b1 f7       	brne	.-20     	; 0x2e58 <EEPROM_voidWriteByte+0x12>
	/* Set the address  */
	EEAR = (Copy_u16ByteAddress);
    2e6c:	ee e3       	ldi	r30, 0x3E	; 62
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	9a 81       	ldd	r25, Y+2	; 0x02
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	80 83       	st	Z, r24
	/* write the Data to the Data Register  */
	EEDR = Copy_u8DataValue;
    2e78:	ed e3       	ldi	r30, 0x3D	; 61
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	80 83       	st	Z, r24
	/* Write '1' to the EEMWE bit */
	asm("SBI 0x1C,2");
    2e80:	e2 9a       	sbi	0x1c, 2	; 28
	//EECR |= (1 << EEMWE); = //SET_BIT(EECR,EEMWE);

	/*Starting write operation*/
	/* Write '1' to the EEWE */
	asm("SBI 0x1C,1");
    2e82:	e1 9a       	sbi	0x1c, 1	; 28
	//EECR |= (1 << EEWE); = //SET_BIT(EECR,EEWE);

}
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret

00002e90 <EEPROM_voidWriteBlock>:

void EEPROM_voidWriteBlock	(u16 Copy_u16ByteAddress, u8 Copy_u8BlockSize, u8 * Copy_PtrData	)
{
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <EEPROM_voidWriteBlock+0x6>
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <EEPROM_voidWriteBlock+0x8>
    2e98:	00 d0       	rcall	.+0      	; 0x2e9a <EEPROM_voidWriteBlock+0xa>
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	9b 83       	std	Y+3, r25	; 0x03
    2ea0:	8a 83       	std	Y+2, r24	; 0x02
    2ea2:	6c 83       	std	Y+4, r22	; 0x04
    2ea4:	5e 83       	std	Y+6, r21	; 0x06
    2ea6:	4d 83       	std	Y+5, r20	; 0x05
	u8 LOC_LoopIterartor = 0;
    2ea8:	19 82       	std	Y+1, r1	; 0x01
	for(LOC_LoopIterartor = 0; LOC_LoopIterartor < Copy_u8BlockSize; LOC_LoopIterartor++)
    2eaa:	19 82       	std	Y+1, r1	; 0x01
    2eac:	18 c0       	rjmp	.+48     	; 0x2ede <EEPROM_voidWriteBlock+0x4e>
	{
		EEPROM_voidWriteByte( (Copy_u16ByteAddress + LOC_LoopIterartor), Copy_PtrData[LOC_LoopIterartor]);
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb8:	a9 01       	movw	r20, r18
    2eba:	48 0f       	add	r20, r24
    2ebc:	59 1f       	adc	r21, r25
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	28 2f       	mov	r18, r24
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec8:	fc 01       	movw	r30, r24
    2eca:	e2 0f       	add	r30, r18
    2ecc:	f3 1f       	adc	r31, r19
    2ece:	20 81       	ld	r18, Z
    2ed0:	ca 01       	movw	r24, r20
    2ed2:	62 2f       	mov	r22, r18
    2ed4:	0e 94 23 17 	call	0x2e46	; 0x2e46 <EEPROM_voidWriteByte>
}

void EEPROM_voidWriteBlock	(u16 Copy_u16ByteAddress, u8 Copy_u8BlockSize, u8 * Copy_PtrData	)
{
	u8 LOC_LoopIterartor = 0;
	for(LOC_LoopIterartor = 0; LOC_LoopIterartor < Copy_u8BlockSize; LOC_LoopIterartor++)
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	8f 5f       	subi	r24, 0xFF	; 255
    2edc:	89 83       	std	Y+1, r24	; 0x01
    2ede:	99 81       	ldd	r25, Y+1	; 0x01
    2ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee2:	98 17       	cp	r25, r24
    2ee4:	20 f3       	brcs	.-56     	; 0x2eae <EEPROM_voidWriteBlock+0x1e>
	{
		EEPROM_voidWriteByte( (Copy_u16ByteAddress + LOC_LoopIterartor), Copy_PtrData[LOC_LoopIterartor]);
	}

}
    2ee6:	26 96       	adiw	r28, 0x06	; 6
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <EEPROM_voidReadByte>:

void EEPROM_voidReadByte		(u16 Copy_u16ByteAddress, u8 *Copy_ptrReturnDataValue				)
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <EEPROM_voidReadByte+0x6>
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <EEPROM_voidReadByte+0x8>
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	9a 83       	std	Y+2, r25	; 0x02
    2f06:	89 83       	std	Y+1, r24	; 0x01
    2f08:	7c 83       	std	Y+4, r23	; 0x04
    2f0a:	6b 83       	std	Y+3, r22	; 0x03
	/* wait the previous write operation is done  */
	while(GET_BIT(EECR, EEWE) == 1);
    2f0c:	ec e3       	ldi	r30, 0x3C	; 60
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	86 95       	lsr	r24
    2f14:	88 2f       	mov	r24, r24
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	81 70       	andi	r24, 0x01	; 1
    2f1a:	90 70       	andi	r25, 0x00	; 0
    2f1c:	88 23       	and	r24, r24
    2f1e:	b1 f7       	brne	.-20     	; 0x2f0c <EEPROM_voidReadByte+0x14>
	/* Write the address  */
	EEAR = Copy_u16ByteAddress ;
    2f20:	ee e3       	ldi	r30, 0x3E	; 62
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	9a 81       	ldd	r25, Y+2	; 0x02
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
	/* Start Read Operation */
	EECR |= (1<<EERE);
    2f2c:	ac e3       	ldi	r26, 0x3C	; 60
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	ec e3       	ldi	r30, 0x3C	; 60
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	81 60       	ori	r24, 0x01	; 1
    2f38:	8c 93       	st	X, r24
	/* Return Data to the pointer */
	*Copy_ptrReturnDataValue = EEDR;
    2f3a:	ed e3       	ldi	r30, 0x3D	; 61
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	80 81       	ld	r24, Z
    2f40:	eb 81       	ldd	r30, Y+3	; 0x03
    2f42:	fc 81       	ldd	r31, Y+4	; 0x04
    2f44:	80 83       	st	Z, r24
}
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <EEPROM_voidReadBlock>:

void EEPROM_voidReadBlock		(u16 Copy_u16ByteAddress, u8 Copy_u8BlockSize , u8 *Copy_ptrReturnDataValue)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <EEPROM_voidReadBlock+0x6>
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <EEPROM_voidReadBlock+0x8>
    2f5c:	00 d0       	rcall	.+0      	; 0x2f5e <EEPROM_voidReadBlock+0xa>
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	9b 83       	std	Y+3, r25	; 0x03
    2f64:	8a 83       	std	Y+2, r24	; 0x02
    2f66:	6c 83       	std	Y+4, r22	; 0x04
    2f68:	5e 83       	std	Y+6, r21	; 0x06
    2f6a:	4d 83       	std	Y+5, r20	; 0x05
	u8 LOC_LoopIterator = 0;
    2f6c:	19 82       	std	Y+1, r1	; 0x01
	for(LOC_LoopIterator = 0; LOC_LoopIterator<Copy_u8BlockSize; LOC_LoopIterator++)
    2f6e:	19 82       	std	Y+1, r1	; 0x01
    2f70:	16 c0       	rjmp	.+44     	; 0x2f9e <EEPROM_voidReadBlock+0x4a>
	{
		EEPROM_voidReadByte( ( Copy_u16ByteAddress + LOC_LoopIterator ), ( Copy_ptrReturnDataValue + LOC_LoopIterator ) );
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	28 2f       	mov	r18, r24
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7c:	a9 01       	movw	r20, r18
    2f7e:	48 0f       	add	r20, r24
    2f80:	59 1f       	adc	r21, r25
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8c:	28 0f       	add	r18, r24
    2f8e:	39 1f       	adc	r19, r25
    2f90:	ca 01       	movw	r24, r20
    2f92:	b9 01       	movw	r22, r18
    2f94:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <EEPROM_voidReadByte>
}

void EEPROM_voidReadBlock		(u16 Copy_u16ByteAddress, u8 Copy_u8BlockSize , u8 *Copy_ptrReturnDataValue)
{
	u8 LOC_LoopIterator = 0;
	for(LOC_LoopIterator = 0; LOC_LoopIterator<Copy_u8BlockSize; LOC_LoopIterator++)
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	8f 5f       	subi	r24, 0xFF	; 255
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	99 81       	ldd	r25, Y+1	; 0x01
    2fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa2:	98 17       	cp	r25, r24
    2fa4:	30 f3       	brcs	.-52     	; 0x2f72 <EEPROM_voidReadBlock+0x1e>
	{
		EEPROM_voidReadByte( ( Copy_u16ByteAddress + LOC_LoopIterator ), ( Copy_ptrReturnDataValue + LOC_LoopIterator ) );
	}
}
    2fa6:	26 96       	adiw	r28, 0x06	; 6
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <GPIO_voidSetPinDir>:
/**         *@param[in]	u8 Copy_u8PinNum  { 0 to 7  }																*/
/**         *@param[in]	u8 Copy_u8Direction { INPUT , OUTPUT }														*/
/**         *@param[out] void																						*/
/*-----------------------------------------------------------------------------------------------------------------	*/
void GPIO_voidSetPinDir(u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8Direction)
{
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	2d 97       	sbiw	r28, 0x0d	; 13
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	6a 83       	std	Y+2, r22	; 0x02
    2fd0:	4b 83       	std	Y+3, r20	; 0x03
	
	switch(Copy_u8PortNum)
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	28 2f       	mov	r18, r24
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	3d 87       	std	Y+13, r19	; 0x0d
    2fda:	2c 87       	std	Y+12, r18	; 0x0c
    2fdc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fde:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fe0:	81 30       	cpi	r24, 0x01	; 1
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <GPIO_voidSetPinDir+0x30>
    2fe6:	4f c0       	rjmp	.+158    	; 0x3086 <GPIO_voidSetPinDir+0xce>
    2fe8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fea:	3d 85       	ldd	r19, Y+13	; 0x0d
    2fec:	22 30       	cpi	r18, 0x02	; 2
    2fee:	31 05       	cpc	r19, r1
    2ff0:	2c f4       	brge	.+10     	; 0x2ffc <GPIO_voidSetPinDir+0x44>
    2ff2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ff4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	71 f0       	breq	.+28     	; 0x3016 <GPIO_voidSetPinDir+0x5e>
    2ffa:	ec c0       	rjmp	.+472    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
    2ffc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ffe:	3d 85       	ldd	r19, Y+13	; 0x0d
    3000:	22 30       	cpi	r18, 0x02	; 2
    3002:	31 05       	cpc	r19, r1
    3004:	09 f4       	brne	.+2      	; 0x3008 <GPIO_voidSetPinDir+0x50>
    3006:	77 c0       	rjmp	.+238    	; 0x30f6 <GPIO_voidSetPinDir+0x13e>
    3008:	8c 85       	ldd	r24, Y+12	; 0x0c
    300a:	9d 85       	ldd	r25, Y+13	; 0x0d
    300c:	83 30       	cpi	r24, 0x03	; 3
    300e:	91 05       	cpc	r25, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <GPIO_voidSetPinDir+0x5c>
    3012:	a9 c0       	rjmp	.+338    	; 0x3166 <GPIO_voidSetPinDir+0x1ae>
    3014:	df c0       	rjmp	.+446    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
	{
		
		case GPIOA :
			switch (Copy_u8Direction)  
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	3b 87       	std	Y+11, r19	; 0x0b
    301e:	2a 87       	std	Y+10, r18	; 0x0a
    3020:	8a 85       	ldd	r24, Y+10	; 0x0a
    3022:	9b 85       	ldd	r25, Y+11	; 0x0b
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	31 f0       	breq	.+12     	; 0x3034 <GPIO_voidSetPinDir+0x7c>
    3028:	2a 85       	ldd	r18, Y+10	; 0x0a
    302a:	3b 85       	ldd	r19, Y+11	; 0x0b
    302c:	21 30       	cpi	r18, 0x01	; 1
    302e:	31 05       	cpc	r19, r1
    3030:	b1 f0       	breq	.+44     	; 0x305e <GPIO_voidSetPinDir+0xa6>
    3032:	d0 c0       	rjmp	.+416    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
			{
				
				case INPUT  : CLR_BIT(DDRA,Copy_u8PinNum);  break;  
    3034:	aa e3       	ldi	r26, 0x3A	; 58
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	ea e3       	ldi	r30, 0x3A	; 58
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	48 2f       	mov	r20, r24
    3040:	8a 81       	ldd	r24, Y+2	; 0x02
    3042:	28 2f       	mov	r18, r24
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	02 2e       	mov	r0, r18
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <GPIO_voidSetPinDir+0x9a>
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	0a 94       	dec	r0
    3054:	e2 f7       	brpl	.-8      	; 0x304e <GPIO_voidSetPinDir+0x96>
    3056:	80 95       	com	r24
    3058:	84 23       	and	r24, r20
    305a:	8c 93       	st	X, r24
    305c:	bb c0       	rjmp	.+374    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
				case OUTPUT : SET_BIT(DDRA,Copy_u8PinNum);  break;
    305e:	aa e3       	ldi	r26, 0x3A	; 58
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	ea e3       	ldi	r30, 0x3A	; 58
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	48 2f       	mov	r20, r24
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	28 2f       	mov	r18, r24
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	02 2e       	mov	r0, r18
    3076:	02 c0       	rjmp	.+4      	; 0x307c <GPIO_voidSetPinDir+0xc4>
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	0a 94       	dec	r0
    307e:	e2 f7       	brpl	.-8      	; 0x3078 <GPIO_voidSetPinDir+0xc0>
    3080:	84 2b       	or	r24, r20
    3082:	8c 93       	st	X, r24
    3084:	a7 c0       	rjmp	.+334    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
				default     : /* return Error invalid option */ break;
			}
			break;
		case GPIOB :
			switch (Copy_u8Direction)
    3086:	8b 81       	ldd	r24, Y+3	; 0x03
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	39 87       	std	Y+9, r19	; 0x09
    308e:	28 87       	std	Y+8, r18	; 0x08
    3090:	88 85       	ldd	r24, Y+8	; 0x08
    3092:	99 85       	ldd	r25, Y+9	; 0x09
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	31 f0       	breq	.+12     	; 0x30a4 <GPIO_voidSetPinDir+0xec>
    3098:	28 85       	ldd	r18, Y+8	; 0x08
    309a:	39 85       	ldd	r19, Y+9	; 0x09
    309c:	21 30       	cpi	r18, 0x01	; 1
    309e:	31 05       	cpc	r19, r1
    30a0:	b1 f0       	breq	.+44     	; 0x30ce <GPIO_voidSetPinDir+0x116>
    30a2:	98 c0       	rjmp	.+304    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
			{
				case INPUT  : CLR_BIT(DDRB,Copy_u8PinNum); break;
    30a4:	a7 e3       	ldi	r26, 0x37	; 55
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e7 e3       	ldi	r30, 0x37	; 55
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	80 81       	ld	r24, Z
    30ae:	48 2f       	mov	r20, r24
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	02 2e       	mov	r0, r18
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <GPIO_voidSetPinDir+0x10a>
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	0a 94       	dec	r0
    30c4:	e2 f7       	brpl	.-8      	; 0x30be <GPIO_voidSetPinDir+0x106>
    30c6:	80 95       	com	r24
    30c8:	84 23       	and	r24, r20
    30ca:	8c 93       	st	X, r24
    30cc:	83 c0       	rjmp	.+262    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
				case OUTPUT : SET_BIT(DDRB,Copy_u8PinNum); break;
    30ce:	a7 e3       	ldi	r26, 0x37	; 55
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e7 e3       	ldi	r30, 0x37	; 55
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	48 2f       	mov	r20, r24
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	02 2e       	mov	r0, r18
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <GPIO_voidSetPinDir+0x134>
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	0a 94       	dec	r0
    30ee:	e2 f7       	brpl	.-8      	; 0x30e8 <GPIO_voidSetPinDir+0x130>
    30f0:	84 2b       	or	r24, r20
    30f2:	8c 93       	st	X, r24
    30f4:	6f c0       	rjmp	.+222    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOC :
			switch (Copy_u8Direction)
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	28 2f       	mov	r18, r24
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	3f 83       	std	Y+7, r19	; 0x07
    30fe:	2e 83       	std	Y+6, r18	; 0x06
    3100:	8e 81       	ldd	r24, Y+6	; 0x06
    3102:	9f 81       	ldd	r25, Y+7	; 0x07
    3104:	00 97       	sbiw	r24, 0x00	; 0
    3106:	31 f0       	breq	.+12     	; 0x3114 <GPIO_voidSetPinDir+0x15c>
    3108:	2e 81       	ldd	r18, Y+6	; 0x06
    310a:	3f 81       	ldd	r19, Y+7	; 0x07
    310c:	21 30       	cpi	r18, 0x01	; 1
    310e:	31 05       	cpc	r19, r1
    3110:	b1 f0       	breq	.+44     	; 0x313e <GPIO_voidSetPinDir+0x186>
    3112:	60 c0       	rjmp	.+192    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
			{
				case INPUT  : CLR_BIT(DDRC,Copy_u8PinNum); break;
    3114:	a4 e3       	ldi	r26, 0x34	; 52
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	e4 e3       	ldi	r30, 0x34	; 52
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	48 2f       	mov	r20, r24
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	28 2f       	mov	r18, r24
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	02 2e       	mov	r0, r18
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <GPIO_voidSetPinDir+0x17a>
    312e:	88 0f       	add	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	0a 94       	dec	r0
    3134:	e2 f7       	brpl	.-8      	; 0x312e <GPIO_voidSetPinDir+0x176>
    3136:	80 95       	com	r24
    3138:	84 23       	and	r24, r20
    313a:	8c 93       	st	X, r24
    313c:	4b c0       	rjmp	.+150    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
				case OUTPUT : SET_BIT(DDRC,Copy_u8PinNum); break;
    313e:	a4 e3       	ldi	r26, 0x34	; 52
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e4 e3       	ldi	r30, 0x34	; 52
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	48 2f       	mov	r20, r24
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	28 2f       	mov	r18, r24
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	02 2e       	mov	r0, r18
    3156:	02 c0       	rjmp	.+4      	; 0x315c <GPIO_voidSetPinDir+0x1a4>
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	0a 94       	dec	r0
    315e:	e2 f7       	brpl	.-8      	; 0x3158 <GPIO_voidSetPinDir+0x1a0>
    3160:	84 2b       	or	r24, r20
    3162:	8c 93       	st	X, r24
    3164:	37 c0       	rjmp	.+110    	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOD :
			switch (Copy_u8Direction)
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	28 2f       	mov	r18, r24
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	3d 83       	std	Y+5, r19	; 0x05
    316e:	2c 83       	std	Y+4, r18	; 0x04
    3170:	8c 81       	ldd	r24, Y+4	; 0x04
    3172:	9d 81       	ldd	r25, Y+5	; 0x05
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	31 f0       	breq	.+12     	; 0x3184 <GPIO_voidSetPinDir+0x1cc>
    3178:	2c 81       	ldd	r18, Y+4	; 0x04
    317a:	3d 81       	ldd	r19, Y+5	; 0x05
    317c:	21 30       	cpi	r18, 0x01	; 1
    317e:	31 05       	cpc	r19, r1
    3180:	b1 f0       	breq	.+44     	; 0x31ae <GPIO_voidSetPinDir+0x1f6>
    3182:	28 c0       	rjmp	.+80     	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
			{
				case INPUT  : CLR_BIT(DDRD,Copy_u8PinNum); break;
    3184:	a1 e3       	ldi	r26, 0x31	; 49
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e1 e3       	ldi	r30, 0x31	; 49
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	48 2f       	mov	r20, r24
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
    3192:	28 2f       	mov	r18, r24
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	02 2e       	mov	r0, r18
    319c:	02 c0       	rjmp	.+4      	; 0x31a2 <GPIO_voidSetPinDir+0x1ea>
    319e:	88 0f       	add	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	0a 94       	dec	r0
    31a4:	e2 f7       	brpl	.-8      	; 0x319e <GPIO_voidSetPinDir+0x1e6>
    31a6:	80 95       	com	r24
    31a8:	84 23       	and	r24, r20
    31aa:	8c 93       	st	X, r24
    31ac:	13 c0       	rjmp	.+38     	; 0x31d4 <GPIO_voidSetPinDir+0x21c>
				case OUTPUT : SET_BIT(DDRD,Copy_u8PinNum); break;
    31ae:	a1 e3       	ldi	r26, 0x31	; 49
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	e1 e3       	ldi	r30, 0x31	; 49
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	48 2f       	mov	r20, r24
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	02 2e       	mov	r0, r18
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <GPIO_voidSetPinDir+0x214>
    31c8:	88 0f       	add	r24, r24
    31ca:	99 1f       	adc	r25, r25
    31cc:	0a 94       	dec	r0
    31ce:	e2 f7       	brpl	.-8      	; 0x31c8 <GPIO_voidSetPinDir+0x210>
    31d0:	84 2b       	or	r24, r20
    31d2:	8c 93       	st	X, r24
			break;
			
		default : /* return Error */ break;
	}
	
}
    31d4:	2d 96       	adiw	r28, 0x0d	; 13
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <GPIO_voidSetPinVal>:
/* 		4- In case HIGH :write 1 to the corresponding pin num in PORTxn to make it input 							*/
/* 		The default if the direction was any thing other input or output it returns an error and break 				*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidSetPinVal(u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8Value)
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	2d 97       	sbiw	r28, 0x0d	; 13
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	6a 83       	std	Y+2, r22	; 0x02
    31fe:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortNum)
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	28 2f       	mov	r18, r24
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	3d 87       	std	Y+13, r19	; 0x0d
    3208:	2c 87       	std	Y+12, r18	; 0x0c
    320a:	8c 85       	ldd	r24, Y+12	; 0x0c
    320c:	9d 85       	ldd	r25, Y+13	; 0x0d
    320e:	81 30       	cpi	r24, 0x01	; 1
    3210:	91 05       	cpc	r25, r1
    3212:	09 f4       	brne	.+2      	; 0x3216 <GPIO_voidSetPinVal+0x30>
    3214:	4f c0       	rjmp	.+158    	; 0x32b4 <GPIO_voidSetPinVal+0xce>
    3216:	2c 85       	ldd	r18, Y+12	; 0x0c
    3218:	3d 85       	ldd	r19, Y+13	; 0x0d
    321a:	22 30       	cpi	r18, 0x02	; 2
    321c:	31 05       	cpc	r19, r1
    321e:	2c f4       	brge	.+10     	; 0x322a <GPIO_voidSetPinVal+0x44>
    3220:	8c 85       	ldd	r24, Y+12	; 0x0c
    3222:	9d 85       	ldd	r25, Y+13	; 0x0d
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	71 f0       	breq	.+28     	; 0x3244 <GPIO_voidSetPinVal+0x5e>
    3228:	ec c0       	rjmp	.+472    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
    322a:	2c 85       	ldd	r18, Y+12	; 0x0c
    322c:	3d 85       	ldd	r19, Y+13	; 0x0d
    322e:	22 30       	cpi	r18, 0x02	; 2
    3230:	31 05       	cpc	r19, r1
    3232:	09 f4       	brne	.+2      	; 0x3236 <GPIO_voidSetPinVal+0x50>
    3234:	77 c0       	rjmp	.+238    	; 0x3324 <GPIO_voidSetPinVal+0x13e>
    3236:	8c 85       	ldd	r24, Y+12	; 0x0c
    3238:	9d 85       	ldd	r25, Y+13	; 0x0d
    323a:	83 30       	cpi	r24, 0x03	; 3
    323c:	91 05       	cpc	r25, r1
    323e:	09 f4       	brne	.+2      	; 0x3242 <GPIO_voidSetPinVal+0x5c>
    3240:	a9 c0       	rjmp	.+338    	; 0x3394 <GPIO_voidSetPinVal+0x1ae>
    3242:	df c0       	rjmp	.+446    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
	{
		case GPIOA :
			switch (Copy_u8Value)
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	28 2f       	mov	r18, r24
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	3b 87       	std	Y+11, r19	; 0x0b
    324c:	2a 87       	std	Y+10, r18	; 0x0a
    324e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3250:	9b 85       	ldd	r25, Y+11	; 0x0b
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	31 f0       	breq	.+12     	; 0x3262 <GPIO_voidSetPinVal+0x7c>
    3256:	2a 85       	ldd	r18, Y+10	; 0x0a
    3258:	3b 85       	ldd	r19, Y+11	; 0x0b
    325a:	21 30       	cpi	r18, 0x01	; 1
    325c:	31 05       	cpc	r19, r1
    325e:	b1 f0       	breq	.+44     	; 0x328c <GPIO_voidSetPinVal+0xa6>
    3260:	d0 c0       	rjmp	.+416    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
			{
				case LOW  : CLR_BIT(PORTA,Copy_u8PinNum); break;
    3262:	ab e3       	ldi	r26, 0x3B	; 59
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	eb e3       	ldi	r30, 0x3B	; 59
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	48 2f       	mov	r20, r24
    326e:	8a 81       	ldd	r24, Y+2	; 0x02
    3270:	28 2f       	mov	r18, r24
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	02 2e       	mov	r0, r18
    327a:	02 c0       	rjmp	.+4      	; 0x3280 <GPIO_voidSetPinVal+0x9a>
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	0a 94       	dec	r0
    3282:	e2 f7       	brpl	.-8      	; 0x327c <GPIO_voidSetPinVal+0x96>
    3284:	80 95       	com	r24
    3286:	84 23       	and	r24, r20
    3288:	8c 93       	st	X, r24
    328a:	bb c0       	rjmp	.+374    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
				case HIGH : SET_BIT(PORTA,Copy_u8PinNum); break;
    328c:	ab e3       	ldi	r26, 0x3B	; 59
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	eb e3       	ldi	r30, 0x3B	; 59
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	48 2f       	mov	r20, r24
    3298:	8a 81       	ldd	r24, Y+2	; 0x02
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	02 2e       	mov	r0, r18
    32a4:	02 c0       	rjmp	.+4      	; 0x32aa <GPIO_voidSetPinVal+0xc4>
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	0a 94       	dec	r0
    32ac:	e2 f7       	brpl	.-8      	; 0x32a6 <GPIO_voidSetPinVal+0xc0>
    32ae:	84 2b       	or	r24, r20
    32b0:	8c 93       	st	X, r24
    32b2:	a7 c0       	rjmp	.+334    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOB :
			switch (Copy_u8Value)
    32b4:	8b 81       	ldd	r24, Y+3	; 0x03
    32b6:	28 2f       	mov	r18, r24
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	39 87       	std	Y+9, r19	; 0x09
    32bc:	28 87       	std	Y+8, r18	; 0x08
    32be:	88 85       	ldd	r24, Y+8	; 0x08
    32c0:	99 85       	ldd	r25, Y+9	; 0x09
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	31 f0       	breq	.+12     	; 0x32d2 <GPIO_voidSetPinVal+0xec>
    32c6:	28 85       	ldd	r18, Y+8	; 0x08
    32c8:	39 85       	ldd	r19, Y+9	; 0x09
    32ca:	21 30       	cpi	r18, 0x01	; 1
    32cc:	31 05       	cpc	r19, r1
    32ce:	b1 f0       	breq	.+44     	; 0x32fc <GPIO_voidSetPinVal+0x116>
    32d0:	98 c0       	rjmp	.+304    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
			{
				case LOW  : CLR_BIT(PORTB,Copy_u8PinNum); break;
    32d2:	a8 e3       	ldi	r26, 0x38	; 56
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e8 e3       	ldi	r30, 0x38	; 56
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	48 2f       	mov	r20, r24
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	02 2e       	mov	r0, r18
    32ea:	02 c0       	rjmp	.+4      	; 0x32f0 <GPIO_voidSetPinVal+0x10a>
    32ec:	88 0f       	add	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	0a 94       	dec	r0
    32f2:	e2 f7       	brpl	.-8      	; 0x32ec <GPIO_voidSetPinVal+0x106>
    32f4:	80 95       	com	r24
    32f6:	84 23       	and	r24, r20
    32f8:	8c 93       	st	X, r24
    32fa:	83 c0       	rjmp	.+262    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
				case HIGH : SET_BIT(PORTB,Copy_u8PinNum); break;
    32fc:	a8 e3       	ldi	r26, 0x38	; 56
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	e8 e3       	ldi	r30, 0x38	; 56
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	80 81       	ld	r24, Z
    3306:	48 2f       	mov	r20, r24
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	28 2f       	mov	r18, r24
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	02 2e       	mov	r0, r18
    3314:	02 c0       	rjmp	.+4      	; 0x331a <GPIO_voidSetPinVal+0x134>
    3316:	88 0f       	add	r24, r24
    3318:	99 1f       	adc	r25, r25
    331a:	0a 94       	dec	r0
    331c:	e2 f7       	brpl	.-8      	; 0x3316 <GPIO_voidSetPinVal+0x130>
    331e:	84 2b       	or	r24, r20
    3320:	8c 93       	st	X, r24
    3322:	6f c0       	rjmp	.+222    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOC :
			switch (Copy_u8Value)
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	3f 83       	std	Y+7, r19	; 0x07
    332c:	2e 83       	std	Y+6, r18	; 0x06
    332e:	8e 81       	ldd	r24, Y+6	; 0x06
    3330:	9f 81       	ldd	r25, Y+7	; 0x07
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	31 f0       	breq	.+12     	; 0x3342 <GPIO_voidSetPinVal+0x15c>
    3336:	2e 81       	ldd	r18, Y+6	; 0x06
    3338:	3f 81       	ldd	r19, Y+7	; 0x07
    333a:	21 30       	cpi	r18, 0x01	; 1
    333c:	31 05       	cpc	r19, r1
    333e:	b1 f0       	breq	.+44     	; 0x336c <GPIO_voidSetPinVal+0x186>
    3340:	60 c0       	rjmp	.+192    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
			{
				case LOW  : CLR_BIT(PORTC,Copy_u8PinNum); break;
    3342:	a5 e3       	ldi	r26, 0x35	; 53
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e5 e3       	ldi	r30, 0x35	; 53
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	48 2f       	mov	r20, r24
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	02 2e       	mov	r0, r18
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <GPIO_voidSetPinVal+0x17a>
    335c:	88 0f       	add	r24, r24
    335e:	99 1f       	adc	r25, r25
    3360:	0a 94       	dec	r0
    3362:	e2 f7       	brpl	.-8      	; 0x335c <GPIO_voidSetPinVal+0x176>
    3364:	80 95       	com	r24
    3366:	84 23       	and	r24, r20
    3368:	8c 93       	st	X, r24
    336a:	4b c0       	rjmp	.+150    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
				case HIGH : SET_BIT(PORTC,Copy_u8PinNum); break;
    336c:	a5 e3       	ldi	r26, 0x35	; 53
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	e5 e3       	ldi	r30, 0x35	; 53
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	48 2f       	mov	r20, r24
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	28 2f       	mov	r18, r24
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	02 2e       	mov	r0, r18
    3384:	02 c0       	rjmp	.+4      	; 0x338a <GPIO_voidSetPinVal+0x1a4>
    3386:	88 0f       	add	r24, r24
    3388:	99 1f       	adc	r25, r25
    338a:	0a 94       	dec	r0
    338c:	e2 f7       	brpl	.-8      	; 0x3386 <GPIO_voidSetPinVal+0x1a0>
    338e:	84 2b       	or	r24, r20
    3390:	8c 93       	st	X, r24
    3392:	37 c0       	rjmp	.+110    	; 0x3402 <GPIO_voidSetPinVal+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOD :
			switch (Copy_u8Value)
    3394:	8b 81       	ldd	r24, Y+3	; 0x03
    3396:	28 2f       	mov	r18, r24
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	3d 83       	std	Y+5, r19	; 0x05
    339c:	2c 83       	std	Y+4, r18	; 0x04
    339e:	8c 81       	ldd	r24, Y+4	; 0x04
    33a0:	9d 81       	ldd	r25, Y+5	; 0x05
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	31 f0       	breq	.+12     	; 0x33b2 <GPIO_voidSetPinVal+0x1cc>
    33a6:	2c 81       	ldd	r18, Y+4	; 0x04
    33a8:	3d 81       	ldd	r19, Y+5	; 0x05
    33aa:	21 30       	cpi	r18, 0x01	; 1
    33ac:	31 05       	cpc	r19, r1
    33ae:	b1 f0       	breq	.+44     	; 0x33dc <GPIO_voidSetPinVal+0x1f6>
    33b0:	28 c0       	rjmp	.+80     	; 0x3402 <GPIO_voidSetPinVal+0x21c>
			{
				case LOW  : CLR_BIT(PORTD,Copy_u8PinNum); break;
    33b2:	a2 e3       	ldi	r26, 0x32	; 50
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	e2 e3       	ldi	r30, 0x32	; 50
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	48 2f       	mov	r20, r24
    33be:	8a 81       	ldd	r24, Y+2	; 0x02
    33c0:	28 2f       	mov	r18, r24
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	02 2e       	mov	r0, r18
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <GPIO_voidSetPinVal+0x1ea>
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	0a 94       	dec	r0
    33d2:	e2 f7       	brpl	.-8      	; 0x33cc <GPIO_voidSetPinVal+0x1e6>
    33d4:	80 95       	com	r24
    33d6:	84 23       	and	r24, r20
    33d8:	8c 93       	st	X, r24
    33da:	13 c0       	rjmp	.+38     	; 0x3402 <GPIO_voidSetPinVal+0x21c>
				case HIGH : SET_BIT(PORTD,Copy_u8PinNum); break;
    33dc:	a2 e3       	ldi	r26, 0x32	; 50
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	e2 e3       	ldi	r30, 0x32	; 50
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	48 2f       	mov	r20, r24
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	02 2e       	mov	r0, r18
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <GPIO_voidSetPinVal+0x214>
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	0a 94       	dec	r0
    33fc:	e2 f7       	brpl	.-8      	; 0x33f6 <GPIO_voidSetPinVal+0x210>
    33fe:	84 2b       	or	r24, r20
    3400:	8c 93       	st	X, r24
			break;
			
		default : /* return Error */ break;
	}
	
}
    3402:	2d 96       	adiw	r28, 0x0d	; 13
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	cf 91       	pop	r28
    3410:	df 91       	pop	r29
    3412:	08 95       	ret

00003414 <GPIO_voidTogglePin>:
/* 		in case of PORTA : the register is PORTA  and so on to all ports 											*/
/*	 	then toggle the value of the given pin (Copy_u8PinNum)														*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidTogglePin(u8 Copy_u8PortNum  , u8 Copy_u8PinNum)
{
    3414:	df 93       	push	r29
    3416:	cf 93       	push	r28
    3418:	00 d0       	rcall	.+0      	; 0x341a <GPIO_voidTogglePin+0x6>
    341a:	00 d0       	rcall	.+0      	; 0x341c <GPIO_voidTogglePin+0x8>
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	89 83       	std	Y+1, r24	; 0x01
    3422:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	28 2f       	mov	r18, r24
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	3c 83       	std	Y+4, r19	; 0x04
    342c:	2b 83       	std	Y+3, r18	; 0x03
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	9c 81       	ldd	r25, Y+4	; 0x04
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	91 05       	cpc	r25, r1
    3436:	49 f1       	breq	.+82     	; 0x348a <GPIO_voidTogglePin+0x76>
    3438:	2b 81       	ldd	r18, Y+3	; 0x03
    343a:	3c 81       	ldd	r19, Y+4	; 0x04
    343c:	22 30       	cpi	r18, 0x02	; 2
    343e:	31 05       	cpc	r19, r1
    3440:	2c f4       	brge	.+10     	; 0x344c <GPIO_voidTogglePin+0x38>
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	9c 81       	ldd	r25, Y+4	; 0x04
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	61 f0       	breq	.+24     	; 0x3462 <GPIO_voidTogglePin+0x4e>
    344a:	5a c0       	rjmp	.+180    	; 0x3500 <GPIO_voidTogglePin+0xec>
    344c:	2b 81       	ldd	r18, Y+3	; 0x03
    344e:	3c 81       	ldd	r19, Y+4	; 0x04
    3450:	22 30       	cpi	r18, 0x02	; 2
    3452:	31 05       	cpc	r19, r1
    3454:	71 f1       	breq	.+92     	; 0x34b2 <GPIO_voidTogglePin+0x9e>
    3456:	8b 81       	ldd	r24, Y+3	; 0x03
    3458:	9c 81       	ldd	r25, Y+4	; 0x04
    345a:	83 30       	cpi	r24, 0x03	; 3
    345c:	91 05       	cpc	r25, r1
    345e:	e9 f1       	breq	.+122    	; 0x34da <GPIO_voidTogglePin+0xc6>
    3460:	4f c0       	rjmp	.+158    	; 0x3500 <GPIO_voidTogglePin+0xec>
	{
		case GPIOA : TOGGLE_BIT(PORTA,Copy_u8PinNum); break;
    3462:	ab e3       	ldi	r26, 0x3B	; 59
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	eb e3       	ldi	r30, 0x3B	; 59
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	48 2f       	mov	r20, r24
    346e:	8a 81       	ldd	r24, Y+2	; 0x02
    3470:	28 2f       	mov	r18, r24
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	02 2e       	mov	r0, r18
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <GPIO_voidTogglePin+0x6c>
    347c:	88 0f       	add	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	0a 94       	dec	r0
    3482:	e2 f7       	brpl	.-8      	; 0x347c <GPIO_voidTogglePin+0x68>
    3484:	84 27       	eor	r24, r20
    3486:	8c 93       	st	X, r24
    3488:	3b c0       	rjmp	.+118    	; 0x3500 <GPIO_voidTogglePin+0xec>
		case GPIOB : TOGGLE_BIT(PORTB,Copy_u8PinNum); break;
    348a:	a8 e3       	ldi	r26, 0x38	; 56
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	e8 e3       	ldi	r30, 0x38	; 56
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	80 81       	ld	r24, Z
    3494:	48 2f       	mov	r20, r24
    3496:	8a 81       	ldd	r24, Y+2	; 0x02
    3498:	28 2f       	mov	r18, r24
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	02 2e       	mov	r0, r18
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <GPIO_voidTogglePin+0x94>
    34a4:	88 0f       	add	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	0a 94       	dec	r0
    34aa:	e2 f7       	brpl	.-8      	; 0x34a4 <GPIO_voidTogglePin+0x90>
    34ac:	84 27       	eor	r24, r20
    34ae:	8c 93       	st	X, r24
    34b0:	27 c0       	rjmp	.+78     	; 0x3500 <GPIO_voidTogglePin+0xec>
		case GPIOC : TOGGLE_BIT(PORTC,Copy_u8PinNum); break;
    34b2:	a5 e3       	ldi	r26, 0x35	; 53
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	e5 e3       	ldi	r30, 0x35	; 53
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	48 2f       	mov	r20, r24
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	02 2e       	mov	r0, r18
    34ca:	02 c0       	rjmp	.+4      	; 0x34d0 <GPIO_voidTogglePin+0xbc>
    34cc:	88 0f       	add	r24, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	0a 94       	dec	r0
    34d2:	e2 f7       	brpl	.-8      	; 0x34cc <GPIO_voidTogglePin+0xb8>
    34d4:	84 27       	eor	r24, r20
    34d6:	8c 93       	st	X, r24
    34d8:	13 c0       	rjmp	.+38     	; 0x3500 <GPIO_voidTogglePin+0xec>
		case GPIOD : TOGGLE_BIT(PORTD,Copy_u8PinNum); break;
    34da:	a2 e3       	ldi	r26, 0x32	; 50
    34dc:	b0 e0       	ldi	r27, 0x00	; 0
    34de:	e2 e3       	ldi	r30, 0x32	; 50
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	80 81       	ld	r24, Z
    34e4:	48 2f       	mov	r20, r24
    34e6:	8a 81       	ldd	r24, Y+2	; 0x02
    34e8:	28 2f       	mov	r18, r24
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	02 2e       	mov	r0, r18
    34f2:	02 c0       	rjmp	.+4      	; 0x34f8 <GPIO_voidTogglePin+0xe4>
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	0a 94       	dec	r0
    34fa:	e2 f7       	brpl	.-8      	; 0x34f4 <GPIO_voidTogglePin+0xe0>
    34fc:	84 27       	eor	r24, r20
    34fe:	8c 93       	st	X, r24
		default : /* return Error */ break;
	}
}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <GPIO_voidSetPortDir>:
/*	 	2-Check the given value HIGH or LOW 																		*/
/* 		 write the given value to the port																			*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidSetPortDir(u8 Copy_u8PortNum , u8 Copy_u8Direction)
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	00 d0       	rcall	.+0      	; 0x3514 <GPIO_voidSetPortDir+0x6>
    3514:	00 d0       	rcall	.+0      	; 0x3516 <GPIO_voidSetPortDir+0x8>
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	89 83       	std	Y+1, r24	; 0x01
    351c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	3c 83       	std	Y+4, r19	; 0x04
    3526:	2b 83       	std	Y+3, r18	; 0x03
    3528:	8b 81       	ldd	r24, Y+3	; 0x03
    352a:	9c 81       	ldd	r25, Y+4	; 0x04
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	91 05       	cpc	r25, r1
    3530:	d1 f0       	breq	.+52     	; 0x3566 <GPIO_voidSetPortDir+0x58>
    3532:	2b 81       	ldd	r18, Y+3	; 0x03
    3534:	3c 81       	ldd	r19, Y+4	; 0x04
    3536:	22 30       	cpi	r18, 0x02	; 2
    3538:	31 05       	cpc	r19, r1
    353a:	2c f4       	brge	.+10     	; 0x3546 <GPIO_voidSetPortDir+0x38>
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	9c 81       	ldd	r25, Y+4	; 0x04
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	61 f0       	breq	.+24     	; 0x355c <GPIO_voidSetPortDir+0x4e>
    3544:	1e c0       	rjmp	.+60     	; 0x3582 <GPIO_voidSetPortDir+0x74>
    3546:	2b 81       	ldd	r18, Y+3	; 0x03
    3548:	3c 81       	ldd	r19, Y+4	; 0x04
    354a:	22 30       	cpi	r18, 0x02	; 2
    354c:	31 05       	cpc	r19, r1
    354e:	81 f0       	breq	.+32     	; 0x3570 <GPIO_voidSetPortDir+0x62>
    3550:	8b 81       	ldd	r24, Y+3	; 0x03
    3552:	9c 81       	ldd	r25, Y+4	; 0x04
    3554:	83 30       	cpi	r24, 0x03	; 3
    3556:	91 05       	cpc	r25, r1
    3558:	81 f0       	breq	.+32     	; 0x357a <GPIO_voidSetPortDir+0x6c>
    355a:	13 c0       	rjmp	.+38     	; 0x3582 <GPIO_voidSetPortDir+0x74>
	{
		case GPIOA :  DDRA = Copy_u8Direction;   break;
    355c:	ea e3       	ldi	r30, 0x3A	; 58
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	8a 81       	ldd	r24, Y+2	; 0x02
    3562:	80 83       	st	Z, r24
    3564:	0e c0       	rjmp	.+28     	; 0x3582 <GPIO_voidSetPortDir+0x74>
		case GPIOB :  DDRB = Copy_u8Direction;   break;
    3566:	e7 e3       	ldi	r30, 0x37	; 55
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	80 83       	st	Z, r24
    356e:	09 c0       	rjmp	.+18     	; 0x3582 <GPIO_voidSetPortDir+0x74>
		case GPIOC :  DDRC = Copy_u8Direction;   break;
    3570:	e4 e3       	ldi	r30, 0x34	; 52
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	80 83       	st	Z, r24
    3578:	04 c0       	rjmp	.+8      	; 0x3582 <GPIO_voidSetPortDir+0x74>
		case GPIOD :  DDRD = Copy_u8Direction;   break;
    357a:	e1 e3       	ldi	r30, 0x31	; 49
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	80 83       	st	Z, r24
		
		default : /* return Error */ break;
	}
}
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	08 95       	ret

00003590 <GPIO_voidSetPortVal>:
/* 		in case of PORTA : the register is PORTA  and so on to all ports 											*/
/*       2- then Write the Passed value (Copy_u8Value) on the PORTx 												*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidSetPortVal(u8 Copy_u8PortNum , u8 Copy_u8Value)
{
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	00 d0       	rcall	.+0      	; 0x3596 <GPIO_voidSetPortVal+0x6>
    3596:	00 d0       	rcall	.+0      	; 0x3598 <GPIO_voidSetPortVal+0x8>
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	89 83       	std	Y+1, r24	; 0x01
    359e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	28 2f       	mov	r18, r24
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	3c 83       	std	Y+4, r19	; 0x04
    35a8:	2b 83       	std	Y+3, r18	; 0x03
    35aa:	8b 81       	ldd	r24, Y+3	; 0x03
    35ac:	9c 81       	ldd	r25, Y+4	; 0x04
    35ae:	81 30       	cpi	r24, 0x01	; 1
    35b0:	91 05       	cpc	r25, r1
    35b2:	d1 f0       	breq	.+52     	; 0x35e8 <GPIO_voidSetPortVal+0x58>
    35b4:	2b 81       	ldd	r18, Y+3	; 0x03
    35b6:	3c 81       	ldd	r19, Y+4	; 0x04
    35b8:	22 30       	cpi	r18, 0x02	; 2
    35ba:	31 05       	cpc	r19, r1
    35bc:	2c f4       	brge	.+10     	; 0x35c8 <GPIO_voidSetPortVal+0x38>
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	9c 81       	ldd	r25, Y+4	; 0x04
    35c2:	00 97       	sbiw	r24, 0x00	; 0
    35c4:	61 f0       	breq	.+24     	; 0x35de <GPIO_voidSetPortVal+0x4e>
    35c6:	1e c0       	rjmp	.+60     	; 0x3604 <GPIO_voidSetPortVal+0x74>
    35c8:	2b 81       	ldd	r18, Y+3	; 0x03
    35ca:	3c 81       	ldd	r19, Y+4	; 0x04
    35cc:	22 30       	cpi	r18, 0x02	; 2
    35ce:	31 05       	cpc	r19, r1
    35d0:	81 f0       	breq	.+32     	; 0x35f2 <GPIO_voidSetPortVal+0x62>
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	83 30       	cpi	r24, 0x03	; 3
    35d8:	91 05       	cpc	r25, r1
    35da:	81 f0       	breq	.+32     	; 0x35fc <GPIO_voidSetPortVal+0x6c>
    35dc:	13 c0       	rjmp	.+38     	; 0x3604 <GPIO_voidSetPortVal+0x74>
	{
		case GPIOA : PORTA = Copy_u8Value;        break;
    35de:	eb e3       	ldi	r30, 0x3B	; 59
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	8a 81       	ldd	r24, Y+2	; 0x02
    35e4:	80 83       	st	Z, r24
    35e6:	0e c0       	rjmp	.+28     	; 0x3604 <GPIO_voidSetPortVal+0x74>
		case GPIOB : PORTB = Copy_u8Value;        break;
    35e8:	e8 e3       	ldi	r30, 0x38	; 56
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	8a 81       	ldd	r24, Y+2	; 0x02
    35ee:	80 83       	st	Z, r24
    35f0:	09 c0       	rjmp	.+18     	; 0x3604 <GPIO_voidSetPortVal+0x74>
		case GPIOC : PORTC = Copy_u8Value;        break;
    35f2:	e5 e3       	ldi	r30, 0x35	; 53
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	80 83       	st	Z, r24
    35fa:	04 c0       	rjmp	.+8      	; 0x3604 <GPIO_voidSetPortVal+0x74>
		case GPIOD : PORTD = Copy_u8Value;        break;
    35fc:	e2 e3       	ldi	r30, 0x32	; 50
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
    3602:	80 83       	st	Z, r24
		default : /* return Error */ break;
	}
}
    3604:	0f 90       	pop	r0
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <GPIO_voidTogglePort>:
/* 		in case of PORTA : the register is PORTA  and so on to all ports 											*/
/*	 	then toggle the value of the given prrt num (u8 Copy_u8PortNum)												*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidTogglePort(u8 Copy_u8PortNum)
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	00 d0       	rcall	.+0      	; 0x3618 <GPIO_voidTogglePort+0x6>
    3618:	0f 92       	push	r0
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNum)
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	3b 83       	std	Y+3, r19	; 0x03
    3628:	2a 83       	std	Y+2, r18	; 0x02
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	9b 81       	ldd	r25, Y+3	; 0x03
    362e:	81 30       	cpi	r24, 0x01	; 1
    3630:	91 05       	cpc	r25, r1
    3632:	e9 f0       	breq	.+58     	; 0x366e <GPIO_voidTogglePort+0x5c>
    3634:	2a 81       	ldd	r18, Y+2	; 0x02
    3636:	3b 81       	ldd	r19, Y+3	; 0x03
    3638:	22 30       	cpi	r18, 0x02	; 2
    363a:	31 05       	cpc	r19, r1
    363c:	2c f4       	brge	.+10     	; 0x3648 <GPIO_voidTogglePort+0x36>
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	9b 81       	ldd	r25, Y+3	; 0x03
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	61 f0       	breq	.+24     	; 0x365e <GPIO_voidTogglePort+0x4c>
    3646:	2a c0       	rjmp	.+84     	; 0x369c <GPIO_voidTogglePort+0x8a>
    3648:	2a 81       	ldd	r18, Y+2	; 0x02
    364a:	3b 81       	ldd	r19, Y+3	; 0x03
    364c:	22 30       	cpi	r18, 0x02	; 2
    364e:	31 05       	cpc	r19, r1
    3650:	b1 f0       	breq	.+44     	; 0x367e <GPIO_voidTogglePort+0x6c>
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	9b 81       	ldd	r25, Y+3	; 0x03
    3656:	83 30       	cpi	r24, 0x03	; 3
    3658:	91 05       	cpc	r25, r1
    365a:	c9 f0       	breq	.+50     	; 0x368e <GPIO_voidTogglePort+0x7c>
    365c:	1f c0       	rjmp	.+62     	; 0x369c <GPIO_voidTogglePort+0x8a>
	{
		case GPIOA : PORTA = ~PORTA ; break;
    365e:	ab e3       	ldi	r26, 0x3B	; 59
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	eb e3       	ldi	r30, 0x3B	; 59
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	80 95       	com	r24
    366a:	8c 93       	st	X, r24
    366c:	17 c0       	rjmp	.+46     	; 0x369c <GPIO_voidTogglePort+0x8a>
		case GPIOB : PORTB = ~PORTB ; break;
    366e:	a8 e3       	ldi	r26, 0x38	; 56
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	e8 e3       	ldi	r30, 0x38	; 56
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	80 95       	com	r24
    367a:	8c 93       	st	X, r24
    367c:	0f c0       	rjmp	.+30     	; 0x369c <GPIO_voidTogglePort+0x8a>
		case GPIOC : PORTC = ~PORTC ; break;
    367e:	a5 e3       	ldi	r26, 0x35	; 53
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	e5 e3       	ldi	r30, 0x35	; 53
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	80 95       	com	r24
    368a:	8c 93       	st	X, r24
    368c:	07 c0       	rjmp	.+14     	; 0x369c <GPIO_voidTogglePort+0x8a>
		case GPIOD : PORTD = ~PORTD ; break;
    368e:	a2 e3       	ldi	r26, 0x32	; 50
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	e2 e3       	ldi	r30, 0x32	; 50
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	80 95       	com	r24
    369a:	8c 93       	st	X, r24
		default : /* Return Error */  break;
	}
}
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	0f 90       	pop	r0
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	08 95       	ret

000036a8 <GPIO_u8ReadPin>:
u8 GPIO_u8ReadPin(u8 Copy_u8PortNum, u8 Copy_u8PinNum)
{
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	00 d0       	rcall	.+0      	; 0x36ae <GPIO_u8ReadPin+0x6>
    36ae:	00 d0       	rcall	.+0      	; 0x36b0 <GPIO_u8ReadPin+0x8>
    36b0:	0f 92       	push	r0
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62
    36b6:	8a 83       	std	Y+2, r24	; 0x02
    36b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 LocalResult ;
	switch(Copy_u8PortNum)
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	28 2f       	mov	r18, r24
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	3d 83       	std	Y+5, r19	; 0x05
    36c2:	2c 83       	std	Y+4, r18	; 0x04
    36c4:	4c 81       	ldd	r20, Y+4	; 0x04
    36c6:	5d 81       	ldd	r21, Y+5	; 0x05
    36c8:	41 30       	cpi	r20, 0x01	; 1
    36ca:	51 05       	cpc	r21, r1
    36cc:	41 f1       	breq	.+80     	; 0x371e <GPIO_u8ReadPin+0x76>
    36ce:	8c 81       	ldd	r24, Y+4	; 0x04
    36d0:	9d 81       	ldd	r25, Y+5	; 0x05
    36d2:	82 30       	cpi	r24, 0x02	; 2
    36d4:	91 05       	cpc	r25, r1
    36d6:	34 f4       	brge	.+12     	; 0x36e4 <GPIO_u8ReadPin+0x3c>
    36d8:	2c 81       	ldd	r18, Y+4	; 0x04
    36da:	3d 81       	ldd	r19, Y+5	; 0x05
    36dc:	21 15       	cp	r18, r1
    36de:	31 05       	cpc	r19, r1
    36e0:	61 f0       	breq	.+24     	; 0x36fa <GPIO_u8ReadPin+0x52>
    36e2:	52 c0       	rjmp	.+164    	; 0x3788 <GPIO_u8ReadPin+0xe0>
    36e4:	4c 81       	ldd	r20, Y+4	; 0x04
    36e6:	5d 81       	ldd	r21, Y+5	; 0x05
    36e8:	42 30       	cpi	r20, 0x02	; 2
    36ea:	51 05       	cpc	r21, r1
    36ec:	51 f1       	breq	.+84     	; 0x3742 <GPIO_u8ReadPin+0x9a>
    36ee:	8c 81       	ldd	r24, Y+4	; 0x04
    36f0:	9d 81       	ldd	r25, Y+5	; 0x05
    36f2:	83 30       	cpi	r24, 0x03	; 3
    36f4:	91 05       	cpc	r25, r1
    36f6:	b9 f1       	breq	.+110    	; 0x3766 <GPIO_u8ReadPin+0xbe>
    36f8:	47 c0       	rjmp	.+142    	; 0x3788 <GPIO_u8ReadPin+0xe0>
	{
		case GPIOA : LocalResult = GET_BIT(PINA,Copy_u8PinNum);  break;
    36fa:	e9 e3       	ldi	r30, 0x39	; 57
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	80 81       	ld	r24, Z
    3700:	28 2f       	mov	r18, r24
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	8b 81       	ldd	r24, Y+3	; 0x03
    3706:	88 2f       	mov	r24, r24
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	a9 01       	movw	r20, r18
    370c:	02 c0       	rjmp	.+4      	; 0x3712 <GPIO_u8ReadPin+0x6a>
    370e:	55 95       	asr	r21
    3710:	47 95       	ror	r20
    3712:	8a 95       	dec	r24
    3714:	e2 f7       	brpl	.-8      	; 0x370e <GPIO_u8ReadPin+0x66>
    3716:	ca 01       	movw	r24, r20
    3718:	81 70       	andi	r24, 0x01	; 1
    371a:	89 83       	std	Y+1, r24	; 0x01
    371c:	35 c0       	rjmp	.+106    	; 0x3788 <GPIO_u8ReadPin+0xe0>
		case GPIOB : LocalResult = GET_BIT(PINB,Copy_u8PinNum);  break;
    371e:	e6 e3       	ldi	r30, 0x36	; 54
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	80 81       	ld	r24, Z
    3724:	28 2f       	mov	r18, r24
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	88 2f       	mov	r24, r24
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	a9 01       	movw	r20, r18
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <GPIO_u8ReadPin+0x8e>
    3732:	55 95       	asr	r21
    3734:	47 95       	ror	r20
    3736:	8a 95       	dec	r24
    3738:	e2 f7       	brpl	.-8      	; 0x3732 <GPIO_u8ReadPin+0x8a>
    373a:	ca 01       	movw	r24, r20
    373c:	81 70       	andi	r24, 0x01	; 1
    373e:	89 83       	std	Y+1, r24	; 0x01
    3740:	23 c0       	rjmp	.+70     	; 0x3788 <GPIO_u8ReadPin+0xe0>
		case GPIOC : LocalResult = GET_BIT(PINC,Copy_u8PinNum);  break;
    3742:	e3 e3       	ldi	r30, 0x33	; 51
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	80 81       	ld	r24, Z
    3748:	28 2f       	mov	r18, r24
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	88 2f       	mov	r24, r24
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	a9 01       	movw	r20, r18
    3754:	02 c0       	rjmp	.+4      	; 0x375a <GPIO_u8ReadPin+0xb2>
    3756:	55 95       	asr	r21
    3758:	47 95       	ror	r20
    375a:	8a 95       	dec	r24
    375c:	e2 f7       	brpl	.-8      	; 0x3756 <GPIO_u8ReadPin+0xae>
    375e:	ca 01       	movw	r24, r20
    3760:	81 70       	andi	r24, 0x01	; 1
    3762:	89 83       	std	Y+1, r24	; 0x01
    3764:	11 c0       	rjmp	.+34     	; 0x3788 <GPIO_u8ReadPin+0xe0>
		case GPIOD : LocalResult = GET_BIT(PIND,Copy_u8PinNum);  break;
    3766:	e0 e3       	ldi	r30, 0x30	; 48
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	80 81       	ld	r24, Z
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	8b 81       	ldd	r24, Y+3	; 0x03
    3772:	88 2f       	mov	r24, r24
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	a9 01       	movw	r20, r18
    3778:	02 c0       	rjmp	.+4      	; 0x377e <GPIO_u8ReadPin+0xd6>
    377a:	55 95       	asr	r21
    377c:	47 95       	ror	r20
    377e:	8a 95       	dec	r24
    3780:	e2 f7       	brpl	.-8      	; 0x377a <GPIO_u8ReadPin+0xd2>
    3782:	ca 01       	movw	r24, r20
    3784:	81 70       	andi	r24, 0x01	; 1
    3786:	89 83       	std	Y+1, r24	; 0x01
		default : /* Return Error */                             break;
	}
	
	return LocalResult;
    3788:	89 81       	ldd	r24, Y+1	; 0x01
}
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	cf 91       	pop	r28
    3796:	df 91       	pop	r29
    3798:	08 95       	ret

0000379a <GPIO_u8ReadPort>:

u8 GPIO_u8ReadPort(u8 Copy_u8PortNum)
{
    379a:	df 93       	push	r29
    379c:	cf 93       	push	r28
    379e:	00 d0       	rcall	.+0      	; 0x37a0 <GPIO_u8ReadPort+0x6>
    37a0:	00 d0       	rcall	.+0      	; 0x37a2 <GPIO_u8ReadPort+0x8>
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
    37a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 LocalResult;
	switch(Copy_u8PortNum)
    37a8:	8a 81       	ldd	r24, Y+2	; 0x02
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	3c 83       	std	Y+4, r19	; 0x04
    37b0:	2b 83       	std	Y+3, r18	; 0x03
    37b2:	8b 81       	ldd	r24, Y+3	; 0x03
    37b4:	9c 81       	ldd	r25, Y+4	; 0x04
    37b6:	81 30       	cpi	r24, 0x01	; 1
    37b8:	91 05       	cpc	r25, r1
    37ba:	d1 f0       	breq	.+52     	; 0x37f0 <GPIO_u8ReadPort+0x56>
    37bc:	2b 81       	ldd	r18, Y+3	; 0x03
    37be:	3c 81       	ldd	r19, Y+4	; 0x04
    37c0:	22 30       	cpi	r18, 0x02	; 2
    37c2:	31 05       	cpc	r19, r1
    37c4:	2c f4       	brge	.+10     	; 0x37d0 <GPIO_u8ReadPort+0x36>
    37c6:	8b 81       	ldd	r24, Y+3	; 0x03
    37c8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	61 f0       	breq	.+24     	; 0x37e6 <GPIO_u8ReadPort+0x4c>
    37ce:	1e c0       	rjmp	.+60     	; 0x380c <GPIO_u8ReadPort+0x72>
    37d0:	2b 81       	ldd	r18, Y+3	; 0x03
    37d2:	3c 81       	ldd	r19, Y+4	; 0x04
    37d4:	22 30       	cpi	r18, 0x02	; 2
    37d6:	31 05       	cpc	r19, r1
    37d8:	81 f0       	breq	.+32     	; 0x37fa <GPIO_u8ReadPort+0x60>
    37da:	8b 81       	ldd	r24, Y+3	; 0x03
    37dc:	9c 81       	ldd	r25, Y+4	; 0x04
    37de:	83 30       	cpi	r24, 0x03	; 3
    37e0:	91 05       	cpc	r25, r1
    37e2:	81 f0       	breq	.+32     	; 0x3804 <GPIO_u8ReadPort+0x6a>
    37e4:	13 c0       	rjmp	.+38     	; 0x380c <GPIO_u8ReadPort+0x72>
	{
		case GPIOA : LocalResult = PINA; break;
    37e6:	e9 e3       	ldi	r30, 0x39	; 57
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	89 83       	std	Y+1, r24	; 0x01
    37ee:	0e c0       	rjmp	.+28     	; 0x380c <GPIO_u8ReadPort+0x72>
		case GPIOB : LocalResult = PINB; break;
    37f0:	e6 e3       	ldi	r30, 0x36	; 54
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	09 c0       	rjmp	.+18     	; 0x380c <GPIO_u8ReadPort+0x72>
		case GPIOC : LocalResult = PINC; break;
    37fa:	e3 e3       	ldi	r30, 0x33	; 51
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	80 81       	ld	r24, Z
    3800:	89 83       	std	Y+1, r24	; 0x01
    3802:	04 c0       	rjmp	.+8      	; 0x380c <GPIO_u8ReadPort+0x72>
		case GPIOD : LocalResult = PIND; break;
    3804:	e0 e3       	ldi	r30, 0x30	; 48
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	89 83       	std	Y+1, r24	; 0x01
		default : /* Return Error */ break;
	}
	return LocalResult;
    380c:	89 81       	ldd	r24, Y+1	; 0x01
}
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <GPIO_voidSet_LOW_NibbleDir>:

void GPIO_voidSet_LOW_NibbleDir(u8 Copy_u8PortNum, u8 Copy_u8Dir)
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	2c 97       	sbiw	r28, 0x0c	; 12
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
    3830:	89 83       	std	Y+1, r24	; 0x01
    3832:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	28 2f       	mov	r18, r24
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	3c 87       	std	Y+12, r19	; 0x0c
    383c:	2b 87       	std	Y+11, r18	; 0x0b
    383e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3840:	9c 85       	ldd	r25, Y+12	; 0x0c
    3842:	81 30       	cpi	r24, 0x01	; 1
    3844:	91 05       	cpc	r25, r1
    3846:	09 f4       	brne	.+2      	; 0x384a <GPIO_voidSet_LOW_NibbleDir+0x2e>
    3848:	50 c0       	rjmp	.+160    	; 0x38ea <GPIO_voidSet_LOW_NibbleDir+0xce>
    384a:	2b 85       	ldd	r18, Y+11	; 0x0b
    384c:	3c 85       	ldd	r19, Y+12	; 0x0c
    384e:	22 30       	cpi	r18, 0x02	; 2
    3850:	31 05       	cpc	r19, r1
    3852:	2c f4       	brge	.+10     	; 0x385e <GPIO_voidSet_LOW_NibbleDir+0x42>
    3854:	8b 85       	ldd	r24, Y+11	; 0x0b
    3856:	9c 85       	ldd	r25, Y+12	; 0x0c
    3858:	00 97       	sbiw	r24, 0x00	; 0
    385a:	71 f0       	breq	.+28     	; 0x3878 <GPIO_voidSet_LOW_NibbleDir+0x5c>
    385c:	f0 c0       	rjmp	.+480    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
    385e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3860:	3c 85       	ldd	r19, Y+12	; 0x0c
    3862:	22 30       	cpi	r18, 0x02	; 2
    3864:	31 05       	cpc	r19, r1
    3866:	09 f4       	brne	.+2      	; 0x386a <GPIO_voidSet_LOW_NibbleDir+0x4e>
    3868:	79 c0       	rjmp	.+242    	; 0x395c <GPIO_voidSet_LOW_NibbleDir+0x140>
    386a:	8b 85       	ldd	r24, Y+11	; 0x0b
    386c:	9c 85       	ldd	r25, Y+12	; 0x0c
    386e:	83 30       	cpi	r24, 0x03	; 3
    3870:	91 05       	cpc	r25, r1
    3872:	09 f4       	brne	.+2      	; 0x3876 <GPIO_voidSet_LOW_NibbleDir+0x5a>
    3874:	ac c0       	rjmp	.+344    	; 0x39ce <GPIO_voidSet_LOW_NibbleDir+0x1b2>
    3876:	e3 c0       	rjmp	.+454    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
	{
		case GPIOA : 
			switch(Copy_u8Dir)
    3878:	8a 81       	ldd	r24, Y+2	; 0x02
    387a:	28 2f       	mov	r18, r24
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	3a 87       	std	Y+10, r19	; 0x0a
    3880:	29 87       	std	Y+9, r18	; 0x09
    3882:	89 85       	ldd	r24, Y+9	; 0x09
    3884:	9a 85       	ldd	r25, Y+10	; 0x0a
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	31 f0       	breq	.+12     	; 0x3896 <GPIO_voidSet_LOW_NibbleDir+0x7a>
    388a:	29 85       	ldd	r18, Y+9	; 0x09
    388c:	3a 85       	ldd	r19, Y+10	; 0x0a
    388e:	21 30       	cpi	r18, 0x01	; 1
    3890:	31 05       	cpc	r19, r1
    3892:	b1 f0       	breq	.+44     	; 0x38c0 <GPIO_voidSet_LOW_NibbleDir+0xa4>
    3894:	d4 c0       	rjmp	.+424    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOA,PIN0,INPUT);
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	40 e0       	ldi	r20, 0x00	; 0
    389c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN1,INPUT);
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	61 e0       	ldi	r22, 0x01	; 1
    38a4:	40 e0       	ldi	r20, 0x00	; 0
    38a6:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN2,INPUT);
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	62 e0       	ldi	r22, 0x02	; 2
    38ae:	40 e0       	ldi	r20, 0x00	; 0
    38b0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN3,INPUT);
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	63 e0       	ldi	r22, 0x03	; 3
    38b8:	40 e0       	ldi	r20, 0x00	; 0
    38ba:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    38be:	bf c0       	rjmp	.+382    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
							  
				case OUTPUT : GPIO_voidSetPinDir(GPIOA,PIN0,OUTPUT);
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	41 e0       	ldi	r20, 0x01	; 1
    38c6:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN1,OUTPUT);
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	41 e0       	ldi	r20, 0x01	; 1
    38d0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN2,OUTPUT);
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	62 e0       	ldi	r22, 0x02	; 2
    38d8:	41 e0       	ldi	r20, 0x01	; 1
    38da:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN3,OUTPUT);
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	63 e0       	ldi	r22, 0x03	; 3
    38e2:	41 e0       	ldi	r20, 0x01	; 1
    38e4:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    38e8:	aa c0       	rjmp	.+340    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
				default: /* return error */ break;
			}				
				break;
		case GPIOB :
			switch(Copy_u8Dir)
    38ea:	8a 81       	ldd	r24, Y+2	; 0x02
    38ec:	28 2f       	mov	r18, r24
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	38 87       	std	Y+8, r19	; 0x08
    38f2:	2f 83       	std	Y+7, r18	; 0x07
    38f4:	8f 81       	ldd	r24, Y+7	; 0x07
    38f6:	98 85       	ldd	r25, Y+8	; 0x08
    38f8:	00 97       	sbiw	r24, 0x00	; 0
    38fa:	31 f0       	breq	.+12     	; 0x3908 <GPIO_voidSet_LOW_NibbleDir+0xec>
    38fc:	2f 81       	ldd	r18, Y+7	; 0x07
    38fe:	38 85       	ldd	r19, Y+8	; 0x08
    3900:	21 30       	cpi	r18, 0x01	; 1
    3902:	31 05       	cpc	r19, r1
    3904:	b1 f0       	breq	.+44     	; 0x3932 <GPIO_voidSet_LOW_NibbleDir+0x116>
    3906:	9b c0       	rjmp	.+310    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOB,PIN0,INPUT);
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	60 e0       	ldi	r22, 0x00	; 0
    390c:	40 e0       	ldi	r20, 0x00	; 0
    390e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN1,INPUT);
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	61 e0       	ldi	r22, 0x01	; 1
    3916:	40 e0       	ldi	r20, 0x00	; 0
    3918:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN2,INPUT);
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	62 e0       	ldi	r22, 0x02	; 2
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN3,INPUT);
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	63 e0       	ldi	r22, 0x03	; 3
    392a:	40 e0       	ldi	r20, 0x00	; 0
    392c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3930:	86 c0       	rjmp	.+268    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOB,PIN0,OUTPUT);
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	41 e0       	ldi	r20, 0x01	; 1
    3938:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN1,OUTPUT);
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	61 e0       	ldi	r22, 0x01	; 1
    3940:	41 e0       	ldi	r20, 0x01	; 1
    3942:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN2,OUTPUT);
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	62 e0       	ldi	r22, 0x02	; 2
    394a:	41 e0       	ldi	r20, 0x01	; 1
    394c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN3,OUTPUT);
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	63 e0       	ldi	r22, 0x03	; 3
    3954:	41 e0       	ldi	r20, 0x01	; 1
    3956:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    395a:	71 c0       	rjmp	.+226    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
				default: /* return Error */ break;
			}
			break;
			 
		case GPIOC :
			switch(Copy_u8Dir)
    395c:	8a 81       	ldd	r24, Y+2	; 0x02
    395e:	28 2f       	mov	r18, r24
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	3e 83       	std	Y+6, r19	; 0x06
    3964:	2d 83       	std	Y+5, r18	; 0x05
    3966:	8d 81       	ldd	r24, Y+5	; 0x05
    3968:	9e 81       	ldd	r25, Y+6	; 0x06
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	31 f0       	breq	.+12     	; 0x397a <GPIO_voidSet_LOW_NibbleDir+0x15e>
    396e:	2d 81       	ldd	r18, Y+5	; 0x05
    3970:	3e 81       	ldd	r19, Y+6	; 0x06
    3972:	21 30       	cpi	r18, 0x01	; 1
    3974:	31 05       	cpc	r19, r1
    3976:	b1 f0       	breq	.+44     	; 0x39a4 <GPIO_voidSet_LOW_NibbleDir+0x188>
    3978:	62 c0       	rjmp	.+196    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOC,PIN0,INPUT);
    397a:	82 e0       	ldi	r24, 0x02	; 2
    397c:	60 e0       	ldi	r22, 0x00	; 0
    397e:	40 e0       	ldi	r20, 0x00	; 0
    3980:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN1,INPUT);
    3984:	82 e0       	ldi	r24, 0x02	; 2
    3986:	61 e0       	ldi	r22, 0x01	; 1
    3988:	40 e0       	ldi	r20, 0x00	; 0
    398a:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN2,INPUT);
    398e:	82 e0       	ldi	r24, 0x02	; 2
    3990:	62 e0       	ldi	r22, 0x02	; 2
    3992:	40 e0       	ldi	r20, 0x00	; 0
    3994:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN3,INPUT);
    3998:	82 e0       	ldi	r24, 0x02	; 2
    399a:	63 e0       	ldi	r22, 0x03	; 3
    399c:	40 e0       	ldi	r20, 0x00	; 0
    399e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    39a2:	4d c0       	rjmp	.+154    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOC,PIN0,OUTPUT);
    39a4:	82 e0       	ldi	r24, 0x02	; 2
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	41 e0       	ldi	r20, 0x01	; 1
    39aa:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN1,OUTPUT);
    39ae:	82 e0       	ldi	r24, 0x02	; 2
    39b0:	61 e0       	ldi	r22, 0x01	; 1
    39b2:	41 e0       	ldi	r20, 0x01	; 1
    39b4:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN2,OUTPUT);
    39b8:	82 e0       	ldi	r24, 0x02	; 2
    39ba:	62 e0       	ldi	r22, 0x02	; 2
    39bc:	41 e0       	ldi	r20, 0x01	; 1
    39be:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN3,OUTPUT);
    39c2:	82 e0       	ldi	r24, 0x02	; 2
    39c4:	63 e0       	ldi	r22, 0x03	; 3
    39c6:	41 e0       	ldi	r20, 0x01	; 1
    39c8:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    39cc:	38 c0       	rjmp	.+112    	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
				default: /* return Error */ break;
			}
		break;
		
		case GPIOD :
			switch(Copy_u8Dir)
    39ce:	8a 81       	ldd	r24, Y+2	; 0x02
    39d0:	28 2f       	mov	r18, r24
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	3c 83       	std	Y+4, r19	; 0x04
    39d6:	2b 83       	std	Y+3, r18	; 0x03
    39d8:	8b 81       	ldd	r24, Y+3	; 0x03
    39da:	9c 81       	ldd	r25, Y+4	; 0x04
    39dc:	00 97       	sbiw	r24, 0x00	; 0
    39de:	31 f0       	breq	.+12     	; 0x39ec <GPIO_voidSet_LOW_NibbleDir+0x1d0>
    39e0:	2b 81       	ldd	r18, Y+3	; 0x03
    39e2:	3c 81       	ldd	r19, Y+4	; 0x04
    39e4:	21 30       	cpi	r18, 0x01	; 1
    39e6:	31 05       	cpc	r19, r1
    39e8:	b1 f0       	breq	.+44     	; 0x3a16 <GPIO_voidSet_LOW_NibbleDir+0x1fa>
    39ea:	29 c0       	rjmp	.+82     	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOD,PIN0,INPUT);
    39ec:	83 e0       	ldi	r24, 0x03	; 3
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	40 e0       	ldi	r20, 0x00	; 0
    39f2:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN1,INPUT);
    39f6:	83 e0       	ldi	r24, 0x03	; 3
    39f8:	61 e0       	ldi	r22, 0x01	; 1
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN2,INPUT);
    3a00:	83 e0       	ldi	r24, 0x03	; 3
    3a02:	62 e0       	ldi	r22, 0x02	; 2
    3a04:	40 e0       	ldi	r20, 0x00	; 0
    3a06:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN3,INPUT);
    3a0a:	83 e0       	ldi	r24, 0x03	; 3
    3a0c:	63 e0       	ldi	r22, 0x03	; 3
    3a0e:	40 e0       	ldi	r20, 0x00	; 0
    3a10:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3a14:	14 c0       	rjmp	.+40     	; 0x3a3e <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOD,PIN0,OUTPUT);
    3a16:	83 e0       	ldi	r24, 0x03	; 3
    3a18:	60 e0       	ldi	r22, 0x00	; 0
    3a1a:	41 e0       	ldi	r20, 0x01	; 1
    3a1c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN1,OUTPUT);
    3a20:	83 e0       	ldi	r24, 0x03	; 3
    3a22:	61 e0       	ldi	r22, 0x01	; 1
    3a24:	41 e0       	ldi	r20, 0x01	; 1
    3a26:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN2,OUTPUT);
    3a2a:	83 e0       	ldi	r24, 0x03	; 3
    3a2c:	62 e0       	ldi	r22, 0x02	; 2
    3a2e:	41 e0       	ldi	r20, 0x01	; 1
    3a30:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN3,OUTPUT);
    3a34:	83 e0       	ldi	r24, 0x03	; 3
    3a36:	63 e0       	ldi	r22, 0x03	; 3
    3a38:	41 e0       	ldi	r20, 0x01	; 1
    3a3a:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
			}
		break;
		default: /* return error */ break;
		
	}
}
    3a3e:	2c 96       	adiw	r28, 0x0c	; 12
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	de bf       	out	0x3e, r29	; 62
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	cd bf       	out	0x3d, r28	; 61
    3a4a:	cf 91       	pop	r28
    3a4c:	df 91       	pop	r29
    3a4e:	08 95       	ret

00003a50 <GPIO_voidSet_HIGH_NibbleDir>:

void GPIO_voidSet_HIGH_NibbleDir(u8 Copy_u8PortNum, u8 Copy_u8Dir)
{
    3a50:	df 93       	push	r29
    3a52:	cf 93       	push	r28
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	2c 97       	sbiw	r28, 0x0c	; 12
    3a5a:	0f b6       	in	r0, 0x3f	; 63
    3a5c:	f8 94       	cli
    3a5e:	de bf       	out	0x3e, r29	; 62
    3a60:	0f be       	out	0x3f, r0	; 63
    3a62:	cd bf       	out	0x3d, r28	; 61
    3a64:	89 83       	std	Y+1, r24	; 0x01
    3a66:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	28 2f       	mov	r18, r24
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	3c 87       	std	Y+12, r19	; 0x0c
    3a70:	2b 87       	std	Y+11, r18	; 0x0b
    3a72:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a74:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a76:	81 30       	cpi	r24, 0x01	; 1
    3a78:	91 05       	cpc	r25, r1
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <GPIO_voidSet_HIGH_NibbleDir+0x2e>
    3a7c:	50 c0       	rjmp	.+160    	; 0x3b1e <GPIO_voidSet_HIGH_NibbleDir+0xce>
    3a7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a80:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a82:	22 30       	cpi	r18, 0x02	; 2
    3a84:	31 05       	cpc	r19, r1
    3a86:	2c f4       	brge	.+10     	; 0x3a92 <GPIO_voidSet_HIGH_NibbleDir+0x42>
    3a88:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a8c:	00 97       	sbiw	r24, 0x00	; 0
    3a8e:	71 f0       	breq	.+28     	; 0x3aac <GPIO_voidSet_HIGH_NibbleDir+0x5c>
    3a90:	f0 c0       	rjmp	.+480    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
    3a92:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a94:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a96:	22 30       	cpi	r18, 0x02	; 2
    3a98:	31 05       	cpc	r19, r1
    3a9a:	09 f4       	brne	.+2      	; 0x3a9e <GPIO_voidSet_HIGH_NibbleDir+0x4e>
    3a9c:	79 c0       	rjmp	.+242    	; 0x3b90 <GPIO_voidSet_HIGH_NibbleDir+0x140>
    3a9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3aa0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3aa2:	83 30       	cpi	r24, 0x03	; 3
    3aa4:	91 05       	cpc	r25, r1
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <GPIO_voidSet_HIGH_NibbleDir+0x5a>
    3aa8:	ac c0       	rjmp	.+344    	; 0x3c02 <GPIO_voidSet_HIGH_NibbleDir+0x1b2>
    3aaa:	e3 c0       	rjmp	.+454    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
	{
		case GPIOA :
			switch(Copy_u8Dir)
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	28 2f       	mov	r18, r24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	3a 87       	std	Y+10, r19	; 0x0a
    3ab4:	29 87       	std	Y+9, r18	; 0x09
    3ab6:	89 85       	ldd	r24, Y+9	; 0x09
    3ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	31 f0       	breq	.+12     	; 0x3aca <GPIO_voidSet_HIGH_NibbleDir+0x7a>
    3abe:	29 85       	ldd	r18, Y+9	; 0x09
    3ac0:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ac2:	21 30       	cpi	r18, 0x01	; 1
    3ac4:	31 05       	cpc	r19, r1
    3ac6:	b1 f0       	breq	.+44     	; 0x3af4 <GPIO_voidSet_HIGH_NibbleDir+0xa4>
    3ac8:	d4 c0       	rjmp	.+424    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOA,PIN4,INPUT);
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	64 e0       	ldi	r22, 0x04	; 4
    3ace:	40 e0       	ldi	r20, 0x00	; 0
    3ad0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN5,INPUT);
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	65 e0       	ldi	r22, 0x05	; 5
    3ad8:	40 e0       	ldi	r20, 0x00	; 0
    3ada:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN6,INPUT);
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	66 e0       	ldi	r22, 0x06	; 6
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN7,INPUT);
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	67 e0       	ldi	r22, 0x07	; 7
    3aec:	40 e0       	ldi	r20, 0x00	; 0
    3aee:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3af2:	bf c0       	rjmp	.+382    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOA,PIN4,OUTPUT);
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	64 e0       	ldi	r22, 0x04	; 4
    3af8:	41 e0       	ldi	r20, 0x01	; 1
    3afa:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN5,OUTPUT);
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	65 e0       	ldi	r22, 0x05	; 5
    3b02:	41 e0       	ldi	r20, 0x01	; 1
    3b04:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN6,OUTPUT);
    3b08:	80 e0       	ldi	r24, 0x00	; 0
    3b0a:	66 e0       	ldi	r22, 0x06	; 6
    3b0c:	41 e0       	ldi	r20, 0x01	; 1
    3b0e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN7,OUTPUT);
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	67 e0       	ldi	r22, 0x07	; 7
    3b16:	41 e0       	ldi	r20, 0x01	; 1
    3b18:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3b1c:	aa c0       	rjmp	.+340    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
							  break;
				default: /* return error */ break;
			}
		break;
		case GPIOB :
			switch(Copy_u8Dir)
    3b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b20:	28 2f       	mov	r18, r24
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	38 87       	std	Y+8, r19	; 0x08
    3b26:	2f 83       	std	Y+7, r18	; 0x07
    3b28:	8f 81       	ldd	r24, Y+7	; 0x07
    3b2a:	98 85       	ldd	r25, Y+8	; 0x08
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	31 f0       	breq	.+12     	; 0x3b3c <GPIO_voidSet_HIGH_NibbleDir+0xec>
    3b30:	2f 81       	ldd	r18, Y+7	; 0x07
    3b32:	38 85       	ldd	r19, Y+8	; 0x08
    3b34:	21 30       	cpi	r18, 0x01	; 1
    3b36:	31 05       	cpc	r19, r1
    3b38:	b1 f0       	breq	.+44     	; 0x3b66 <GPIO_voidSet_HIGH_NibbleDir+0x116>
    3b3a:	9b c0       	rjmp	.+310    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOB,PIN4,INPUT);
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	64 e0       	ldi	r22, 0x04	; 4
    3b40:	40 e0       	ldi	r20, 0x00	; 0
    3b42:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN5,INPUT);
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	65 e0       	ldi	r22, 0x05	; 5
    3b4a:	40 e0       	ldi	r20, 0x00	; 0
    3b4c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN6,INPUT);
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	66 e0       	ldi	r22, 0x06	; 6
    3b54:	40 e0       	ldi	r20, 0x00	; 0
    3b56:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN7,INPUT);
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	67 e0       	ldi	r22, 0x07	; 7
    3b5e:	40 e0       	ldi	r20, 0x00	; 0
    3b60:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3b64:	86 c0       	rjmp	.+268    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
						      break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOB,PIN4,OUTPUT);
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	64 e0       	ldi	r22, 0x04	; 4
    3b6a:	41 e0       	ldi	r20, 0x01	; 1
    3b6c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN5,OUTPUT);
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	65 e0       	ldi	r22, 0x05	; 5
    3b74:	41 e0       	ldi	r20, 0x01	; 1
    3b76:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN6,OUTPUT);
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	66 e0       	ldi	r22, 0x06	; 6
    3b7e:	41 e0       	ldi	r20, 0x01	; 1
    3b80:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN7,OUTPUT);
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	67 e0       	ldi	r22, 0x07	; 7
    3b88:	41 e0       	ldi	r20, 0x01	; 1
    3b8a:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3b8e:	71 c0       	rjmp	.+226    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
				default: /* return Error */ break;
			}
		break;
		
		case GPIOC :
			switch(Copy_u8Dir)
    3b90:	8a 81       	ldd	r24, Y+2	; 0x02
    3b92:	28 2f       	mov	r18, r24
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	3e 83       	std	Y+6, r19	; 0x06
    3b98:	2d 83       	std	Y+5, r18	; 0x05
    3b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9e:	00 97       	sbiw	r24, 0x00	; 0
    3ba0:	31 f0       	breq	.+12     	; 0x3bae <GPIO_voidSet_HIGH_NibbleDir+0x15e>
    3ba2:	2d 81       	ldd	r18, Y+5	; 0x05
    3ba4:	3e 81       	ldd	r19, Y+6	; 0x06
    3ba6:	21 30       	cpi	r18, 0x01	; 1
    3ba8:	31 05       	cpc	r19, r1
    3baa:	b1 f0       	breq	.+44     	; 0x3bd8 <GPIO_voidSet_HIGH_NibbleDir+0x188>
    3bac:	62 c0       	rjmp	.+196    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOC,PIN4,INPUT);
    3bae:	82 e0       	ldi	r24, 0x02	; 2
    3bb0:	64 e0       	ldi	r22, 0x04	; 4
    3bb2:	40 e0       	ldi	r20, 0x00	; 0
    3bb4:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN5,INPUT);
    3bb8:	82 e0       	ldi	r24, 0x02	; 2
    3bba:	65 e0       	ldi	r22, 0x05	; 5
    3bbc:	40 e0       	ldi	r20, 0x00	; 0
    3bbe:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN6,INPUT);
    3bc2:	82 e0       	ldi	r24, 0x02	; 2
    3bc4:	66 e0       	ldi	r22, 0x06	; 6
    3bc6:	40 e0       	ldi	r20, 0x00	; 0
    3bc8:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN7,INPUT);
    3bcc:	82 e0       	ldi	r24, 0x02	; 2
    3bce:	67 e0       	ldi	r22, 0x07	; 7
    3bd0:	40 e0       	ldi	r20, 0x00	; 0
    3bd2:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3bd6:	4d c0       	rjmp	.+154    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOC,PIN4,OUTPUT);
    3bd8:	82 e0       	ldi	r24, 0x02	; 2
    3bda:	64 e0       	ldi	r22, 0x04	; 4
    3bdc:	41 e0       	ldi	r20, 0x01	; 1
    3bde:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN5,OUTPUT);
    3be2:	82 e0       	ldi	r24, 0x02	; 2
    3be4:	65 e0       	ldi	r22, 0x05	; 5
    3be6:	41 e0       	ldi	r20, 0x01	; 1
    3be8:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN6,OUTPUT);
    3bec:	82 e0       	ldi	r24, 0x02	; 2
    3bee:	66 e0       	ldi	r22, 0x06	; 6
    3bf0:	41 e0       	ldi	r20, 0x01	; 1
    3bf2:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN7,OUTPUT);
    3bf6:	82 e0       	ldi	r24, 0x02	; 2
    3bf8:	67 e0       	ldi	r22, 0x07	; 7
    3bfa:	41 e0       	ldi	r20, 0x01	; 1
    3bfc:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3c00:	38 c0       	rjmp	.+112    	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
				default: /* return Error */ break;
			}
		break;
		
		case GPIOD :
			switch(Copy_u8Dir)
    3c02:	8a 81       	ldd	r24, Y+2	; 0x02
    3c04:	28 2f       	mov	r18, r24
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	3c 83       	std	Y+4, r19	; 0x04
    3c0a:	2b 83       	std	Y+3, r18	; 0x03
    3c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c10:	00 97       	sbiw	r24, 0x00	; 0
    3c12:	31 f0       	breq	.+12     	; 0x3c20 <GPIO_voidSet_HIGH_NibbleDir+0x1d0>
    3c14:	2b 81       	ldd	r18, Y+3	; 0x03
    3c16:	3c 81       	ldd	r19, Y+4	; 0x04
    3c18:	21 30       	cpi	r18, 0x01	; 1
    3c1a:	31 05       	cpc	r19, r1
    3c1c:	b1 f0       	breq	.+44     	; 0x3c4a <GPIO_voidSet_HIGH_NibbleDir+0x1fa>
    3c1e:	29 c0       	rjmp	.+82     	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOD,PIN4,INPUT);
    3c20:	83 e0       	ldi	r24, 0x03	; 3
    3c22:	64 e0       	ldi	r22, 0x04	; 4
    3c24:	40 e0       	ldi	r20, 0x00	; 0
    3c26:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN5,INPUT);
    3c2a:	83 e0       	ldi	r24, 0x03	; 3
    3c2c:	65 e0       	ldi	r22, 0x05	; 5
    3c2e:	40 e0       	ldi	r20, 0x00	; 0
    3c30:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN6,INPUT);
    3c34:	83 e0       	ldi	r24, 0x03	; 3
    3c36:	66 e0       	ldi	r22, 0x06	; 6
    3c38:	40 e0       	ldi	r20, 0x00	; 0
    3c3a:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN7,INPUT);
    3c3e:	83 e0       	ldi	r24, 0x03	; 3
    3c40:	67 e0       	ldi	r22, 0x07	; 7
    3c42:	40 e0       	ldi	r20, 0x00	; 0
    3c44:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3c48:	14 c0       	rjmp	.+40     	; 0x3c72 <GPIO_voidSet_HIGH_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOD,PIN4,OUTPUT);
    3c4a:	83 e0       	ldi	r24, 0x03	; 3
    3c4c:	64 e0       	ldi	r22, 0x04	; 4
    3c4e:	41 e0       	ldi	r20, 0x01	; 1
    3c50:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN5,OUTPUT);
    3c54:	83 e0       	ldi	r24, 0x03	; 3
    3c56:	65 e0       	ldi	r22, 0x05	; 5
    3c58:	41 e0       	ldi	r20, 0x01	; 1
    3c5a:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN6,OUTPUT);
    3c5e:	83 e0       	ldi	r24, 0x03	; 3
    3c60:	66 e0       	ldi	r22, 0x06	; 6
    3c62:	41 e0       	ldi	r20, 0x01	; 1
    3c64:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN7,OUTPUT);
    3c68:	83 e0       	ldi	r24, 0x03	; 3
    3c6a:	67 e0       	ldi	r22, 0x07	; 7
    3c6c:	41 e0       	ldi	r20, 0x01	; 1
    3c6e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
			}
		break;
		default: /* return error */ break;
		
	}
}
    3c72:	2c 96       	adiw	r28, 0x0c	; 12
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	de bf       	out	0x3e, r29	; 62
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	cd bf       	out	0x3d, r28	; 61
    3c7e:	cf 91       	pop	r28
    3c80:	df 91       	pop	r29
    3c82:	08 95       	ret

00003c84 <GPIO_voidSet_LOW_NibbleVal>:

void GPIO_voidSet_LOW_NibbleVal(u8 Copy_u8portnum, u8 Copy_u8value)
{
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	00 d0       	rcall	.+0      	; 0x3c8a <GPIO_voidSet_LOW_NibbleVal+0x6>
    3c8a:	00 d0       	rcall	.+0      	; 0x3c8c <GPIO_voidSet_LOW_NibbleVal+0x8>
    3c8c:	0f 92       	push	r0
    3c8e:	cd b7       	in	r28, 0x3d	; 61
    3c90:	de b7       	in	r29, 0x3e	; 62
    3c92:	8a 83       	std	Y+2, r24	; 0x02
    3c94:	6b 83       	std	Y+3, r22	; 0x03
	u8 temp_data = Copy_u8value & 0x0F ;
    3c96:	8b 81       	ldd	r24, Y+3	; 0x03
    3c98:	8f 70       	andi	r24, 0x0F	; 15
    3c9a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8portnum)
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	28 2f       	mov	r18, r24
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	3d 83       	std	Y+5, r19	; 0x05
    3ca4:	2c 83       	std	Y+4, r18	; 0x04
    3ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    3caa:	81 30       	cpi	r24, 0x01	; 1
    3cac:	91 05       	cpc	r25, r1
    3cae:	29 f1       	breq	.+74     	; 0x3cfa <GPIO_voidSet_LOW_NibbleVal+0x76>
    3cb0:	2c 81       	ldd	r18, Y+4	; 0x04
    3cb2:	3d 81       	ldd	r19, Y+5	; 0x05
    3cb4:	22 30       	cpi	r18, 0x02	; 2
    3cb6:	31 05       	cpc	r19, r1
    3cb8:	2c f4       	brge	.+10     	; 0x3cc4 <GPIO_voidSet_LOW_NibbleVal+0x40>
    3cba:	8c 81       	ldd	r24, Y+4	; 0x04
    3cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	61 f0       	breq	.+24     	; 0x3cda <GPIO_voidSet_LOW_NibbleVal+0x56>
    3cc2:	4a c0       	rjmp	.+148    	; 0x3d58 <GPIO_voidSet_LOW_NibbleVal+0xd4>
    3cc4:	2c 81       	ldd	r18, Y+4	; 0x04
    3cc6:	3d 81       	ldd	r19, Y+5	; 0x05
    3cc8:	22 30       	cpi	r18, 0x02	; 2
    3cca:	31 05       	cpc	r19, r1
    3ccc:	31 f1       	breq	.+76     	; 0x3d1a <GPIO_voidSet_LOW_NibbleVal+0x96>
    3cce:	8c 81       	ldd	r24, Y+4	; 0x04
    3cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    3cd2:	83 30       	cpi	r24, 0x03	; 3
    3cd4:	91 05       	cpc	r25, r1
    3cd6:	89 f1       	breq	.+98     	; 0x3d3a <GPIO_voidSet_LOW_NibbleVal+0xb6>
    3cd8:	3f c0       	rjmp	.+126    	; 0x3d58 <GPIO_voidSet_LOW_NibbleVal+0xd4>
	{
	case GPIOA :	PORTA &= 0xF0 ;   
    3cda:	ab e3       	ldi	r26, 0x3B	; 59
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	eb e3       	ldi	r30, 0x3B	; 59
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	80 7f       	andi	r24, 0xF0	; 240
    3ce6:	8c 93       	st	X, r24
					PORTA |= temp_data;
    3ce8:	ab e3       	ldi	r26, 0x3B	; 59
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	eb e3       	ldi	r30, 0x3B	; 59
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	90 81       	ld	r25, Z
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01
    3cf4:	89 2b       	or	r24, r25
    3cf6:	8c 93       	st	X, r24
    3cf8:	2f c0       	rjmp	.+94     	; 0x3d58 <GPIO_voidSet_LOW_NibbleVal+0xd4>
					break;
					
	case GPIOB :	PORTB &= 0xF0 ;
    3cfa:	a8 e3       	ldi	r26, 0x38	; 56
    3cfc:	b0 e0       	ldi	r27, 0x00	; 0
    3cfe:	e8 e3       	ldi	r30, 0x38	; 56
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	80 81       	ld	r24, Z
    3d04:	80 7f       	andi	r24, 0xF0	; 240
    3d06:	8c 93       	st	X, r24
					PORTB |= temp_data;
    3d08:	a8 e3       	ldi	r26, 0x38	; 56
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	e8 e3       	ldi	r30, 0x38	; 56
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	90 81       	ld	r25, Z
    3d12:	89 81       	ldd	r24, Y+1	; 0x01
    3d14:	89 2b       	or	r24, r25
    3d16:	8c 93       	st	X, r24
    3d18:	1f c0       	rjmp	.+62     	; 0x3d58 <GPIO_voidSet_LOW_NibbleVal+0xd4>
					break;
					
	case GPIOC :    PORTC &= 0xF0 ;
    3d1a:	a5 e3       	ldi	r26, 0x35	; 53
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	e5 e3       	ldi	r30, 0x35	; 53
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	80 7f       	andi	r24, 0xF0	; 240
    3d26:	8c 93       	st	X, r24
					PORTC |= temp_data;
    3d28:	a5 e3       	ldi	r26, 0x35	; 53
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	e5 e3       	ldi	r30, 0x35	; 53
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	90 81       	ld	r25, Z
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
    3d34:	89 2b       	or	r24, r25
    3d36:	8c 93       	st	X, r24
    3d38:	0f c0       	rjmp	.+30     	; 0x3d58 <GPIO_voidSet_LOW_NibbleVal+0xd4>
					break;
					
	case GPIOD :	PORTD &= 0xF0 ;
    3d3a:	a2 e3       	ldi	r26, 0x32	; 50
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	e2 e3       	ldi	r30, 0x32	; 50
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	80 81       	ld	r24, Z
    3d44:	80 7f       	andi	r24, 0xF0	; 240
    3d46:	8c 93       	st	X, r24
					PORTD |= temp_data;
    3d48:	a2 e3       	ldi	r26, 0x32	; 50
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	e2 e3       	ldi	r30, 0x32	; 50
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	90 81       	ld	r25, Z
    3d52:	89 81       	ldd	r24, Y+1	; 0x01
    3d54:	89 2b       	or	r24, r25
    3d56:	8c 93       	st	X, r24
					break;
	default: /* return error */break; 
		
	}
	
}
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	08 95       	ret

00003d68 <GPIO_voidSet_HIGH_NibbleVal>:

void GPIO_voidSet_HIGH_NibbleVal(u8 Copy_u8portnum, u8 Copy_u8value)
{
    3d68:	df 93       	push	r29
    3d6a:	cf 93       	push	r28
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <GPIO_voidSet_HIGH_NibbleVal+0x6>
    3d6e:	00 d0       	rcall	.+0      	; 0x3d70 <GPIO_voidSet_HIGH_NibbleVal+0x8>
    3d70:	0f 92       	push	r0
    3d72:	cd b7       	in	r28, 0x3d	; 61
    3d74:	de b7       	in	r29, 0x3e	; 62
    3d76:	8a 83       	std	Y+2, r24	; 0x02
    3d78:	6b 83       	std	Y+3, r22	; 0x03
	u8 temp_data = ( Copy_u8value << 4 ) ;
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	82 95       	swap	r24
    3d7e:	80 7f       	andi	r24, 0xF0	; 240
    3d80:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8portnum)
    3d82:	8a 81       	ldd	r24, Y+2	; 0x02
    3d84:	28 2f       	mov	r18, r24
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	3d 83       	std	Y+5, r19	; 0x05
    3d8a:	2c 83       	std	Y+4, r18	; 0x04
    3d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d90:	81 30       	cpi	r24, 0x01	; 1
    3d92:	91 05       	cpc	r25, r1
    3d94:	29 f1       	breq	.+74     	; 0x3de0 <GPIO_voidSet_HIGH_NibbleVal+0x78>
    3d96:	2c 81       	ldd	r18, Y+4	; 0x04
    3d98:	3d 81       	ldd	r19, Y+5	; 0x05
    3d9a:	22 30       	cpi	r18, 0x02	; 2
    3d9c:	31 05       	cpc	r19, r1
    3d9e:	2c f4       	brge	.+10     	; 0x3daa <GPIO_voidSet_HIGH_NibbleVal+0x42>
    3da0:	8c 81       	ldd	r24, Y+4	; 0x04
    3da2:	9d 81       	ldd	r25, Y+5	; 0x05
    3da4:	00 97       	sbiw	r24, 0x00	; 0
    3da6:	61 f0       	breq	.+24     	; 0x3dc0 <GPIO_voidSet_HIGH_NibbleVal+0x58>
    3da8:	4a c0       	rjmp	.+148    	; 0x3e3e <GPIO_voidSet_HIGH_NibbleVal+0xd6>
    3daa:	2c 81       	ldd	r18, Y+4	; 0x04
    3dac:	3d 81       	ldd	r19, Y+5	; 0x05
    3dae:	22 30       	cpi	r18, 0x02	; 2
    3db0:	31 05       	cpc	r19, r1
    3db2:	31 f1       	breq	.+76     	; 0x3e00 <GPIO_voidSet_HIGH_NibbleVal+0x98>
    3db4:	8c 81       	ldd	r24, Y+4	; 0x04
    3db6:	9d 81       	ldd	r25, Y+5	; 0x05
    3db8:	83 30       	cpi	r24, 0x03	; 3
    3dba:	91 05       	cpc	r25, r1
    3dbc:	89 f1       	breq	.+98     	; 0x3e20 <GPIO_voidSet_HIGH_NibbleVal+0xb8>
    3dbe:	3f c0       	rjmp	.+126    	; 0x3e3e <GPIO_voidSet_HIGH_NibbleVal+0xd6>
	{
		case GPIOA :	PORTA &= 0x0F ;
    3dc0:	ab e3       	ldi	r26, 0x3B	; 59
    3dc2:	b0 e0       	ldi	r27, 0x00	; 0
    3dc4:	eb e3       	ldi	r30, 0x3B	; 59
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	80 81       	ld	r24, Z
    3dca:	8f 70       	andi	r24, 0x0F	; 15
    3dcc:	8c 93       	st	X, r24
						PORTA |= temp_data;
    3dce:	ab e3       	ldi	r26, 0x3B	; 59
    3dd0:	b0 e0       	ldi	r27, 0x00	; 0
    3dd2:	eb e3       	ldi	r30, 0x3B	; 59
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	90 81       	ld	r25, Z
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	89 2b       	or	r24, r25
    3ddc:	8c 93       	st	X, r24
    3dde:	2f c0       	rjmp	.+94     	; 0x3e3e <GPIO_voidSet_HIGH_NibbleVal+0xd6>
						break;
		
		case GPIOB :	PORTB &= 0x0F ;
    3de0:	a8 e3       	ldi	r26, 0x38	; 56
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	e8 e3       	ldi	r30, 0x38	; 56
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	8f 70       	andi	r24, 0x0F	; 15
    3dec:	8c 93       	st	X, r24
						PORTB |= temp_data;
    3dee:	a8 e3       	ldi	r26, 0x38	; 56
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	e8 e3       	ldi	r30, 0x38	; 56
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	90 81       	ld	r25, Z
    3df8:	89 81       	ldd	r24, Y+1	; 0x01
    3dfa:	89 2b       	or	r24, r25
    3dfc:	8c 93       	st	X, r24
    3dfe:	1f c0       	rjmp	.+62     	; 0x3e3e <GPIO_voidSet_HIGH_NibbleVal+0xd6>
						break;
		
		case GPIOC :    PORTC &= 0x0F ;
    3e00:	a5 e3       	ldi	r26, 0x35	; 53
    3e02:	b0 e0       	ldi	r27, 0x00	; 0
    3e04:	e5 e3       	ldi	r30, 0x35	; 53
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	80 81       	ld	r24, Z
    3e0a:	8f 70       	andi	r24, 0x0F	; 15
    3e0c:	8c 93       	st	X, r24
						PORTC |= temp_data;
    3e0e:	a5 e3       	ldi	r26, 0x35	; 53
    3e10:	b0 e0       	ldi	r27, 0x00	; 0
    3e12:	e5 e3       	ldi	r30, 0x35	; 53
    3e14:	f0 e0       	ldi	r31, 0x00	; 0
    3e16:	90 81       	ld	r25, Z
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	89 2b       	or	r24, r25
    3e1c:	8c 93       	st	X, r24
    3e1e:	0f c0       	rjmp	.+30     	; 0x3e3e <GPIO_voidSet_HIGH_NibbleVal+0xd6>
						break;
		
		case GPIOD :	PORTD &= 0x0F;
    3e20:	a2 e3       	ldi	r26, 0x32	; 50
    3e22:	b0 e0       	ldi	r27, 0x00	; 0
    3e24:	e2 e3       	ldi	r30, 0x32	; 50
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	80 81       	ld	r24, Z
    3e2a:	8f 70       	andi	r24, 0x0F	; 15
    3e2c:	8c 93       	st	X, r24
						PORTD |= temp_data;
    3e2e:	a2 e3       	ldi	r26, 0x32	; 50
    3e30:	b0 e0       	ldi	r27, 0x00	; 0
    3e32:	e2 e3       	ldi	r30, 0x32	; 50
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	90 81       	ld	r25, Z
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
    3e3a:	89 2b       	or	r24, r25
    3e3c:	8c 93       	st	X, r24
						break;
		default: /* return error */break;
		
	}
	
}
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	0f 90       	pop	r0
    3e46:	0f 90       	pop	r0
    3e48:	cf 91       	pop	r28
    3e4a:	df 91       	pop	r29
    3e4c:	08 95       	ret

00003e4e <CLCD_voidInit>:
#include "CLCD_private.h"
#include "util/delay.h"


void CLCD_voidInit(void)
{
    3e4e:	df 93       	push	r29
    3e50:	cf 93       	push	r28
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	e8 97       	sbiw	r28, 0x38	; 56
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	f8 94       	cli
    3e5c:	de bf       	out	0x3e, r29	; 62
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidSetPortDir	(	CLCD_DATA_PORT	, 	0xFF	);
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	6f ef       	ldi	r22, 0xFF	; 255
    3e66:	0e 94 87 1a 	call	0x350e	; 0x350e <GPIO_voidSetPortDir>
	GPIO_voidSetPinDir	(	CLCD_RW			,	OUTPUT	);
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	61 e0       	ldi	r22, 0x01	; 1
    3e6e:	41 e0       	ldi	r20, 0x01	; 1
    3e70:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir	(	CLCD_EN			,	OUTPUT	);
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	62 e0       	ldi	r22, 0x02	; 2
    3e78:	41 e0       	ldi	r20, 0x01	; 1
    3e7a:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir	(	CLCD_RS			,	OUTPUT	);
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	60 e0       	ldi	r22, 0x00	; 0
    3e82:	41 e0       	ldi	r20, 0x01	; 1
    3e84:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	a8 e4       	ldi	r26, 0x48	; 72
    3e8e:	b2 e4       	ldi	r27, 0x42	; 66
    3e90:	8d ab       	std	Y+53, r24	; 0x35
    3e92:	9e ab       	std	Y+54, r25	; 0x36
    3e94:	af ab       	std	Y+55, r26	; 0x37
    3e96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e98:	6d a9       	ldd	r22, Y+53	; 0x35
    3e9a:	7e a9       	ldd	r23, Y+54	; 0x36
    3e9c:	8f a9       	ldd	r24, Y+55	; 0x37
    3e9e:	98 ad       	ldd	r25, Y+56	; 0x38
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	4a ef       	ldi	r20, 0xFA	; 250
    3ea6:	54 e4       	ldi	r21, 0x44	; 68
    3ea8:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	89 ab       	std	Y+49, r24	; 0x31
    3eb2:	9a ab       	std	Y+50, r25	; 0x32
    3eb4:	ab ab       	std	Y+51, r26	; 0x33
    3eb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    3eba:	7a a9       	ldd	r23, Y+50	; 0x32
    3ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    3ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e8       	ldi	r20, 0x80	; 128
    3ec6:	5f e3       	ldi	r21, 0x3F	; 63
    3ec8:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    3ecc:	88 23       	and	r24, r24
    3ece:	2c f4       	brge	.+10     	; 0x3eda <CLCD_voidInit+0x8c>
		__ticks = 1;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	98 ab       	std	Y+48, r25	; 0x30
    3ed6:	8f a7       	std	Y+47, r24	; 0x2f
    3ed8:	3f c0       	rjmp	.+126    	; 0x3f58 <CLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    3eda:	69 a9       	ldd	r22, Y+49	; 0x31
    3edc:	7a a9       	ldd	r23, Y+50	; 0x32
    3ede:	8b a9       	ldd	r24, Y+51	; 0x33
    3ee0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	3f ef       	ldi	r19, 0xFF	; 255
    3ee6:	4f e7       	ldi	r20, 0x7F	; 127
    3ee8:	57 e4       	ldi	r21, 0x47	; 71
    3eea:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    3eee:	18 16       	cp	r1, r24
    3ef0:	4c f5       	brge	.+82     	; 0x3f44 <CLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ef4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ef6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ef8:	98 ad       	ldd	r25, Y+56	; 0x38
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	40 e2       	ldi	r20, 0x20	; 32
    3f00:	51 e4       	ldi	r21, 0x41	; 65
    3f02:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	bc 01       	movw	r22, r24
    3f0c:	cd 01       	movw	r24, r26
    3f0e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	98 ab       	std	Y+48, r25	; 0x30
    3f18:	8f a7       	std	Y+47, r24	; 0x2f
    3f1a:	0f c0       	rjmp	.+30     	; 0x3f3a <CLCD_voidInit+0xec>
    3f1c:	88 ec       	ldi	r24, 0xC8	; 200
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	9e a7       	std	Y+46, r25	; 0x2e
    3f22:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f24:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f26:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	f1 f7       	brne	.-4      	; 0x3f28 <CLCD_voidInit+0xda>
    3f2c:	9e a7       	std	Y+46, r25	; 0x2e
    3f2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f32:	98 a9       	ldd	r25, Y+48	; 0x30
    3f34:	01 97       	sbiw	r24, 0x01	; 1
    3f36:	98 ab       	std	Y+48, r25	; 0x30
    3f38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	69 f7       	brne	.-38     	; 0x3f1c <CLCD_voidInit+0xce>
    3f42:	14 c0       	rjmp	.+40     	; 0x3f6c <CLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f44:	69 a9       	ldd	r22, Y+49	; 0x31
    3f46:	7a a9       	ldd	r23, Y+50	; 0x32
    3f48:	8b a9       	ldd	r24, Y+51	; 0x33
    3f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    3f4c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	98 ab       	std	Y+48, r25	; 0x30
    3f56:	8f a7       	std	Y+47, r24	; 0x2f
    3f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f5c:	9c a7       	std	Y+44, r25	; 0x2c
    3f5e:	8b a7       	std	Y+43, r24	; 0x2b
    3f60:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f62:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	f1 f7       	brne	.-4      	; 0x3f64 <CLCD_voidInit+0x116>
    3f68:	9c a7       	std	Y+44, r25	; 0x2c
    3f6a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	CLCD_voidSendCommand	( CLCD_EIGHT_BIT_TWO_LINE_5_8 );
    3f6c:	8c e3       	ldi	r24, 0x3C	; 60
    3f6e:	0e 94 21 21 	call	0x4242	; 0x4242 <CLCD_voidSendCommand>
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	a0 e8       	ldi	r26, 0x80	; 128
    3f78:	bf e3       	ldi	r27, 0x3F	; 63
    3f7a:	8f a3       	std	Y+39, r24	; 0x27
    3f7c:	98 a7       	std	Y+40, r25	; 0x28
    3f7e:	a9 a7       	std	Y+41, r26	; 0x29
    3f80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f82:	6f a1       	ldd	r22, Y+39	; 0x27
    3f84:	78 a5       	ldd	r23, Y+40	; 0x28
    3f86:	89 a5       	ldd	r24, Y+41	; 0x29
    3f88:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	4a ef       	ldi	r20, 0xFA	; 250
    3f90:	54 e4       	ldi	r21, 0x44	; 68
    3f92:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3f96:	dc 01       	movw	r26, r24
    3f98:	cb 01       	movw	r24, r22
    3f9a:	8b a3       	std	Y+35, r24	; 0x23
    3f9c:	9c a3       	std	Y+36, r25	; 0x24
    3f9e:	ad a3       	std	Y+37, r26	; 0x25
    3fa0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fa2:	6b a1       	ldd	r22, Y+35	; 0x23
    3fa4:	7c a1       	ldd	r23, Y+36	; 0x24
    3fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    3fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	40 e8       	ldi	r20, 0x80	; 128
    3fb0:	5f e3       	ldi	r21, 0x3F	; 63
    3fb2:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    3fb6:	88 23       	and	r24, r24
    3fb8:	2c f4       	brge	.+10     	; 0x3fc4 <CLCD_voidInit+0x176>
		__ticks = 1;
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	9a a3       	std	Y+34, r25	; 0x22
    3fc0:	89 a3       	std	Y+33, r24	; 0x21
    3fc2:	3f c0       	rjmp	.+126    	; 0x4042 <CLCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    3fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    3fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    3fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    3fca:	9e a1       	ldd	r25, Y+38	; 0x26
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	3f ef       	ldi	r19, 0xFF	; 255
    3fd0:	4f e7       	ldi	r20, 0x7F	; 127
    3fd2:	57 e4       	ldi	r21, 0x47	; 71
    3fd4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    3fd8:	18 16       	cp	r1, r24
    3fda:	4c f5       	brge	.+82     	; 0x402e <CLCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fdc:	6f a1       	ldd	r22, Y+39	; 0x27
    3fde:	78 a5       	ldd	r23, Y+40	; 0x28
    3fe0:	89 a5       	ldd	r24, Y+41	; 0x29
    3fe2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	40 e2       	ldi	r20, 0x20	; 32
    3fea:	51 e4       	ldi	r21, 0x41	; 65
    3fec:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    3ff0:	dc 01       	movw	r26, r24
    3ff2:	cb 01       	movw	r24, r22
    3ff4:	bc 01       	movw	r22, r24
    3ff6:	cd 01       	movw	r24, r26
    3ff8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	9a a3       	std	Y+34, r25	; 0x22
    4002:	89 a3       	std	Y+33, r24	; 0x21
    4004:	0f c0       	rjmp	.+30     	; 0x4024 <CLCD_voidInit+0x1d6>
    4006:	88 ec       	ldi	r24, 0xC8	; 200
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	98 a3       	std	Y+32, r25	; 0x20
    400c:	8f 8f       	std	Y+31, r24	; 0x1f
    400e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4010:	98 a1       	ldd	r25, Y+32	; 0x20
    4012:	01 97       	sbiw	r24, 0x01	; 1
    4014:	f1 f7       	brne	.-4      	; 0x4012 <CLCD_voidInit+0x1c4>
    4016:	98 a3       	std	Y+32, r25	; 0x20
    4018:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    401a:	89 a1       	ldd	r24, Y+33	; 0x21
    401c:	9a a1       	ldd	r25, Y+34	; 0x22
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	9a a3       	std	Y+34, r25	; 0x22
    4022:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4024:	89 a1       	ldd	r24, Y+33	; 0x21
    4026:	9a a1       	ldd	r25, Y+34	; 0x22
    4028:	00 97       	sbiw	r24, 0x00	; 0
    402a:	69 f7       	brne	.-38     	; 0x4006 <CLCD_voidInit+0x1b8>
    402c:	14 c0       	rjmp	.+40     	; 0x4056 <CLCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    402e:	6b a1       	ldd	r22, Y+35	; 0x23
    4030:	7c a1       	ldd	r23, Y+36	; 0x24
    4032:	8d a1       	ldd	r24, Y+37	; 0x25
    4034:	9e a1       	ldd	r25, Y+38	; 0x26
    4036:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    403a:	dc 01       	movw	r26, r24
    403c:	cb 01       	movw	r24, r22
    403e:	9a a3       	std	Y+34, r25	; 0x22
    4040:	89 a3       	std	Y+33, r24	; 0x21
    4042:	89 a1       	ldd	r24, Y+33	; 0x21
    4044:	9a a1       	ldd	r25, Y+34	; 0x22
    4046:	9e 8f       	std	Y+30, r25	; 0x1e
    4048:	8d 8f       	std	Y+29, r24	; 0x1d
    404a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    404c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	f1 f7       	brne	.-4      	; 0x404e <CLCD_voidInit+0x200>
    4052:	9e 8f       	std	Y+30, r25	; 0x1e
    4054:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand	( CLCD_DISPLAY_ON_CURSOR_ON   );
    4056:	8f e0       	ldi	r24, 0x0F	; 15
    4058:	0e 94 21 21 	call	0x4242	; 0x4242 <CLCD_voidSendCommand>
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	a0 e8       	ldi	r26, 0x80	; 128
    4062:	bf e3       	ldi	r27, 0x3F	; 63
    4064:	89 8f       	std	Y+25, r24	; 0x19
    4066:	9a 8f       	std	Y+26, r25	; 0x1a
    4068:	ab 8f       	std	Y+27, r26	; 0x1b
    406a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    406c:	69 8d       	ldd	r22, Y+25	; 0x19
    406e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4070:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4072:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	4a ef       	ldi	r20, 0xFA	; 250
    407a:	54 e4       	ldi	r21, 0x44	; 68
    407c:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	8d 8b       	std	Y+21, r24	; 0x15
    4086:	9e 8b       	std	Y+22, r25	; 0x16
    4088:	af 8b       	std	Y+23, r26	; 0x17
    408a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    408c:	6d 89       	ldd	r22, Y+21	; 0x15
    408e:	7e 89       	ldd	r23, Y+22	; 0x16
    4090:	8f 89       	ldd	r24, Y+23	; 0x17
    4092:	98 8d       	ldd	r25, Y+24	; 0x18
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e8       	ldi	r20, 0x80	; 128
    409a:	5f e3       	ldi	r21, 0x3F	; 63
    409c:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    40a0:	88 23       	and	r24, r24
    40a2:	2c f4       	brge	.+10     	; 0x40ae <CLCD_voidInit+0x260>
		__ticks = 1;
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	9c 8b       	std	Y+20, r25	; 0x14
    40aa:	8b 8b       	std	Y+19, r24	; 0x13
    40ac:	3f c0       	rjmp	.+126    	; 0x412c <CLCD_voidInit+0x2de>
	else if (__tmp > 65535)
    40ae:	6d 89       	ldd	r22, Y+21	; 0x15
    40b0:	7e 89       	ldd	r23, Y+22	; 0x16
    40b2:	8f 89       	ldd	r24, Y+23	; 0x17
    40b4:	98 8d       	ldd	r25, Y+24	; 0x18
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	3f ef       	ldi	r19, 0xFF	; 255
    40ba:	4f e7       	ldi	r20, 0x7F	; 127
    40bc:	57 e4       	ldi	r21, 0x47	; 71
    40be:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    40c2:	18 16       	cp	r1, r24
    40c4:	4c f5       	brge	.+82     	; 0x4118 <CLCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40c6:	69 8d       	ldd	r22, Y+25	; 0x19
    40c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40ce:	20 e0       	ldi	r18, 0x00	; 0
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	40 e2       	ldi	r20, 0x20	; 32
    40d4:	51 e4       	ldi	r21, 0x41	; 65
    40d6:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	bc 01       	movw	r22, r24
    40e0:	cd 01       	movw	r24, r26
    40e2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    40e6:	dc 01       	movw	r26, r24
    40e8:	cb 01       	movw	r24, r22
    40ea:	9c 8b       	std	Y+20, r25	; 0x14
    40ec:	8b 8b       	std	Y+19, r24	; 0x13
    40ee:	0f c0       	rjmp	.+30     	; 0x410e <CLCD_voidInit+0x2c0>
    40f0:	88 ec       	ldi	r24, 0xC8	; 200
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	9a 8b       	std	Y+18, r25	; 0x12
    40f6:	89 8b       	std	Y+17, r24	; 0x11
    40f8:	89 89       	ldd	r24, Y+17	; 0x11
    40fa:	9a 89       	ldd	r25, Y+18	; 0x12
    40fc:	01 97       	sbiw	r24, 0x01	; 1
    40fe:	f1 f7       	brne	.-4      	; 0x40fc <CLCD_voidInit+0x2ae>
    4100:	9a 8b       	std	Y+18, r25	; 0x12
    4102:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4104:	8b 89       	ldd	r24, Y+19	; 0x13
    4106:	9c 89       	ldd	r25, Y+20	; 0x14
    4108:	01 97       	sbiw	r24, 0x01	; 1
    410a:	9c 8b       	std	Y+20, r25	; 0x14
    410c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    410e:	8b 89       	ldd	r24, Y+19	; 0x13
    4110:	9c 89       	ldd	r25, Y+20	; 0x14
    4112:	00 97       	sbiw	r24, 0x00	; 0
    4114:	69 f7       	brne	.-38     	; 0x40f0 <CLCD_voidInit+0x2a2>
    4116:	14 c0       	rjmp	.+40     	; 0x4140 <CLCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4118:	6d 89       	ldd	r22, Y+21	; 0x15
    411a:	7e 89       	ldd	r23, Y+22	; 0x16
    411c:	8f 89       	ldd	r24, Y+23	; 0x17
    411e:	98 8d       	ldd	r25, Y+24	; 0x18
    4120:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	9c 8b       	std	Y+20, r25	; 0x14
    412a:	8b 8b       	std	Y+19, r24	; 0x13
    412c:	8b 89       	ldd	r24, Y+19	; 0x13
    412e:	9c 89       	ldd	r25, Y+20	; 0x14
    4130:	98 8b       	std	Y+16, r25	; 0x10
    4132:	8f 87       	std	Y+15, r24	; 0x0f
    4134:	8f 85       	ldd	r24, Y+15	; 0x0f
    4136:	98 89       	ldd	r25, Y+16	; 0x10
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	f1 f7       	brne	.-4      	; 0x4138 <CLCD_voidInit+0x2ea>
    413c:	98 8b       	std	Y+16, r25	; 0x10
    413e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand	( CLCD_DISPLAY_CLEAR          );
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	0e 94 21 21 	call	0x4242	; 0x4242 <CLCD_voidSendCommand>
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	a0 e0       	ldi	r26, 0x00	; 0
    414c:	b0 e4       	ldi	r27, 0x40	; 64
    414e:	8b 87       	std	Y+11, r24	; 0x0b
    4150:	9c 87       	std	Y+12, r25	; 0x0c
    4152:	ad 87       	std	Y+13, r26	; 0x0d
    4154:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4156:	6b 85       	ldd	r22, Y+11	; 0x0b
    4158:	7c 85       	ldd	r23, Y+12	; 0x0c
    415a:	8d 85       	ldd	r24, Y+13	; 0x0d
    415c:	9e 85       	ldd	r25, Y+14	; 0x0e
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	4a ef       	ldi	r20, 0xFA	; 250
    4164:	54 e4       	ldi	r21, 0x44	; 68
    4166:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	8f 83       	std	Y+7, r24	; 0x07
    4170:	98 87       	std	Y+8, r25	; 0x08
    4172:	a9 87       	std	Y+9, r26	; 0x09
    4174:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4176:	6f 81       	ldd	r22, Y+7	; 0x07
    4178:	78 85       	ldd	r23, Y+8	; 0x08
    417a:	89 85       	ldd	r24, Y+9	; 0x09
    417c:	9a 85       	ldd	r25, Y+10	; 0x0a
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e8       	ldi	r20, 0x80	; 128
    4184:	5f e3       	ldi	r21, 0x3F	; 63
    4186:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    418a:	88 23       	and	r24, r24
    418c:	2c f4       	brge	.+10     	; 0x4198 <CLCD_voidInit+0x34a>
		__ticks = 1;
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	9e 83       	std	Y+6, r25	; 0x06
    4194:	8d 83       	std	Y+5, r24	; 0x05
    4196:	3f c0       	rjmp	.+126    	; 0x4216 <CLCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    4198:	6f 81       	ldd	r22, Y+7	; 0x07
    419a:	78 85       	ldd	r23, Y+8	; 0x08
    419c:	89 85       	ldd	r24, Y+9	; 0x09
    419e:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a0:	20 e0       	ldi	r18, 0x00	; 0
    41a2:	3f ef       	ldi	r19, 0xFF	; 255
    41a4:	4f e7       	ldi	r20, 0x7F	; 127
    41a6:	57 e4       	ldi	r21, 0x47	; 71
    41a8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    41ac:	18 16       	cp	r1, r24
    41ae:	4c f5       	brge	.+82     	; 0x4202 <CLCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	40 e2       	ldi	r20, 0x20	; 32
    41be:	51 e4       	ldi	r21, 0x41	; 65
    41c0:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	bc 01       	movw	r22, r24
    41ca:	cd 01       	movw	r24, r26
    41cc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	9e 83       	std	Y+6, r25	; 0x06
    41d6:	8d 83       	std	Y+5, r24	; 0x05
    41d8:	0f c0       	rjmp	.+30     	; 0x41f8 <CLCD_voidInit+0x3aa>
    41da:	88 ec       	ldi	r24, 0xC8	; 200
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	9c 83       	std	Y+4, r25	; 0x04
    41e0:	8b 83       	std	Y+3, r24	; 0x03
    41e2:	8b 81       	ldd	r24, Y+3	; 0x03
    41e4:	9c 81       	ldd	r25, Y+4	; 0x04
    41e6:	01 97       	sbiw	r24, 0x01	; 1
    41e8:	f1 f7       	brne	.-4      	; 0x41e6 <CLCD_voidInit+0x398>
    41ea:	9c 83       	std	Y+4, r25	; 0x04
    41ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ee:	8d 81       	ldd	r24, Y+5	; 0x05
    41f0:	9e 81       	ldd	r25, Y+6	; 0x06
    41f2:	01 97       	sbiw	r24, 0x01	; 1
    41f4:	9e 83       	std	Y+6, r25	; 0x06
    41f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f8:	8d 81       	ldd	r24, Y+5	; 0x05
    41fa:	9e 81       	ldd	r25, Y+6	; 0x06
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	69 f7       	brne	.-38     	; 0x41da <CLCD_voidInit+0x38c>
    4200:	14 c0       	rjmp	.+40     	; 0x422a <CLCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4202:	6f 81       	ldd	r22, Y+7	; 0x07
    4204:	78 85       	ldd	r23, Y+8	; 0x08
    4206:	89 85       	ldd	r24, Y+9	; 0x09
    4208:	9a 85       	ldd	r25, Y+10	; 0x0a
    420a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	9e 83       	std	Y+6, r25	; 0x06
    4214:	8d 83       	std	Y+5, r24	; 0x05
    4216:	8d 81       	ldd	r24, Y+5	; 0x05
    4218:	9e 81       	ldd	r25, Y+6	; 0x06
    421a:	9a 83       	std	Y+2, r25	; 0x02
    421c:	89 83       	std	Y+1, r24	; 0x01
    421e:	89 81       	ldd	r24, Y+1	; 0x01
    4220:	9a 81       	ldd	r25, Y+2	; 0x02
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	f1 f7       	brne	.-4      	; 0x4222 <CLCD_voidInit+0x3d4>
    4226:	9a 83       	std	Y+2, r25	; 0x02
    4228:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand	( CLCD_SHIFT_DISABEL          );
    422a:	86 e0       	ldi	r24, 0x06	; 6
    422c:	0e 94 21 21 	call	0x4242	; 0x4242 <CLCD_voidSendCommand>

}
    4230:	e8 96       	adiw	r28, 0x38	; 56
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	08 95       	ret

00004242 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand	( u8 Copy_u8Command		)
{
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	0f 92       	push	r0
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62
    424c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Send Command --> Write '0' to the RS Pin of LCD
	 * Writing to the LCD --> Write '0' to  RW Pin of the LCD
	 *   */
	GPIO_voidSetPortVal	(	CLCD_DATA_PORT	, Copy_u8Command	);
    424e:	80 e0       	ldi	r24, 0x00	; 0
    4250:	69 81       	ldd	r22, Y+1	; 0x01
    4252:	0e 94 c8 1a 	call	0x3590	; 0x3590 <GPIO_voidSetPortVal>
	GPIO_voidSetPinVal	(	CLCD_RS			, LOW				);
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	60 e0       	ldi	r22, 0x00	; 0
    425a:	40 e0       	ldi	r20, 0x00	; 0
    425c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal	(	CLCD_RW			, LOW				);
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	61 e0       	ldi	r22, 0x01	; 1
    4264:	40 e0       	ldi	r20, 0x00	; 0
    4266:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>

	/*Send Trigger to EN Pin*/
	CLCD_voidSendEnableTrigger();
    426a:	0e 94 1b 28 	call	0x5036	; 0x5036 <CLCD_voidSendEnableTrigger>
}
    426e:	0f 90       	pop	r0
    4270:	cf 91       	pop	r28
    4272:	df 91       	pop	r29
    4274:	08 95       	ret

00004276 <CLCD_voidSendCharacter>:
void CLCD_voidSendCharacter	( u8 Copy_u8Char		)
{
    4276:	df 93       	push	r29
    4278:	cf 93       	push	r28
    427a:	0f 92       	push	r0
    427c:	cd b7       	in	r28, 0x3d	; 61
    427e:	de b7       	in	r29, 0x3e	; 62
    4280:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Send Data --> Write '1' to the RS Pin of LCD
	 * Writing to the LCD --> Write '0' to  RW Pin of the LCD
	 *  */
	GPIO_voidSetPortVal ( 	CLCD_DATA_PORT	, Copy_u8Char	);
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	69 81       	ldd	r22, Y+1	; 0x01
    4286:	0e 94 c8 1a 	call	0x3590	; 0x3590 <GPIO_voidSetPortVal>
	GPIO_voidSetPinVal 	( 	CLCD_RS       	, HIGH			);
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	60 e0       	ldi	r22, 0x00	; 0
    428e:	41 e0       	ldi	r20, 0x01	; 1
    4290:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal 	( 	CLCD_RW			, LOW			);
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	61 e0       	ldi	r22, 0x01	; 1
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	/*Send Trigger to EN Pin*/
	CLCD_voidSendEnableTrigger();
    429e:	0e 94 1b 28 	call	0x5036	; 0x5036 <CLCD_voidSendEnableTrigger>
}
    42a2:	0f 90       	pop	r0
    42a4:	cf 91       	pop	r28
    42a6:	df 91       	pop	r29
    42a8:	08 95       	ret

000042aa <CLCD_voidSendString>:
void CLCD_voidSendString	( u8 * Copy_ptrString	)
{
    42aa:	df 93       	push	r29
    42ac:	cf 93       	push	r28
    42ae:	00 d0       	rcall	.+0      	; 0x42b0 <CLCD_voidSendString+0x6>
    42b0:	0f 92       	push	r0
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	9b 83       	std	Y+3, r25	; 0x03
    42b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8CharCounter = 0;
    42ba:	19 82       	std	Y+1, r1	; 0x01
    42bc:	0f c0       	rjmp	.+30     	; 0x42dc <CLCD_voidSendString+0x32>
	while( Copy_ptrString[LOC_u8CharCounter] != '\0')
	{
		CLCD_voidSendCharacter(Copy_ptrString[LOC_u8CharCounter++]);
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	28 2f       	mov	r18, r24
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	8a 81       	ldd	r24, Y+2	; 0x02
    42c6:	9b 81       	ldd	r25, Y+3	; 0x03
    42c8:	fc 01       	movw	r30, r24
    42ca:	e2 0f       	add	r30, r18
    42cc:	f3 1f       	adc	r31, r19
    42ce:	90 81       	ld	r25, Z
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	8f 5f       	subi	r24, 0xFF	; 255
    42d4:	89 83       	std	Y+1, r24	; 0x01
    42d6:	89 2f       	mov	r24, r25
    42d8:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
	CLCD_voidSendEnableTrigger();
}
void CLCD_voidSendString	( u8 * Copy_ptrString	)
{
	u8 LOC_u8CharCounter = 0;
	while( Copy_ptrString[LOC_u8CharCounter] != '\0')
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	28 2f       	mov	r18, r24
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	8a 81       	ldd	r24, Y+2	; 0x02
    42e4:	9b 81       	ldd	r25, Y+3	; 0x03
    42e6:	fc 01       	movw	r30, r24
    42e8:	e2 0f       	add	r30, r18
    42ea:	f3 1f       	adc	r31, r19
    42ec:	80 81       	ld	r24, Z
    42ee:	88 23       	and	r24, r24
    42f0:	31 f7       	brne	.-52     	; 0x42be <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendCharacter(Copy_ptrString[LOC_u8CharCounter++]);
	}
}
    42f2:	0f 90       	pop	r0
    42f4:	0f 90       	pop	r0
    42f6:	0f 90       	pop	r0
    42f8:	cf 91       	pop	r28
    42fa:	df 91       	pop	r29
    42fc:	08 95       	ret

000042fe <CLCD_voidSendNumber>:
void CLCD_voidSendNumber	( u64 Copy_u64Number	)
{
    42fe:	af 92       	push	r10
    4300:	bf 92       	push	r11
    4302:	cf 92       	push	r12
    4304:	df 92       	push	r13
    4306:	ef 92       	push	r14
    4308:	ff 92       	push	r15
    430a:	0f 93       	push	r16
    430c:	1f 93       	push	r17
    430e:	df 93       	push	r29
    4310:	cf 93       	push	r28
    4312:	cd b7       	in	r28, 0x3d	; 61
    4314:	de b7       	in	r29, 0x3e	; 62
    4316:	c6 56       	subi	r28, 0x66	; 102
    4318:	d0 40       	sbci	r29, 0x00	; 0
    431a:	0f b6       	in	r0, 0x3f	; 63
    431c:	f8 94       	cli
    431e:	de bf       	out	0x3e, r29	; 62
    4320:	0f be       	out	0x3f, r0	; 63
    4322:	cd bf       	out	0x3d, r28	; 61
    4324:	29 87       	std	Y+9, r18	; 0x09
    4326:	3a 87       	std	Y+10, r19	; 0x0a
    4328:	4b 87       	std	Y+11, r20	; 0x0b
    432a:	5c 87       	std	Y+12, r21	; 0x0c
    432c:	6d 87       	std	Y+13, r22	; 0x0d
    432e:	7e 87       	std	Y+14, r23	; 0x0e
    4330:	8f 87       	std	Y+15, r24	; 0x0f
    4332:	98 8b       	std	Y+16, r25	; 0x10
	u64 LOC_u64Reversed = 1;
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	89 83       	std	Y+1, r24	; 0x01
    4338:	1a 82       	std	Y+2, r1	; 0x02
    433a:	1b 82       	std	Y+3, r1	; 0x03
    433c:	1c 82       	std	Y+4, r1	; 0x04
    433e:	1d 82       	std	Y+5, r1	; 0x05
    4340:	1e 82       	std	Y+6, r1	; 0x06
    4342:	1f 82       	std	Y+7, r1	; 0x07
    4344:	18 86       	std	Y+8, r1	; 0x08
	if(Copy_u64Number == 0)
    4346:	89 85       	ldd	r24, Y+9	; 0x09
    4348:	9a 85       	ldd	r25, Y+10	; 0x0a
    434a:	89 2b       	or	r24, r25
    434c:	9b 85       	ldd	r25, Y+11	; 0x0b
    434e:	89 2b       	or	r24, r25
    4350:	9c 85       	ldd	r25, Y+12	; 0x0c
    4352:	89 2b       	or	r24, r25
    4354:	9d 85       	ldd	r25, Y+13	; 0x0d
    4356:	89 2b       	or	r24, r25
    4358:	9e 85       	ldd	r25, Y+14	; 0x0e
    435a:	89 2b       	or	r24, r25
    435c:	9f 85       	ldd	r25, Y+15	; 0x0f
    435e:	89 2b       	or	r24, r25
    4360:	98 89       	ldd	r25, Y+16	; 0x10
    4362:	89 2b       	or	r24, r25
    4364:	88 23       	and	r24, r24
    4366:	09 f0       	breq	.+2      	; 0x436a <CLCD_voidSendNumber+0x6c>
    4368:	62 c3       	rjmp	.+1732   	; 0x4a2e <CLCD_voidSendNumber+0x730>
	{
		CLCD_voidSendCharacter('0');
    436a:	80 e3       	ldi	r24, 0x30	; 48
    436c:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
    4370:	ef c3       	rjmp	.+2014   	; 0x4b50 <CLCD_voidSendNumber+0x852>
	else
	{

		while(Copy_u64Number != 0)
		{
			LOC_u64Reversed = (LOC_u64Reversed*10) + (Copy_u64Number%10);
    4372:	29 81       	ldd	r18, Y+1	; 0x01
    4374:	3a 81       	ldd	r19, Y+2	; 0x02
    4376:	4b 81       	ldd	r20, Y+3	; 0x03
    4378:	5c 81       	ldd	r21, Y+4	; 0x04
    437a:	6d 81       	ldd	r22, Y+5	; 0x05
    437c:	7e 81       	ldd	r23, Y+6	; 0x06
    437e:	8f 81       	ldd	r24, Y+7	; 0x07
    4380:	98 85       	ldd	r25, Y+8	; 0x08
    4382:	a2 2e       	mov	r10, r18
    4384:	b3 2e       	mov	r11, r19
    4386:	c4 2e       	mov	r12, r20
    4388:	d5 2e       	mov	r13, r21
    438a:	e6 2e       	mov	r14, r22
    438c:	f7 2e       	mov	r15, r23
    438e:	08 2f       	mov	r16, r24
    4390:	19 2f       	mov	r17, r25
    4392:	2a 2d       	mov	r18, r10
    4394:	3b 2d       	mov	r19, r11
    4396:	4c 2d       	mov	r20, r12
    4398:	5d 2d       	mov	r21, r13
    439a:	6e 2d       	mov	r22, r14
    439c:	7f 2d       	mov	r23, r15
    439e:	80 2f       	mov	r24, r16
    43a0:	91 2f       	mov	r25, r17
    43a2:	01 e0       	ldi	r16, 0x01	; 1
    43a4:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    43a8:	29 a3       	std	Y+33, r18	; 0x21
    43aa:	3a a3       	std	Y+34, r19	; 0x22
    43ac:	4b a3       	std	Y+35, r20	; 0x23
    43ae:	5c a3       	std	Y+36, r21	; 0x24
    43b0:	6d a3       	std	Y+37, r22	; 0x25
    43b2:	7e a3       	std	Y+38, r23	; 0x26
    43b4:	8f a3       	std	Y+39, r24	; 0x27
    43b6:	98 a7       	std	Y+40, r25	; 0x28
    43b8:	29 a1       	ldd	r18, Y+33	; 0x21
    43ba:	3a a1       	ldd	r19, Y+34	; 0x22
    43bc:	4b a1       	ldd	r20, Y+35	; 0x23
    43be:	5c a1       	ldd	r21, Y+36	; 0x24
    43c0:	6d a1       	ldd	r22, Y+37	; 0x25
    43c2:	7e a1       	ldd	r23, Y+38	; 0x26
    43c4:	8f a1       	ldd	r24, Y+39	; 0x27
    43c6:	98 a5       	ldd	r25, Y+40	; 0x28
    43c8:	02 e0       	ldi	r16, 0x02	; 2
    43ca:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    43ce:	29 a7       	std	Y+41, r18	; 0x29
    43d0:	3a a7       	std	Y+42, r19	; 0x2a
    43d2:	4b a7       	std	Y+43, r20	; 0x2b
    43d4:	5c a7       	std	Y+44, r21	; 0x2c
    43d6:	6d a7       	std	Y+45, r22	; 0x2d
    43d8:	7e a7       	std	Y+46, r23	; 0x2e
    43da:	8f a7       	std	Y+47, r24	; 0x2f
    43dc:	98 ab       	std	Y+48, r25	; 0x30
    43de:	89 a1       	ldd	r24, Y+33	; 0x21
    43e0:	99 a5       	ldd	r25, Y+41	; 0x29
    43e2:	89 0f       	add	r24, r25
    43e4:	89 ab       	std	Y+49, r24	; 0x31
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	89 af       	std	Y+57, r24	; 0x39
    43ea:	99 a9       	ldd	r25, Y+49	; 0x31
    43ec:	89 a1       	ldd	r24, Y+33	; 0x21
    43ee:	98 17       	cp	r25, r24
    43f0:	08 f0       	brcs	.+2      	; 0x43f4 <CLCD_voidSendNumber+0xf6>
    43f2:	19 ae       	std	Y+57, r1	; 0x39
    43f4:	9a a1       	ldd	r25, Y+34	; 0x22
    43f6:	8a a5       	ldd	r24, Y+42	; 0x2a
    43f8:	98 0f       	add	r25, r24
    43fa:	9a ab       	std	Y+50, r25	; 0x32
    43fc:	91 e0       	ldi	r25, 0x01	; 1
    43fe:	9a af       	std	Y+58, r25	; 0x3a
    4400:	8a a9       	ldd	r24, Y+50	; 0x32
    4402:	9a a1       	ldd	r25, Y+34	; 0x22
    4404:	89 17       	cp	r24, r25
    4406:	08 f0       	brcs	.+2      	; 0x440a <CLCD_voidSendNumber+0x10c>
    4408:	1a ae       	std	Y+58, r1	; 0x3a
    440a:	89 ad       	ldd	r24, Y+57	; 0x39
    440c:	9a a9       	ldd	r25, Y+50	; 0x32
    440e:	89 0f       	add	r24, r25
    4410:	8b af       	std	Y+59, r24	; 0x3b
    4412:	81 e0       	ldi	r24, 0x01	; 1
    4414:	8c af       	std	Y+60, r24	; 0x3c
    4416:	9b ad       	ldd	r25, Y+59	; 0x3b
    4418:	8a a9       	ldd	r24, Y+50	; 0x32
    441a:	98 17       	cp	r25, r24
    441c:	08 f0       	brcs	.+2      	; 0x4420 <CLCD_voidSendNumber+0x122>
    441e:	1c ae       	std	Y+60, r1	; 0x3c
    4420:	9a ad       	ldd	r25, Y+58	; 0x3a
    4422:	8c ad       	ldd	r24, Y+60	; 0x3c
    4424:	98 2b       	or	r25, r24
    4426:	9a af       	std	Y+58, r25	; 0x3a
    4428:	9b ad       	ldd	r25, Y+59	; 0x3b
    442a:	9a ab       	std	Y+50, r25	; 0x32
    442c:	8b a1       	ldd	r24, Y+35	; 0x23
    442e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4430:	89 0f       	add	r24, r25
    4432:	8b ab       	std	Y+51, r24	; 0x33
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	8d af       	std	Y+61, r24	; 0x3d
    4438:	9b a9       	ldd	r25, Y+51	; 0x33
    443a:	8b a1       	ldd	r24, Y+35	; 0x23
    443c:	98 17       	cp	r25, r24
    443e:	08 f0       	brcs	.+2      	; 0x4442 <CLCD_voidSendNumber+0x144>
    4440:	1d ae       	std	Y+61, r1	; 0x3d
    4442:	9a ad       	ldd	r25, Y+58	; 0x3a
    4444:	8b a9       	ldd	r24, Y+51	; 0x33
    4446:	98 0f       	add	r25, r24
    4448:	9e af       	std	Y+62, r25	; 0x3e
    444a:	91 e0       	ldi	r25, 0x01	; 1
    444c:	9f af       	std	Y+63, r25	; 0x3f
    444e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4450:	9b a9       	ldd	r25, Y+51	; 0x33
    4452:	89 17       	cp	r24, r25
    4454:	08 f0       	brcs	.+2      	; 0x4458 <CLCD_voidSendNumber+0x15a>
    4456:	1f ae       	std	Y+63, r1	; 0x3f
    4458:	8d ad       	ldd	r24, Y+61	; 0x3d
    445a:	9f ad       	ldd	r25, Y+63	; 0x3f
    445c:	89 2b       	or	r24, r25
    445e:	8d af       	std	Y+61, r24	; 0x3d
    4460:	8e ad       	ldd	r24, Y+62	; 0x3e
    4462:	8b ab       	std	Y+51, r24	; 0x33
    4464:	9c a1       	ldd	r25, Y+36	; 0x24
    4466:	8c a5       	ldd	r24, Y+44	; 0x2c
    4468:	98 0f       	add	r25, r24
    446a:	9c ab       	std	Y+52, r25	; 0x34
    446c:	91 e0       	ldi	r25, 0x01	; 1
    446e:	21 96       	adiw	r28, 0x01	; 1
    4470:	9f af       	std	Y+63, r25	; 0x3f
    4472:	21 97       	sbiw	r28, 0x01	; 1
    4474:	8c a9       	ldd	r24, Y+52	; 0x34
    4476:	9c a1       	ldd	r25, Y+36	; 0x24
    4478:	89 17       	cp	r24, r25
    447a:	18 f0       	brcs	.+6      	; 0x4482 <CLCD_voidSendNumber+0x184>
    447c:	21 96       	adiw	r28, 0x01	; 1
    447e:	1f ae       	std	Y+63, r1	; 0x3f
    4480:	21 97       	sbiw	r28, 0x01	; 1
    4482:	8d ad       	ldd	r24, Y+61	; 0x3d
    4484:	9c a9       	ldd	r25, Y+52	; 0x34
    4486:	89 0f       	add	r24, r25
    4488:	22 96       	adiw	r28, 0x02	; 2
    448a:	8f af       	std	Y+63, r24	; 0x3f
    448c:	22 97       	sbiw	r28, 0x02	; 2
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	23 96       	adiw	r28, 0x03	; 3
    4492:	8f af       	std	Y+63, r24	; 0x3f
    4494:	23 97       	sbiw	r28, 0x03	; 3
    4496:	22 96       	adiw	r28, 0x02	; 2
    4498:	9f ad       	ldd	r25, Y+63	; 0x3f
    449a:	22 97       	sbiw	r28, 0x02	; 2
    449c:	8c a9       	ldd	r24, Y+52	; 0x34
    449e:	98 17       	cp	r25, r24
    44a0:	18 f0       	brcs	.+6      	; 0x44a8 <CLCD_voidSendNumber+0x1aa>
    44a2:	23 96       	adiw	r28, 0x03	; 3
    44a4:	1f ae       	std	Y+63, r1	; 0x3f
    44a6:	23 97       	sbiw	r28, 0x03	; 3
    44a8:	21 96       	adiw	r28, 0x01	; 1
    44aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    44ac:	21 97       	sbiw	r28, 0x01	; 1
    44ae:	23 96       	adiw	r28, 0x03	; 3
    44b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    44b2:	23 97       	sbiw	r28, 0x03	; 3
    44b4:	98 2b       	or	r25, r24
    44b6:	21 96       	adiw	r28, 0x01	; 1
    44b8:	9f af       	std	Y+63, r25	; 0x3f
    44ba:	21 97       	sbiw	r28, 0x01	; 1
    44bc:	22 96       	adiw	r28, 0x02	; 2
    44be:	9f ad       	ldd	r25, Y+63	; 0x3f
    44c0:	22 97       	sbiw	r28, 0x02	; 2
    44c2:	9c ab       	std	Y+52, r25	; 0x34
    44c4:	8d a1       	ldd	r24, Y+37	; 0x25
    44c6:	9d a5       	ldd	r25, Y+45	; 0x2d
    44c8:	89 0f       	add	r24, r25
    44ca:	8d ab       	std	Y+53, r24	; 0x35
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	24 96       	adiw	r28, 0x04	; 4
    44d0:	8f af       	std	Y+63, r24	; 0x3f
    44d2:	24 97       	sbiw	r28, 0x04	; 4
    44d4:	9d a9       	ldd	r25, Y+53	; 0x35
    44d6:	8d a1       	ldd	r24, Y+37	; 0x25
    44d8:	98 17       	cp	r25, r24
    44da:	18 f0       	brcs	.+6      	; 0x44e2 <CLCD_voidSendNumber+0x1e4>
    44dc:	24 96       	adiw	r28, 0x04	; 4
    44de:	1f ae       	std	Y+63, r1	; 0x3f
    44e0:	24 97       	sbiw	r28, 0x04	; 4
    44e2:	21 96       	adiw	r28, 0x01	; 1
    44e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    44e6:	21 97       	sbiw	r28, 0x01	; 1
    44e8:	8d a9       	ldd	r24, Y+53	; 0x35
    44ea:	98 0f       	add	r25, r24
    44ec:	25 96       	adiw	r28, 0x05	; 5
    44ee:	9f af       	std	Y+63, r25	; 0x3f
    44f0:	25 97       	sbiw	r28, 0x05	; 5
    44f2:	91 e0       	ldi	r25, 0x01	; 1
    44f4:	26 96       	adiw	r28, 0x06	; 6
    44f6:	9f af       	std	Y+63, r25	; 0x3f
    44f8:	26 97       	sbiw	r28, 0x06	; 6
    44fa:	25 96       	adiw	r28, 0x05	; 5
    44fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    44fe:	25 97       	sbiw	r28, 0x05	; 5
    4500:	9d a9       	ldd	r25, Y+53	; 0x35
    4502:	89 17       	cp	r24, r25
    4504:	18 f0       	brcs	.+6      	; 0x450c <CLCD_voidSendNumber+0x20e>
    4506:	26 96       	adiw	r28, 0x06	; 6
    4508:	1f ae       	std	Y+63, r1	; 0x3f
    450a:	26 97       	sbiw	r28, 0x06	; 6
    450c:	24 96       	adiw	r28, 0x04	; 4
    450e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4510:	24 97       	sbiw	r28, 0x04	; 4
    4512:	26 96       	adiw	r28, 0x06	; 6
    4514:	9f ad       	ldd	r25, Y+63	; 0x3f
    4516:	26 97       	sbiw	r28, 0x06	; 6
    4518:	89 2b       	or	r24, r25
    451a:	24 96       	adiw	r28, 0x04	; 4
    451c:	8f af       	std	Y+63, r24	; 0x3f
    451e:	24 97       	sbiw	r28, 0x04	; 4
    4520:	25 96       	adiw	r28, 0x05	; 5
    4522:	8f ad       	ldd	r24, Y+63	; 0x3f
    4524:	25 97       	sbiw	r28, 0x05	; 5
    4526:	8d ab       	std	Y+53, r24	; 0x35
    4528:	9e a1       	ldd	r25, Y+38	; 0x26
    452a:	8e a5       	ldd	r24, Y+46	; 0x2e
    452c:	98 0f       	add	r25, r24
    452e:	9e ab       	std	Y+54, r25	; 0x36
    4530:	91 e0       	ldi	r25, 0x01	; 1
    4532:	27 96       	adiw	r28, 0x07	; 7
    4534:	9f af       	std	Y+63, r25	; 0x3f
    4536:	27 97       	sbiw	r28, 0x07	; 7
    4538:	8e a9       	ldd	r24, Y+54	; 0x36
    453a:	9e a1       	ldd	r25, Y+38	; 0x26
    453c:	89 17       	cp	r24, r25
    453e:	18 f0       	brcs	.+6      	; 0x4546 <CLCD_voidSendNumber+0x248>
    4540:	27 96       	adiw	r28, 0x07	; 7
    4542:	1f ae       	std	Y+63, r1	; 0x3f
    4544:	27 97       	sbiw	r28, 0x07	; 7
    4546:	24 96       	adiw	r28, 0x04	; 4
    4548:	8f ad       	ldd	r24, Y+63	; 0x3f
    454a:	24 97       	sbiw	r28, 0x04	; 4
    454c:	9e a9       	ldd	r25, Y+54	; 0x36
    454e:	89 0f       	add	r24, r25
    4550:	28 96       	adiw	r28, 0x08	; 8
    4552:	8f af       	std	Y+63, r24	; 0x3f
    4554:	28 97       	sbiw	r28, 0x08	; 8
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	29 96       	adiw	r28, 0x09	; 9
    455a:	8f af       	std	Y+63, r24	; 0x3f
    455c:	29 97       	sbiw	r28, 0x09	; 9
    455e:	28 96       	adiw	r28, 0x08	; 8
    4560:	9f ad       	ldd	r25, Y+63	; 0x3f
    4562:	28 97       	sbiw	r28, 0x08	; 8
    4564:	8e a9       	ldd	r24, Y+54	; 0x36
    4566:	98 17       	cp	r25, r24
    4568:	18 f0       	brcs	.+6      	; 0x4570 <CLCD_voidSendNumber+0x272>
    456a:	29 96       	adiw	r28, 0x09	; 9
    456c:	1f ae       	std	Y+63, r1	; 0x3f
    456e:	29 97       	sbiw	r28, 0x09	; 9
    4570:	27 96       	adiw	r28, 0x07	; 7
    4572:	9f ad       	ldd	r25, Y+63	; 0x3f
    4574:	27 97       	sbiw	r28, 0x07	; 7
    4576:	29 96       	adiw	r28, 0x09	; 9
    4578:	8f ad       	ldd	r24, Y+63	; 0x3f
    457a:	29 97       	sbiw	r28, 0x09	; 9
    457c:	98 2b       	or	r25, r24
    457e:	27 96       	adiw	r28, 0x07	; 7
    4580:	9f af       	std	Y+63, r25	; 0x3f
    4582:	27 97       	sbiw	r28, 0x07	; 7
    4584:	28 96       	adiw	r28, 0x08	; 8
    4586:	9f ad       	ldd	r25, Y+63	; 0x3f
    4588:	28 97       	sbiw	r28, 0x08	; 8
    458a:	9e ab       	std	Y+54, r25	; 0x36
    458c:	8f a1       	ldd	r24, Y+39	; 0x27
    458e:	9f a5       	ldd	r25, Y+47	; 0x2f
    4590:	89 0f       	add	r24, r25
    4592:	8f ab       	std	Y+55, r24	; 0x37
    4594:	81 e0       	ldi	r24, 0x01	; 1
    4596:	2a 96       	adiw	r28, 0x0a	; 10
    4598:	8f af       	std	Y+63, r24	; 0x3f
    459a:	2a 97       	sbiw	r28, 0x0a	; 10
    459c:	9f a9       	ldd	r25, Y+55	; 0x37
    459e:	8f a1       	ldd	r24, Y+39	; 0x27
    45a0:	98 17       	cp	r25, r24
    45a2:	18 f0       	brcs	.+6      	; 0x45aa <CLCD_voidSendNumber+0x2ac>
    45a4:	2a 96       	adiw	r28, 0x0a	; 10
    45a6:	1f ae       	std	Y+63, r1	; 0x3f
    45a8:	2a 97       	sbiw	r28, 0x0a	; 10
    45aa:	27 96       	adiw	r28, 0x07	; 7
    45ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    45ae:	27 97       	sbiw	r28, 0x07	; 7
    45b0:	8f a9       	ldd	r24, Y+55	; 0x37
    45b2:	98 0f       	add	r25, r24
    45b4:	2b 96       	adiw	r28, 0x0b	; 11
    45b6:	9f af       	std	Y+63, r25	; 0x3f
    45b8:	2b 97       	sbiw	r28, 0x0b	; 11
    45ba:	91 e0       	ldi	r25, 0x01	; 1
    45bc:	2c 96       	adiw	r28, 0x0c	; 12
    45be:	9f af       	std	Y+63, r25	; 0x3f
    45c0:	2c 97       	sbiw	r28, 0x0c	; 12
    45c2:	2b 96       	adiw	r28, 0x0b	; 11
    45c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    45c6:	2b 97       	sbiw	r28, 0x0b	; 11
    45c8:	9f a9       	ldd	r25, Y+55	; 0x37
    45ca:	89 17       	cp	r24, r25
    45cc:	18 f0       	brcs	.+6      	; 0x45d4 <CLCD_voidSendNumber+0x2d6>
    45ce:	2c 96       	adiw	r28, 0x0c	; 12
    45d0:	1f ae       	std	Y+63, r1	; 0x3f
    45d2:	2c 97       	sbiw	r28, 0x0c	; 12
    45d4:	2a 96       	adiw	r28, 0x0a	; 10
    45d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    45d8:	2a 97       	sbiw	r28, 0x0a	; 10
    45da:	2c 96       	adiw	r28, 0x0c	; 12
    45dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    45de:	2c 97       	sbiw	r28, 0x0c	; 12
    45e0:	89 2b       	or	r24, r25
    45e2:	2a 96       	adiw	r28, 0x0a	; 10
    45e4:	8f af       	std	Y+63, r24	; 0x3f
    45e6:	2a 97       	sbiw	r28, 0x0a	; 10
    45e8:	2b 96       	adiw	r28, 0x0b	; 11
    45ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    45ec:	2b 97       	sbiw	r28, 0x0b	; 11
    45ee:	8f ab       	std	Y+55, r24	; 0x37
    45f0:	98 a5       	ldd	r25, Y+40	; 0x28
    45f2:	88 a9       	ldd	r24, Y+48	; 0x30
    45f4:	98 0f       	add	r25, r24
    45f6:	98 af       	std	Y+56, r25	; 0x38
    45f8:	2a 96       	adiw	r28, 0x0a	; 10
    45fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    45fc:	2a 97       	sbiw	r28, 0x0a	; 10
    45fe:	98 ad       	ldd	r25, Y+56	; 0x38
    4600:	89 0f       	add	r24, r25
    4602:	88 af       	std	Y+56, r24	; 0x38
    4604:	89 a9       	ldd	r24, Y+49	; 0x31
    4606:	89 8f       	std	Y+25, r24	; 0x19
    4608:	9a a9       	ldd	r25, Y+50	; 0x32
    460a:	9a 8f       	std	Y+26, r25	; 0x1a
    460c:	8b a9       	ldd	r24, Y+51	; 0x33
    460e:	8b 8f       	std	Y+27, r24	; 0x1b
    4610:	9c a9       	ldd	r25, Y+52	; 0x34
    4612:	9c 8f       	std	Y+28, r25	; 0x1c
    4614:	8d a9       	ldd	r24, Y+53	; 0x35
    4616:	8d 8f       	std	Y+29, r24	; 0x1d
    4618:	9e a9       	ldd	r25, Y+54	; 0x36
    461a:	9e 8f       	std	Y+30, r25	; 0x1e
    461c:	8f a9       	ldd	r24, Y+55	; 0x37
    461e:	8f 8f       	std	Y+31, r24	; 0x1f
    4620:	98 ad       	ldd	r25, Y+56	; 0x38
    4622:	98 a3       	std	Y+32, r25	; 0x20
    4624:	a9 84       	ldd	r10, Y+9	; 0x09
    4626:	ba 84       	ldd	r11, Y+10	; 0x0a
    4628:	cb 84       	ldd	r12, Y+11	; 0x0b
    462a:	dc 84       	ldd	r13, Y+12	; 0x0c
    462c:	ed 84       	ldd	r14, Y+13	; 0x0d
    462e:	fe 84       	ldd	r15, Y+14	; 0x0e
    4630:	0f 85       	ldd	r16, Y+15	; 0x0f
    4632:	18 89       	ldd	r17, Y+16	; 0x10
    4634:	2a 2d       	mov	r18, r10
    4636:	3b 2d       	mov	r19, r11
    4638:	4c 2d       	mov	r20, r12
    463a:	5d 2d       	mov	r21, r13
    463c:	6e 2d       	mov	r22, r14
    463e:	7f 2d       	mov	r23, r15
    4640:	80 2f       	mov	r24, r16
    4642:	91 2f       	mov	r25, r17
    4644:	0f 2e       	mov	r0, r31
    4646:	fa e0       	ldi	r31, 0x0A	; 10
    4648:	af 2e       	mov	r10, r31
    464a:	f0 2d       	mov	r31, r0
    464c:	bb 24       	eor	r11, r11
    464e:	cc 24       	eor	r12, r12
    4650:	dd 24       	eor	r13, r13
    4652:	ee 24       	eor	r14, r14
    4654:	ff 24       	eor	r15, r15
    4656:	00 e0       	ldi	r16, 0x00	; 0
    4658:	10 e0       	ldi	r17, 0x00	; 0
    465a:	0e 94 11 08 	call	0x1022	; 0x1022 <__umoddi3>
    465e:	a2 2e       	mov	r10, r18
    4660:	b3 2e       	mov	r11, r19
    4662:	c4 2e       	mov	r12, r20
    4664:	d5 2e       	mov	r13, r21
    4666:	e6 2e       	mov	r14, r22
    4668:	f7 2e       	mov	r15, r23
    466a:	08 2f       	mov	r16, r24
    466c:	19 2f       	mov	r17, r25
    466e:	a9 8a       	std	Y+17, r10	; 0x11
    4670:	ba 8a       	std	Y+18, r11	; 0x12
    4672:	cb 8a       	std	Y+19, r12	; 0x13
    4674:	dc 8a       	std	Y+20, r13	; 0x14
    4676:	ed 8a       	std	Y+21, r14	; 0x15
    4678:	fe 8a       	std	Y+22, r15	; 0x16
    467a:	0f 8b       	std	Y+23, r16	; 0x17
    467c:	18 8f       	std	Y+24, r17	; 0x18
    467e:	89 8d       	ldd	r24, Y+25	; 0x19
    4680:	99 89       	ldd	r25, Y+17	; 0x11
    4682:	89 0f       	add	r24, r25
    4684:	2d 96       	adiw	r28, 0x0d	; 13
    4686:	8f af       	std	Y+63, r24	; 0x3f
    4688:	2d 97       	sbiw	r28, 0x0d	; 13
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	65 96       	adiw	r28, 0x15	; 21
    468e:	8f af       	std	Y+63, r24	; 0x3f
    4690:	65 97       	sbiw	r28, 0x15	; 21
    4692:	2d 96       	adiw	r28, 0x0d	; 13
    4694:	9f ad       	ldd	r25, Y+63	; 0x3f
    4696:	2d 97       	sbiw	r28, 0x0d	; 13
    4698:	89 8d       	ldd	r24, Y+25	; 0x19
    469a:	98 17       	cp	r25, r24
    469c:	18 f0       	brcs	.+6      	; 0x46a4 <CLCD_voidSendNumber+0x3a6>
    469e:	65 96       	adiw	r28, 0x15	; 21
    46a0:	1f ae       	std	Y+63, r1	; 0x3f
    46a2:	65 97       	sbiw	r28, 0x15	; 21
    46a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46a6:	8a 89       	ldd	r24, Y+18	; 0x12
    46a8:	98 0f       	add	r25, r24
    46aa:	2e 96       	adiw	r28, 0x0e	; 14
    46ac:	9f af       	std	Y+63, r25	; 0x3f
    46ae:	2e 97       	sbiw	r28, 0x0e	; 14
    46b0:	91 e0       	ldi	r25, 0x01	; 1
    46b2:	66 96       	adiw	r28, 0x16	; 22
    46b4:	9f af       	std	Y+63, r25	; 0x3f
    46b6:	66 97       	sbiw	r28, 0x16	; 22
    46b8:	2e 96       	adiw	r28, 0x0e	; 14
    46ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    46bc:	2e 97       	sbiw	r28, 0x0e	; 14
    46be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46c0:	89 17       	cp	r24, r25
    46c2:	18 f0       	brcs	.+6      	; 0x46ca <CLCD_voidSendNumber+0x3cc>
    46c4:	66 96       	adiw	r28, 0x16	; 22
    46c6:	1f ae       	std	Y+63, r1	; 0x3f
    46c8:	66 97       	sbiw	r28, 0x16	; 22
    46ca:	65 96       	adiw	r28, 0x15	; 21
    46cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    46ce:	65 97       	sbiw	r28, 0x15	; 21
    46d0:	2e 96       	adiw	r28, 0x0e	; 14
    46d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    46d4:	2e 97       	sbiw	r28, 0x0e	; 14
    46d6:	89 0f       	add	r24, r25
    46d8:	67 96       	adiw	r28, 0x17	; 23
    46da:	8f af       	std	Y+63, r24	; 0x3f
    46dc:	67 97       	sbiw	r28, 0x17	; 23
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	68 96       	adiw	r28, 0x18	; 24
    46e2:	8f af       	std	Y+63, r24	; 0x3f
    46e4:	68 97       	sbiw	r28, 0x18	; 24
    46e6:	67 96       	adiw	r28, 0x17	; 23
    46e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    46ea:	67 97       	sbiw	r28, 0x17	; 23
    46ec:	2e 96       	adiw	r28, 0x0e	; 14
    46ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    46f0:	2e 97       	sbiw	r28, 0x0e	; 14
    46f2:	98 17       	cp	r25, r24
    46f4:	18 f0       	brcs	.+6      	; 0x46fc <CLCD_voidSendNumber+0x3fe>
    46f6:	68 96       	adiw	r28, 0x18	; 24
    46f8:	1f ae       	std	Y+63, r1	; 0x3f
    46fa:	68 97       	sbiw	r28, 0x18	; 24
    46fc:	66 96       	adiw	r28, 0x16	; 22
    46fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    4700:	66 97       	sbiw	r28, 0x16	; 22
    4702:	68 96       	adiw	r28, 0x18	; 24
    4704:	8f ad       	ldd	r24, Y+63	; 0x3f
    4706:	68 97       	sbiw	r28, 0x18	; 24
    4708:	98 2b       	or	r25, r24
    470a:	66 96       	adiw	r28, 0x16	; 22
    470c:	9f af       	std	Y+63, r25	; 0x3f
    470e:	66 97       	sbiw	r28, 0x16	; 22
    4710:	67 96       	adiw	r28, 0x17	; 23
    4712:	9f ad       	ldd	r25, Y+63	; 0x3f
    4714:	67 97       	sbiw	r28, 0x17	; 23
    4716:	2e 96       	adiw	r28, 0x0e	; 14
    4718:	9f af       	std	Y+63, r25	; 0x3f
    471a:	2e 97       	sbiw	r28, 0x0e	; 14
    471c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    471e:	9b 89       	ldd	r25, Y+19	; 0x13
    4720:	89 0f       	add	r24, r25
    4722:	2f 96       	adiw	r28, 0x0f	; 15
    4724:	8f af       	std	Y+63, r24	; 0x3f
    4726:	2f 97       	sbiw	r28, 0x0f	; 15
    4728:	81 e0       	ldi	r24, 0x01	; 1
    472a:	69 96       	adiw	r28, 0x19	; 25
    472c:	8f af       	std	Y+63, r24	; 0x3f
    472e:	69 97       	sbiw	r28, 0x19	; 25
    4730:	2f 96       	adiw	r28, 0x0f	; 15
    4732:	9f ad       	ldd	r25, Y+63	; 0x3f
    4734:	2f 97       	sbiw	r28, 0x0f	; 15
    4736:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4738:	98 17       	cp	r25, r24
    473a:	18 f0       	brcs	.+6      	; 0x4742 <CLCD_voidSendNumber+0x444>
    473c:	69 96       	adiw	r28, 0x19	; 25
    473e:	1f ae       	std	Y+63, r1	; 0x3f
    4740:	69 97       	sbiw	r28, 0x19	; 25
    4742:	66 96       	adiw	r28, 0x16	; 22
    4744:	9f ad       	ldd	r25, Y+63	; 0x3f
    4746:	66 97       	sbiw	r28, 0x16	; 22
    4748:	2f 96       	adiw	r28, 0x0f	; 15
    474a:	8f ad       	ldd	r24, Y+63	; 0x3f
    474c:	2f 97       	sbiw	r28, 0x0f	; 15
    474e:	98 0f       	add	r25, r24
    4750:	6a 96       	adiw	r28, 0x1a	; 26
    4752:	9f af       	std	Y+63, r25	; 0x3f
    4754:	6a 97       	sbiw	r28, 0x1a	; 26
    4756:	91 e0       	ldi	r25, 0x01	; 1
    4758:	6b 96       	adiw	r28, 0x1b	; 27
    475a:	9f af       	std	Y+63, r25	; 0x3f
    475c:	6b 97       	sbiw	r28, 0x1b	; 27
    475e:	6a 96       	adiw	r28, 0x1a	; 26
    4760:	8f ad       	ldd	r24, Y+63	; 0x3f
    4762:	6a 97       	sbiw	r28, 0x1a	; 26
    4764:	2f 96       	adiw	r28, 0x0f	; 15
    4766:	9f ad       	ldd	r25, Y+63	; 0x3f
    4768:	2f 97       	sbiw	r28, 0x0f	; 15
    476a:	89 17       	cp	r24, r25
    476c:	18 f0       	brcs	.+6      	; 0x4774 <CLCD_voidSendNumber+0x476>
    476e:	6b 96       	adiw	r28, 0x1b	; 27
    4770:	1f ae       	std	Y+63, r1	; 0x3f
    4772:	6b 97       	sbiw	r28, 0x1b	; 27
    4774:	69 96       	adiw	r28, 0x19	; 25
    4776:	8f ad       	ldd	r24, Y+63	; 0x3f
    4778:	69 97       	sbiw	r28, 0x19	; 25
    477a:	6b 96       	adiw	r28, 0x1b	; 27
    477c:	9f ad       	ldd	r25, Y+63	; 0x3f
    477e:	6b 97       	sbiw	r28, 0x1b	; 27
    4780:	89 2b       	or	r24, r25
    4782:	69 96       	adiw	r28, 0x19	; 25
    4784:	8f af       	std	Y+63, r24	; 0x3f
    4786:	69 97       	sbiw	r28, 0x19	; 25
    4788:	6a 96       	adiw	r28, 0x1a	; 26
    478a:	8f ad       	ldd	r24, Y+63	; 0x3f
    478c:	6a 97       	sbiw	r28, 0x1a	; 26
    478e:	2f 96       	adiw	r28, 0x0f	; 15
    4790:	8f af       	std	Y+63, r24	; 0x3f
    4792:	2f 97       	sbiw	r28, 0x0f	; 15
    4794:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4796:	8c 89       	ldd	r24, Y+20	; 0x14
    4798:	98 0f       	add	r25, r24
    479a:	60 96       	adiw	r28, 0x10	; 16
    479c:	9f af       	std	Y+63, r25	; 0x3f
    479e:	60 97       	sbiw	r28, 0x10	; 16
    47a0:	91 e0       	ldi	r25, 0x01	; 1
    47a2:	6c 96       	adiw	r28, 0x1c	; 28
    47a4:	9f af       	std	Y+63, r25	; 0x3f
    47a6:	6c 97       	sbiw	r28, 0x1c	; 28
    47a8:	60 96       	adiw	r28, 0x10	; 16
    47aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    47ac:	60 97       	sbiw	r28, 0x10	; 16
    47ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47b0:	89 17       	cp	r24, r25
    47b2:	18 f0       	brcs	.+6      	; 0x47ba <CLCD_voidSendNumber+0x4bc>
    47b4:	6c 96       	adiw	r28, 0x1c	; 28
    47b6:	1f ae       	std	Y+63, r1	; 0x3f
    47b8:	6c 97       	sbiw	r28, 0x1c	; 28
    47ba:	69 96       	adiw	r28, 0x19	; 25
    47bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    47be:	69 97       	sbiw	r28, 0x19	; 25
    47c0:	60 96       	adiw	r28, 0x10	; 16
    47c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    47c4:	60 97       	sbiw	r28, 0x10	; 16
    47c6:	89 0f       	add	r24, r25
    47c8:	6d 96       	adiw	r28, 0x1d	; 29
    47ca:	8f af       	std	Y+63, r24	; 0x3f
    47cc:	6d 97       	sbiw	r28, 0x1d	; 29
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	6e 96       	adiw	r28, 0x1e	; 30
    47d2:	8f af       	std	Y+63, r24	; 0x3f
    47d4:	6e 97       	sbiw	r28, 0x1e	; 30
    47d6:	6d 96       	adiw	r28, 0x1d	; 29
    47d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    47da:	6d 97       	sbiw	r28, 0x1d	; 29
    47dc:	60 96       	adiw	r28, 0x10	; 16
    47de:	8f ad       	ldd	r24, Y+63	; 0x3f
    47e0:	60 97       	sbiw	r28, 0x10	; 16
    47e2:	98 17       	cp	r25, r24
    47e4:	18 f0       	brcs	.+6      	; 0x47ec <CLCD_voidSendNumber+0x4ee>
    47e6:	6e 96       	adiw	r28, 0x1e	; 30
    47e8:	1f ae       	std	Y+63, r1	; 0x3f
    47ea:	6e 97       	sbiw	r28, 0x1e	; 30
    47ec:	6c 96       	adiw	r28, 0x1c	; 28
    47ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    47f0:	6c 97       	sbiw	r28, 0x1c	; 28
    47f2:	6e 96       	adiw	r28, 0x1e	; 30
    47f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    47f6:	6e 97       	sbiw	r28, 0x1e	; 30
    47f8:	98 2b       	or	r25, r24
    47fa:	6c 96       	adiw	r28, 0x1c	; 28
    47fc:	9f af       	std	Y+63, r25	; 0x3f
    47fe:	6c 97       	sbiw	r28, 0x1c	; 28
    4800:	6d 96       	adiw	r28, 0x1d	; 29
    4802:	9f ad       	ldd	r25, Y+63	; 0x3f
    4804:	6d 97       	sbiw	r28, 0x1d	; 29
    4806:	60 96       	adiw	r28, 0x10	; 16
    4808:	9f af       	std	Y+63, r25	; 0x3f
    480a:	60 97       	sbiw	r28, 0x10	; 16
    480c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    480e:	9d 89       	ldd	r25, Y+21	; 0x15
    4810:	89 0f       	add	r24, r25
    4812:	61 96       	adiw	r28, 0x11	; 17
    4814:	8f af       	std	Y+63, r24	; 0x3f
    4816:	61 97       	sbiw	r28, 0x11	; 17
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	6f 96       	adiw	r28, 0x1f	; 31
    481c:	8f af       	std	Y+63, r24	; 0x3f
    481e:	6f 97       	sbiw	r28, 0x1f	; 31
    4820:	61 96       	adiw	r28, 0x11	; 17
    4822:	9f ad       	ldd	r25, Y+63	; 0x3f
    4824:	61 97       	sbiw	r28, 0x11	; 17
    4826:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4828:	98 17       	cp	r25, r24
    482a:	18 f0       	brcs	.+6      	; 0x4832 <CLCD_voidSendNumber+0x534>
    482c:	6f 96       	adiw	r28, 0x1f	; 31
    482e:	1f ae       	std	Y+63, r1	; 0x3f
    4830:	6f 97       	sbiw	r28, 0x1f	; 31
    4832:	6c 96       	adiw	r28, 0x1c	; 28
    4834:	9f ad       	ldd	r25, Y+63	; 0x3f
    4836:	6c 97       	sbiw	r28, 0x1c	; 28
    4838:	61 96       	adiw	r28, 0x11	; 17
    483a:	8f ad       	ldd	r24, Y+63	; 0x3f
    483c:	61 97       	sbiw	r28, 0x11	; 17
    483e:	98 0f       	add	r25, r24
    4840:	a0 96       	adiw	r28, 0x20	; 32
    4842:	9f af       	std	Y+63, r25	; 0x3f
    4844:	a0 97       	sbiw	r28, 0x20	; 32
    4846:	91 e0       	ldi	r25, 0x01	; 1
    4848:	a1 96       	adiw	r28, 0x21	; 33
    484a:	9f af       	std	Y+63, r25	; 0x3f
    484c:	a1 97       	sbiw	r28, 0x21	; 33
    484e:	a0 96       	adiw	r28, 0x20	; 32
    4850:	8f ad       	ldd	r24, Y+63	; 0x3f
    4852:	a0 97       	sbiw	r28, 0x20	; 32
    4854:	61 96       	adiw	r28, 0x11	; 17
    4856:	9f ad       	ldd	r25, Y+63	; 0x3f
    4858:	61 97       	sbiw	r28, 0x11	; 17
    485a:	89 17       	cp	r24, r25
    485c:	18 f0       	brcs	.+6      	; 0x4864 <CLCD_voidSendNumber+0x566>
    485e:	a1 96       	adiw	r28, 0x21	; 33
    4860:	1f ae       	std	Y+63, r1	; 0x3f
    4862:	a1 97       	sbiw	r28, 0x21	; 33
    4864:	6f 96       	adiw	r28, 0x1f	; 31
    4866:	8f ad       	ldd	r24, Y+63	; 0x3f
    4868:	6f 97       	sbiw	r28, 0x1f	; 31
    486a:	a1 96       	adiw	r28, 0x21	; 33
    486c:	9f ad       	ldd	r25, Y+63	; 0x3f
    486e:	a1 97       	sbiw	r28, 0x21	; 33
    4870:	89 2b       	or	r24, r25
    4872:	6f 96       	adiw	r28, 0x1f	; 31
    4874:	8f af       	std	Y+63, r24	; 0x3f
    4876:	6f 97       	sbiw	r28, 0x1f	; 31
    4878:	a0 96       	adiw	r28, 0x20	; 32
    487a:	8f ad       	ldd	r24, Y+63	; 0x3f
    487c:	a0 97       	sbiw	r28, 0x20	; 32
    487e:	61 96       	adiw	r28, 0x11	; 17
    4880:	8f af       	std	Y+63, r24	; 0x3f
    4882:	61 97       	sbiw	r28, 0x11	; 17
    4884:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4886:	8e 89       	ldd	r24, Y+22	; 0x16
    4888:	98 0f       	add	r25, r24
    488a:	62 96       	adiw	r28, 0x12	; 18
    488c:	9f af       	std	Y+63, r25	; 0x3f
    488e:	62 97       	sbiw	r28, 0x12	; 18
    4890:	91 e0       	ldi	r25, 0x01	; 1
    4892:	a2 96       	adiw	r28, 0x22	; 34
    4894:	9f af       	std	Y+63, r25	; 0x3f
    4896:	a2 97       	sbiw	r28, 0x22	; 34
    4898:	62 96       	adiw	r28, 0x12	; 18
    489a:	8f ad       	ldd	r24, Y+63	; 0x3f
    489c:	62 97       	sbiw	r28, 0x12	; 18
    489e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48a0:	89 17       	cp	r24, r25
    48a2:	18 f0       	brcs	.+6      	; 0x48aa <CLCD_voidSendNumber+0x5ac>
    48a4:	a2 96       	adiw	r28, 0x22	; 34
    48a6:	1f ae       	std	Y+63, r1	; 0x3f
    48a8:	a2 97       	sbiw	r28, 0x22	; 34
    48aa:	6f 96       	adiw	r28, 0x1f	; 31
    48ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    48ae:	6f 97       	sbiw	r28, 0x1f	; 31
    48b0:	62 96       	adiw	r28, 0x12	; 18
    48b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    48b4:	62 97       	sbiw	r28, 0x12	; 18
    48b6:	89 0f       	add	r24, r25
    48b8:	a3 96       	adiw	r28, 0x23	; 35
    48ba:	8f af       	std	Y+63, r24	; 0x3f
    48bc:	a3 97       	sbiw	r28, 0x23	; 35
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	a4 96       	adiw	r28, 0x24	; 36
    48c2:	8f af       	std	Y+63, r24	; 0x3f
    48c4:	a4 97       	sbiw	r28, 0x24	; 36
    48c6:	a3 96       	adiw	r28, 0x23	; 35
    48c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    48ca:	a3 97       	sbiw	r28, 0x23	; 35
    48cc:	62 96       	adiw	r28, 0x12	; 18
    48ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    48d0:	62 97       	sbiw	r28, 0x12	; 18
    48d2:	98 17       	cp	r25, r24
    48d4:	18 f0       	brcs	.+6      	; 0x48dc <CLCD_voidSendNumber+0x5de>
    48d6:	a4 96       	adiw	r28, 0x24	; 36
    48d8:	1f ae       	std	Y+63, r1	; 0x3f
    48da:	a4 97       	sbiw	r28, 0x24	; 36
    48dc:	a2 96       	adiw	r28, 0x22	; 34
    48de:	9f ad       	ldd	r25, Y+63	; 0x3f
    48e0:	a2 97       	sbiw	r28, 0x22	; 34
    48e2:	a4 96       	adiw	r28, 0x24	; 36
    48e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    48e6:	a4 97       	sbiw	r28, 0x24	; 36
    48e8:	98 2b       	or	r25, r24
    48ea:	a2 96       	adiw	r28, 0x22	; 34
    48ec:	9f af       	std	Y+63, r25	; 0x3f
    48ee:	a2 97       	sbiw	r28, 0x22	; 34
    48f0:	a3 96       	adiw	r28, 0x23	; 35
    48f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    48f4:	a3 97       	sbiw	r28, 0x23	; 35
    48f6:	62 96       	adiw	r28, 0x12	; 18
    48f8:	9f af       	std	Y+63, r25	; 0x3f
    48fa:	62 97       	sbiw	r28, 0x12	; 18
    48fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48fe:	9f 89       	ldd	r25, Y+23	; 0x17
    4900:	89 0f       	add	r24, r25
    4902:	63 96       	adiw	r28, 0x13	; 19
    4904:	8f af       	std	Y+63, r24	; 0x3f
    4906:	63 97       	sbiw	r28, 0x13	; 19
    4908:	81 e0       	ldi	r24, 0x01	; 1
    490a:	a5 96       	adiw	r28, 0x25	; 37
    490c:	8f af       	std	Y+63, r24	; 0x3f
    490e:	a5 97       	sbiw	r28, 0x25	; 37
    4910:	63 96       	adiw	r28, 0x13	; 19
    4912:	9f ad       	ldd	r25, Y+63	; 0x3f
    4914:	63 97       	sbiw	r28, 0x13	; 19
    4916:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4918:	98 17       	cp	r25, r24
    491a:	18 f0       	brcs	.+6      	; 0x4922 <CLCD_voidSendNumber+0x624>
    491c:	a5 96       	adiw	r28, 0x25	; 37
    491e:	1f ae       	std	Y+63, r1	; 0x3f
    4920:	a5 97       	sbiw	r28, 0x25	; 37
    4922:	a2 96       	adiw	r28, 0x22	; 34
    4924:	9f ad       	ldd	r25, Y+63	; 0x3f
    4926:	a2 97       	sbiw	r28, 0x22	; 34
    4928:	63 96       	adiw	r28, 0x13	; 19
    492a:	8f ad       	ldd	r24, Y+63	; 0x3f
    492c:	63 97       	sbiw	r28, 0x13	; 19
    492e:	98 0f       	add	r25, r24
    4930:	a6 96       	adiw	r28, 0x26	; 38
    4932:	9f af       	std	Y+63, r25	; 0x3f
    4934:	a6 97       	sbiw	r28, 0x26	; 38
    4936:	91 e0       	ldi	r25, 0x01	; 1
    4938:	a7 96       	adiw	r28, 0x27	; 39
    493a:	9f af       	std	Y+63, r25	; 0x3f
    493c:	a7 97       	sbiw	r28, 0x27	; 39
    493e:	a6 96       	adiw	r28, 0x26	; 38
    4940:	8f ad       	ldd	r24, Y+63	; 0x3f
    4942:	a6 97       	sbiw	r28, 0x26	; 38
    4944:	63 96       	adiw	r28, 0x13	; 19
    4946:	9f ad       	ldd	r25, Y+63	; 0x3f
    4948:	63 97       	sbiw	r28, 0x13	; 19
    494a:	89 17       	cp	r24, r25
    494c:	18 f0       	brcs	.+6      	; 0x4954 <CLCD_voidSendNumber+0x656>
    494e:	a7 96       	adiw	r28, 0x27	; 39
    4950:	1f ae       	std	Y+63, r1	; 0x3f
    4952:	a7 97       	sbiw	r28, 0x27	; 39
    4954:	a5 96       	adiw	r28, 0x25	; 37
    4956:	8f ad       	ldd	r24, Y+63	; 0x3f
    4958:	a5 97       	sbiw	r28, 0x25	; 37
    495a:	a7 96       	adiw	r28, 0x27	; 39
    495c:	9f ad       	ldd	r25, Y+63	; 0x3f
    495e:	a7 97       	sbiw	r28, 0x27	; 39
    4960:	89 2b       	or	r24, r25
    4962:	a5 96       	adiw	r28, 0x25	; 37
    4964:	8f af       	std	Y+63, r24	; 0x3f
    4966:	a5 97       	sbiw	r28, 0x25	; 37
    4968:	a6 96       	adiw	r28, 0x26	; 38
    496a:	8f ad       	ldd	r24, Y+63	; 0x3f
    496c:	a6 97       	sbiw	r28, 0x26	; 38
    496e:	63 96       	adiw	r28, 0x13	; 19
    4970:	8f af       	std	Y+63, r24	; 0x3f
    4972:	63 97       	sbiw	r28, 0x13	; 19
    4974:	98 a1       	ldd	r25, Y+32	; 0x20
    4976:	88 8d       	ldd	r24, Y+24	; 0x18
    4978:	98 0f       	add	r25, r24
    497a:	64 96       	adiw	r28, 0x14	; 20
    497c:	9f af       	std	Y+63, r25	; 0x3f
    497e:	64 97       	sbiw	r28, 0x14	; 20
    4980:	a5 96       	adiw	r28, 0x25	; 37
    4982:	8f ad       	ldd	r24, Y+63	; 0x3f
    4984:	a5 97       	sbiw	r28, 0x25	; 37
    4986:	64 96       	adiw	r28, 0x14	; 20
    4988:	9f ad       	ldd	r25, Y+63	; 0x3f
    498a:	64 97       	sbiw	r28, 0x14	; 20
    498c:	89 0f       	add	r24, r25
    498e:	64 96       	adiw	r28, 0x14	; 20
    4990:	8f af       	std	Y+63, r24	; 0x3f
    4992:	64 97       	sbiw	r28, 0x14	; 20
    4994:	2d 96       	adiw	r28, 0x0d	; 13
    4996:	8f ad       	ldd	r24, Y+63	; 0x3f
    4998:	2d 97       	sbiw	r28, 0x0d	; 13
    499a:	89 83       	std	Y+1, r24	; 0x01
    499c:	2e 96       	adiw	r28, 0x0e	; 14
    499e:	9f ad       	ldd	r25, Y+63	; 0x3f
    49a0:	2e 97       	sbiw	r28, 0x0e	; 14
    49a2:	9a 83       	std	Y+2, r25	; 0x02
    49a4:	2f 96       	adiw	r28, 0x0f	; 15
    49a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    49a8:	2f 97       	sbiw	r28, 0x0f	; 15
    49aa:	8b 83       	std	Y+3, r24	; 0x03
    49ac:	60 96       	adiw	r28, 0x10	; 16
    49ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    49b0:	60 97       	sbiw	r28, 0x10	; 16
    49b2:	9c 83       	std	Y+4, r25	; 0x04
    49b4:	61 96       	adiw	r28, 0x11	; 17
    49b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    49b8:	61 97       	sbiw	r28, 0x11	; 17
    49ba:	8d 83       	std	Y+5, r24	; 0x05
    49bc:	62 96       	adiw	r28, 0x12	; 18
    49be:	9f ad       	ldd	r25, Y+63	; 0x3f
    49c0:	62 97       	sbiw	r28, 0x12	; 18
    49c2:	9e 83       	std	Y+6, r25	; 0x06
    49c4:	63 96       	adiw	r28, 0x13	; 19
    49c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    49c8:	63 97       	sbiw	r28, 0x13	; 19
    49ca:	8f 83       	std	Y+7, r24	; 0x07
    49cc:	64 96       	adiw	r28, 0x14	; 20
    49ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    49d0:	64 97       	sbiw	r28, 0x14	; 20
    49d2:	98 87       	std	Y+8, r25	; 0x08
			Copy_u64Number/=10;
    49d4:	a9 84       	ldd	r10, Y+9	; 0x09
    49d6:	ba 84       	ldd	r11, Y+10	; 0x0a
    49d8:	cb 84       	ldd	r12, Y+11	; 0x0b
    49da:	dc 84       	ldd	r13, Y+12	; 0x0c
    49dc:	ed 84       	ldd	r14, Y+13	; 0x0d
    49de:	fe 84       	ldd	r15, Y+14	; 0x0e
    49e0:	0f 85       	ldd	r16, Y+15	; 0x0f
    49e2:	18 89       	ldd	r17, Y+16	; 0x10
    49e4:	2a 2d       	mov	r18, r10
    49e6:	3b 2d       	mov	r19, r11
    49e8:	4c 2d       	mov	r20, r12
    49ea:	5d 2d       	mov	r21, r13
    49ec:	6e 2d       	mov	r22, r14
    49ee:	7f 2d       	mov	r23, r15
    49f0:	80 2f       	mov	r24, r16
    49f2:	91 2f       	mov	r25, r17
    49f4:	0f 2e       	mov	r0, r31
    49f6:	fa e0       	ldi	r31, 0x0A	; 10
    49f8:	af 2e       	mov	r10, r31
    49fa:	f0 2d       	mov	r31, r0
    49fc:	bb 24       	eor	r11, r11
    49fe:	cc 24       	eor	r12, r12
    4a00:	dd 24       	eor	r13, r13
    4a02:	ee 24       	eor	r14, r14
    4a04:	ff 24       	eor	r15, r15
    4a06:	00 e0       	ldi	r16, 0x00	; 0
    4a08:	10 e0       	ldi	r17, 0x00	; 0
    4a0a:	0e 94 9c 01 	call	0x338	; 0x338 <__udivdi3>
    4a0e:	a2 2e       	mov	r10, r18
    4a10:	b3 2e       	mov	r11, r19
    4a12:	c4 2e       	mov	r12, r20
    4a14:	d5 2e       	mov	r13, r21
    4a16:	e6 2e       	mov	r14, r22
    4a18:	f7 2e       	mov	r15, r23
    4a1a:	08 2f       	mov	r16, r24
    4a1c:	19 2f       	mov	r17, r25
    4a1e:	a9 86       	std	Y+9, r10	; 0x09
    4a20:	ba 86       	std	Y+10, r11	; 0x0a
    4a22:	cb 86       	std	Y+11, r12	; 0x0b
    4a24:	dc 86       	std	Y+12, r13	; 0x0c
    4a26:	ed 86       	std	Y+13, r14	; 0x0d
    4a28:	fe 86       	std	Y+14, r15	; 0x0e
    4a2a:	0f 87       	std	Y+15, r16	; 0x0f
    4a2c:	18 8b       	std	Y+16, r17	; 0x10
		CLCD_voidSendCharacter('0');
	}
	else
	{

		while(Copy_u64Number != 0)
    4a2e:	89 85       	ldd	r24, Y+9	; 0x09
    4a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a32:	89 2b       	or	r24, r25
    4a34:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a36:	89 2b       	or	r24, r25
    4a38:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a3a:	89 2b       	or	r24, r25
    4a3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a3e:	89 2b       	or	r24, r25
    4a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a42:	89 2b       	or	r24, r25
    4a44:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a46:	89 2b       	or	r24, r25
    4a48:	98 89       	ldd	r25, Y+16	; 0x10
    4a4a:	89 2b       	or	r24, r25
    4a4c:	88 23       	and	r24, r24
    4a4e:	09 f0       	breq	.+2      	; 0x4a52 <CLCD_voidSendNumber+0x754>
    4a50:	90 cc       	rjmp	.-1760   	; 0x4372 <CLCD_voidSendNumber+0x74>
    4a52:	5e c0       	rjmp	.+188    	; 0x4b10 <CLCD_voidSendNumber+0x812>
			LOC_u64Reversed = (LOC_u64Reversed*10) + (Copy_u64Number%10);
			Copy_u64Number/=10;
		}
		while(LOC_u64Reversed != 1)
		{
			CLCD_voidSendCharacter( ( LOC_u64Reversed%10) + 48 );
    4a54:	a9 80       	ldd	r10, Y+1	; 0x01
    4a56:	ba 80       	ldd	r11, Y+2	; 0x02
    4a58:	cb 80       	ldd	r12, Y+3	; 0x03
    4a5a:	dc 80       	ldd	r13, Y+4	; 0x04
    4a5c:	ed 80       	ldd	r14, Y+5	; 0x05
    4a5e:	fe 80       	ldd	r15, Y+6	; 0x06
    4a60:	0f 81       	ldd	r16, Y+7	; 0x07
    4a62:	18 85       	ldd	r17, Y+8	; 0x08
    4a64:	2a 2d       	mov	r18, r10
    4a66:	3b 2d       	mov	r19, r11
    4a68:	4c 2d       	mov	r20, r12
    4a6a:	5d 2d       	mov	r21, r13
    4a6c:	6e 2d       	mov	r22, r14
    4a6e:	7f 2d       	mov	r23, r15
    4a70:	80 2f       	mov	r24, r16
    4a72:	91 2f       	mov	r25, r17
    4a74:	0f 2e       	mov	r0, r31
    4a76:	fa e0       	ldi	r31, 0x0A	; 10
    4a78:	af 2e       	mov	r10, r31
    4a7a:	f0 2d       	mov	r31, r0
    4a7c:	bb 24       	eor	r11, r11
    4a7e:	cc 24       	eor	r12, r12
    4a80:	dd 24       	eor	r13, r13
    4a82:	ee 24       	eor	r14, r14
    4a84:	ff 24       	eor	r15, r15
    4a86:	00 e0       	ldi	r16, 0x00	; 0
    4a88:	10 e0       	ldi	r17, 0x00	; 0
    4a8a:	0e 94 11 08 	call	0x1022	; 0x1022 <__umoddi3>
    4a8e:	a2 2e       	mov	r10, r18
    4a90:	b3 2e       	mov	r11, r19
    4a92:	c4 2e       	mov	r12, r20
    4a94:	d5 2e       	mov	r13, r21
    4a96:	e6 2e       	mov	r14, r22
    4a98:	f7 2e       	mov	r15, r23
    4a9a:	08 2f       	mov	r16, r24
    4a9c:	19 2f       	mov	r17, r25
    4a9e:	2a 2d       	mov	r18, r10
    4aa0:	3b 2d       	mov	r19, r11
    4aa2:	4c 2d       	mov	r20, r12
    4aa4:	5d 2d       	mov	r21, r13
    4aa6:	6e 2d       	mov	r22, r14
    4aa8:	7f 2d       	mov	r23, r15
    4aaa:	80 2f       	mov	r24, r16
    4aac:	91 2f       	mov	r25, r17
    4aae:	82 2f       	mov	r24, r18
    4ab0:	80 5d       	subi	r24, 0xD0	; 208
    4ab2:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
			LOC_u64Reversed/=10;
    4ab6:	a9 80       	ldd	r10, Y+1	; 0x01
    4ab8:	ba 80       	ldd	r11, Y+2	; 0x02
    4aba:	cb 80       	ldd	r12, Y+3	; 0x03
    4abc:	dc 80       	ldd	r13, Y+4	; 0x04
    4abe:	ed 80       	ldd	r14, Y+5	; 0x05
    4ac0:	fe 80       	ldd	r15, Y+6	; 0x06
    4ac2:	0f 81       	ldd	r16, Y+7	; 0x07
    4ac4:	18 85       	ldd	r17, Y+8	; 0x08
    4ac6:	2a 2d       	mov	r18, r10
    4ac8:	3b 2d       	mov	r19, r11
    4aca:	4c 2d       	mov	r20, r12
    4acc:	5d 2d       	mov	r21, r13
    4ace:	6e 2d       	mov	r22, r14
    4ad0:	7f 2d       	mov	r23, r15
    4ad2:	80 2f       	mov	r24, r16
    4ad4:	91 2f       	mov	r25, r17
    4ad6:	0f 2e       	mov	r0, r31
    4ad8:	fa e0       	ldi	r31, 0x0A	; 10
    4ada:	af 2e       	mov	r10, r31
    4adc:	f0 2d       	mov	r31, r0
    4ade:	bb 24       	eor	r11, r11
    4ae0:	cc 24       	eor	r12, r12
    4ae2:	dd 24       	eor	r13, r13
    4ae4:	ee 24       	eor	r14, r14
    4ae6:	ff 24       	eor	r15, r15
    4ae8:	00 e0       	ldi	r16, 0x00	; 0
    4aea:	10 e0       	ldi	r17, 0x00	; 0
    4aec:	0e 94 9c 01 	call	0x338	; 0x338 <__udivdi3>
    4af0:	a2 2e       	mov	r10, r18
    4af2:	b3 2e       	mov	r11, r19
    4af4:	c4 2e       	mov	r12, r20
    4af6:	d5 2e       	mov	r13, r21
    4af8:	e6 2e       	mov	r14, r22
    4afa:	f7 2e       	mov	r15, r23
    4afc:	08 2f       	mov	r16, r24
    4afe:	19 2f       	mov	r17, r25
    4b00:	a9 82       	std	Y+1, r10	; 0x01
    4b02:	ba 82       	std	Y+2, r11	; 0x02
    4b04:	cb 82       	std	Y+3, r12	; 0x03
    4b06:	dc 82       	std	Y+4, r13	; 0x04
    4b08:	ed 82       	std	Y+5, r14	; 0x05
    4b0a:	fe 82       	std	Y+6, r15	; 0x06
    4b0c:	0f 83       	std	Y+7, r16	; 0x07
    4b0e:	18 87       	std	Y+8, r17	; 0x08
		while(Copy_u64Number != 0)
		{
			LOC_u64Reversed = (LOC_u64Reversed*10) + (Copy_u64Number%10);
			Copy_u64Number/=10;
		}
		while(LOC_u64Reversed != 1)
    4b10:	89 81       	ldd	r24, Y+1	; 0x01
    4b12:	81 30       	cpi	r24, 0x01	; 1
    4b14:	09 f0       	breq	.+2      	; 0x4b18 <CLCD_voidSendNumber+0x81a>
    4b16:	9e cf       	rjmp	.-196    	; 0x4a54 <CLCD_voidSendNumber+0x756>
    4b18:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1a:	88 23       	and	r24, r24
    4b1c:	09 f0       	breq	.+2      	; 0x4b20 <CLCD_voidSendNumber+0x822>
    4b1e:	9a cf       	rjmp	.-204    	; 0x4a54 <CLCD_voidSendNumber+0x756>
    4b20:	8b 81       	ldd	r24, Y+3	; 0x03
    4b22:	88 23       	and	r24, r24
    4b24:	09 f0       	breq	.+2      	; 0x4b28 <CLCD_voidSendNumber+0x82a>
    4b26:	96 cf       	rjmp	.-212    	; 0x4a54 <CLCD_voidSendNumber+0x756>
    4b28:	8c 81       	ldd	r24, Y+4	; 0x04
    4b2a:	88 23       	and	r24, r24
    4b2c:	09 f0       	breq	.+2      	; 0x4b30 <CLCD_voidSendNumber+0x832>
    4b2e:	92 cf       	rjmp	.-220    	; 0x4a54 <CLCD_voidSendNumber+0x756>
    4b30:	8d 81       	ldd	r24, Y+5	; 0x05
    4b32:	88 23       	and	r24, r24
    4b34:	09 f0       	breq	.+2      	; 0x4b38 <CLCD_voidSendNumber+0x83a>
    4b36:	8e cf       	rjmp	.-228    	; 0x4a54 <CLCD_voidSendNumber+0x756>
    4b38:	8e 81       	ldd	r24, Y+6	; 0x06
    4b3a:	88 23       	and	r24, r24
    4b3c:	09 f0       	breq	.+2      	; 0x4b40 <CLCD_voidSendNumber+0x842>
    4b3e:	8a cf       	rjmp	.-236    	; 0x4a54 <CLCD_voidSendNumber+0x756>
    4b40:	8f 81       	ldd	r24, Y+7	; 0x07
    4b42:	88 23       	and	r24, r24
    4b44:	09 f0       	breq	.+2      	; 0x4b48 <CLCD_voidSendNumber+0x84a>
    4b46:	86 cf       	rjmp	.-244    	; 0x4a54 <CLCD_voidSendNumber+0x756>
    4b48:	88 85       	ldd	r24, Y+8	; 0x08
    4b4a:	88 23       	and	r24, r24
    4b4c:	09 f0       	breq	.+2      	; 0x4b50 <CLCD_voidSendNumber+0x852>
    4b4e:	82 cf       	rjmp	.-252    	; 0x4a54 <CLCD_voidSendNumber+0x756>
		{
			CLCD_voidSendCharacter( ( LOC_u64Reversed%10) + 48 );
			LOC_u64Reversed/=10;
		}
	}
}
    4b50:	ca 59       	subi	r28, 0x9A	; 154
    4b52:	df 4f       	sbci	r29, 0xFF	; 255
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	f8 94       	cli
    4b58:	de bf       	out	0x3e, r29	; 62
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	cd bf       	out	0x3d, r28	; 61
    4b5e:	cf 91       	pop	r28
    4b60:	df 91       	pop	r29
    4b62:	1f 91       	pop	r17
    4b64:	0f 91       	pop	r16
    4b66:	ff 90       	pop	r15
    4b68:	ef 90       	pop	r14
    4b6a:	df 90       	pop	r13
    4b6c:	cf 90       	pop	r12
    4b6e:	bf 90       	pop	r11
    4b70:	af 90       	pop	r10
    4b72:	08 95       	ret

00004b74 <CLCD_voidSendFloatNumber>:

void CLCD_voidSendFloatNumber(f64 Copy_f32Number)
{
    4b74:	2f 92       	push	r2
    4b76:	3f 92       	push	r3
    4b78:	4f 92       	push	r4
    4b7a:	5f 92       	push	r5
    4b7c:	6f 92       	push	r6
    4b7e:	7f 92       	push	r7
    4b80:	8f 92       	push	r8
    4b82:	9f 92       	push	r9
    4b84:	af 92       	push	r10
    4b86:	bf 92       	push	r11
    4b88:	cf 92       	push	r12
    4b8a:	df 92       	push	r13
    4b8c:	ef 92       	push	r14
    4b8e:	ff 92       	push	r15
    4b90:	0f 93       	push	r16
    4b92:	1f 93       	push	r17
    4b94:	df 93       	push	r29
    4b96:	cf 93       	push	r28
    4b98:	cd b7       	in	r28, 0x3d	; 61
    4b9a:	de b7       	in	r29, 0x3e	; 62
    4b9c:	ef 97       	sbiw	r28, 0x3f	; 63
    4b9e:	0f b6       	in	r0, 0x3f	; 63
    4ba0:	f8 94       	cli
    4ba2:	de bf       	out	0x3e, r29	; 62
    4ba4:	0f be       	out	0x3f, r0	; 63
    4ba6:	cd bf       	out	0x3d, r28	; 61
    4ba8:	69 87       	std	Y+9, r22	; 0x09
    4baa:	7a 87       	std	Y+10, r23	; 0x0a
    4bac:	8b 87       	std	Y+11, r24	; 0x0b
    4bae:	9c 87       	std	Y+12, r25	; 0x0c
	// Cast the float Number to Integer value (ex: 25.6942325 --> 25)
	CLCD_voidSendNumber((u64)Copy_f32Number ); // Send the integer Number to the LCD
    4bb0:	69 85       	ldd	r22, Y+9	; 0x09
    4bb2:	7a 85       	ldd	r23, Y+10	; 0x0a
    4bb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bb8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixunssfdi>
    4bbc:	a2 2e       	mov	r10, r18
    4bbe:	b3 2e       	mov	r11, r19
    4bc0:	c4 2e       	mov	r12, r20
    4bc2:	d5 2e       	mov	r13, r21
    4bc4:	e6 2e       	mov	r14, r22
    4bc6:	f7 2e       	mov	r15, r23
    4bc8:	08 2f       	mov	r16, r24
    4bca:	19 2f       	mov	r17, r25
    4bcc:	2a 2d       	mov	r18, r10
    4bce:	3b 2d       	mov	r19, r11
    4bd0:	4c 2d       	mov	r20, r12
    4bd2:	5d 2d       	mov	r21, r13
    4bd4:	6e 2d       	mov	r22, r14
    4bd6:	7f 2d       	mov	r23, r15
    4bd8:	80 2f       	mov	r24, r16
    4bda:	91 2f       	mov	r25, r17
    4bdc:	0e 94 7f 21 	call	0x42fe	; 0x42fe <CLCD_voidSendNumber>
	CLCD_voidSendCharacter('.'); // Send the decimal point
    4be0:	8e e2       	ldi	r24, 0x2E	; 46
    4be2:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
	// Multiply the Float Number by 10^6 so the decimal number becomes part of the number
	//(ex: 25.6942325--> 25694232.5
	// save the result as integer"saved in u64" (ex: 25.6942325--> 25694232
	u64 Local_u64tempNumber = Copy_f32Number*1000000;
    4be6:	69 85       	ldd	r22, Y+9	; 0x09
    4be8:	7a 85       	ldd	r23, Y+10	; 0x0a
    4bea:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bec:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	34 e2       	ldi	r19, 0x24	; 36
    4bf2:	44 e7       	ldi	r20, 0x74	; 116
    4bf4:	59 e4       	ldi	r21, 0x49	; 73
    4bf6:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	cb 01       	movw	r24, r22
    4bfe:	bc 01       	movw	r22, r24
    4c00:	cd 01       	movw	r24, r26
    4c02:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__fixunssfdi>
    4c06:	a2 2e       	mov	r10, r18
    4c08:	b3 2e       	mov	r11, r19
    4c0a:	c4 2e       	mov	r12, r20
    4c0c:	d5 2e       	mov	r13, r21
    4c0e:	e6 2e       	mov	r14, r22
    4c10:	f7 2e       	mov	r15, r23
    4c12:	08 2f       	mov	r16, r24
    4c14:	19 2f       	mov	r17, r25
    4c16:	a9 82       	std	Y+1, r10	; 0x01
    4c18:	ba 82       	std	Y+2, r11	; 0x02
    4c1a:	cb 82       	std	Y+3, r12	; 0x03
    4c1c:	dc 82       	std	Y+4, r13	; 0x04
    4c1e:	ed 82       	std	Y+5, r14	; 0x05
    4c20:	fe 82       	std	Y+6, r15	; 0x06
    4c22:	0f 83       	std	Y+7, r16	; 0x07
    4c24:	18 87       	std	Y+8, r17	; 0x08
	// if the first digit is greater than or equal 5
	if( Local_u64tempNumber%10 >=5 )
    4c26:	a9 80       	ldd	r10, Y+1	; 0x01
    4c28:	ba 80       	ldd	r11, Y+2	; 0x02
    4c2a:	cb 80       	ldd	r12, Y+3	; 0x03
    4c2c:	dc 80       	ldd	r13, Y+4	; 0x04
    4c2e:	ed 80       	ldd	r14, Y+5	; 0x05
    4c30:	fe 80       	ldd	r15, Y+6	; 0x06
    4c32:	0f 81       	ldd	r16, Y+7	; 0x07
    4c34:	18 85       	ldd	r17, Y+8	; 0x08
    4c36:	2a 2d       	mov	r18, r10
    4c38:	3b 2d       	mov	r19, r11
    4c3a:	4c 2d       	mov	r20, r12
    4c3c:	5d 2d       	mov	r21, r13
    4c3e:	6e 2d       	mov	r22, r14
    4c40:	7f 2d       	mov	r23, r15
    4c42:	80 2f       	mov	r24, r16
    4c44:	91 2f       	mov	r25, r17
    4c46:	0f 2e       	mov	r0, r31
    4c48:	fa e0       	ldi	r31, 0x0A	; 10
    4c4a:	af 2e       	mov	r10, r31
    4c4c:	f0 2d       	mov	r31, r0
    4c4e:	bb 24       	eor	r11, r11
    4c50:	cc 24       	eor	r12, r12
    4c52:	dd 24       	eor	r13, r13
    4c54:	ee 24       	eor	r14, r14
    4c56:	ff 24       	eor	r15, r15
    4c58:	00 e0       	ldi	r16, 0x00	; 0
    4c5a:	10 e0       	ldi	r17, 0x00	; 0
    4c5c:	0e 94 11 08 	call	0x1022	; 0x1022 <__umoddi3>
    4c60:	a2 2e       	mov	r10, r18
    4c62:	b3 2e       	mov	r11, r19
    4c64:	c4 2e       	mov	r12, r20
    4c66:	d5 2e       	mov	r13, r21
    4c68:	e6 2e       	mov	r14, r22
    4c6a:	f7 2e       	mov	r15, r23
    4c6c:	08 2f       	mov	r16, r24
    4c6e:	19 2f       	mov	r17, r25
    4c70:	ad 8a       	std	Y+21, r10	; 0x15
    4c72:	be 8a       	std	Y+22, r11	; 0x16
    4c74:	cf 8a       	std	Y+23, r12	; 0x17
    4c76:	d8 8e       	std	Y+24, r13	; 0x18
    4c78:	e9 8e       	std	Y+25, r14	; 0x19
    4c7a:	fa 8e       	std	Y+26, r15	; 0x1a
    4c7c:	0b 8f       	std	Y+27, r16	; 0x1b
    4c7e:	1c 8f       	std	Y+28, r17	; 0x1c
    4c80:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4c82:	88 23       	and	r24, r24
    4c84:	91 f5       	brne	.+100    	; 0x4cea <CLCD_voidSendFloatNumber+0x176>
    4c86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c88:	99 23       	and	r25, r25
    4c8a:	09 f0       	breq	.+2      	; 0x4c8e <CLCD_voidSendFloatNumber+0x11a>
    4c8c:	5b c1       	rjmp	.+694    	; 0x4f44 <CLCD_voidSendFloatNumber+0x3d0>
    4c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c90:	88 23       	and	r24, r24
    4c92:	59 f5       	brne	.+86     	; 0x4cea <CLCD_voidSendFloatNumber+0x176>
    4c94:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4c96:	99 23       	and	r25, r25
    4c98:	09 f0       	breq	.+2      	; 0x4c9c <CLCD_voidSendFloatNumber+0x128>
    4c9a:	54 c1       	rjmp	.+680    	; 0x4f44 <CLCD_voidSendFloatNumber+0x3d0>
    4c9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c9e:	88 23       	and	r24, r24
    4ca0:	21 f5       	brne	.+72     	; 0x4cea <CLCD_voidSendFloatNumber+0x176>
    4ca2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ca4:	99 23       	and	r25, r25
    4ca6:	09 f0       	breq	.+2      	; 0x4caa <CLCD_voidSendFloatNumber+0x136>
    4ca8:	4d c1       	rjmp	.+666    	; 0x4f44 <CLCD_voidSendFloatNumber+0x3d0>
    4caa:	89 8d       	ldd	r24, Y+25	; 0x19
    4cac:	88 23       	and	r24, r24
    4cae:	e9 f4       	brne	.+58     	; 0x4cea <CLCD_voidSendFloatNumber+0x176>
    4cb0:	99 8d       	ldd	r25, Y+25	; 0x19
    4cb2:	99 23       	and	r25, r25
    4cb4:	09 f0       	breq	.+2      	; 0x4cb8 <CLCD_voidSendFloatNumber+0x144>
    4cb6:	46 c1       	rjmp	.+652    	; 0x4f44 <CLCD_voidSendFloatNumber+0x3d0>
    4cb8:	88 8d       	ldd	r24, Y+24	; 0x18
    4cba:	88 23       	and	r24, r24
    4cbc:	b1 f4       	brne	.+44     	; 0x4cea <CLCD_voidSendFloatNumber+0x176>
    4cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc0:	99 23       	and	r25, r25
    4cc2:	09 f0       	breq	.+2      	; 0x4cc6 <CLCD_voidSendFloatNumber+0x152>
    4cc4:	3f c1       	rjmp	.+638    	; 0x4f44 <CLCD_voidSendFloatNumber+0x3d0>
    4cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc8:	88 23       	and	r24, r24
    4cca:	79 f4       	brne	.+30     	; 0x4cea <CLCD_voidSendFloatNumber+0x176>
    4ccc:	9f 89       	ldd	r25, Y+23	; 0x17
    4cce:	99 23       	and	r25, r25
    4cd0:	09 f0       	breq	.+2      	; 0x4cd4 <CLCD_voidSendFloatNumber+0x160>
    4cd2:	38 c1       	rjmp	.+624    	; 0x4f44 <CLCD_voidSendFloatNumber+0x3d0>
    4cd4:	8e 89       	ldd	r24, Y+22	; 0x16
    4cd6:	88 23       	and	r24, r24
    4cd8:	41 f4       	brne	.+16     	; 0x4cea <CLCD_voidSendFloatNumber+0x176>
    4cda:	9e 89       	ldd	r25, Y+22	; 0x16
    4cdc:	99 23       	and	r25, r25
    4cde:	09 f0       	breq	.+2      	; 0x4ce2 <CLCD_voidSendFloatNumber+0x16e>
    4ce0:	31 c1       	rjmp	.+610    	; 0x4f44 <CLCD_voidSendFloatNumber+0x3d0>
    4ce2:	8d 89       	ldd	r24, Y+21	; 0x15
    4ce4:	85 30       	cpi	r24, 0x05	; 5
    4ce6:	08 f4       	brcc	.+2      	; 0x4cea <CLCD_voidSendFloatNumber+0x176>
    4ce8:	2d c1       	rjmp	.+602    	; 0x4f44 <CLCD_voidSendFloatNumber+0x3d0>
	{
		// then divide the number by 10  (ex : 25694236 ---> 2569423 )
		// add 1 to the number to round the number up
		//then module the number by 100000  (ex : 2569423 ---> 69424 )
		CLCD_voidSendNumber((u64)((( Local_u64tempNumber/10)+1) % 100000));
    4cea:	a9 80       	ldd	r10, Y+1	; 0x01
    4cec:	ba 80       	ldd	r11, Y+2	; 0x02
    4cee:	cb 80       	ldd	r12, Y+3	; 0x03
    4cf0:	dc 80       	ldd	r13, Y+4	; 0x04
    4cf2:	ed 80       	ldd	r14, Y+5	; 0x05
    4cf4:	fe 80       	ldd	r15, Y+6	; 0x06
    4cf6:	0f 81       	ldd	r16, Y+7	; 0x07
    4cf8:	18 85       	ldd	r17, Y+8	; 0x08
    4cfa:	2a 2d       	mov	r18, r10
    4cfc:	3b 2d       	mov	r19, r11
    4cfe:	4c 2d       	mov	r20, r12
    4d00:	5d 2d       	mov	r21, r13
    4d02:	6e 2d       	mov	r22, r14
    4d04:	7f 2d       	mov	r23, r15
    4d06:	80 2f       	mov	r24, r16
    4d08:	91 2f       	mov	r25, r17
    4d0a:	0f 2e       	mov	r0, r31
    4d0c:	fa e0       	ldi	r31, 0x0A	; 10
    4d0e:	af 2e       	mov	r10, r31
    4d10:	f0 2d       	mov	r31, r0
    4d12:	bb 24       	eor	r11, r11
    4d14:	cc 24       	eor	r12, r12
    4d16:	dd 24       	eor	r13, r13
    4d18:	ee 24       	eor	r14, r14
    4d1a:	ff 24       	eor	r15, r15
    4d1c:	00 e0       	ldi	r16, 0x00	; 0
    4d1e:	10 e0       	ldi	r17, 0x00	; 0
    4d20:	0e 94 9c 01 	call	0x338	; 0x338 <__udivdi3>
    4d24:	a2 2e       	mov	r10, r18
    4d26:	b3 2e       	mov	r11, r19
    4d28:	c4 2e       	mov	r12, r20
    4d2a:	d5 2e       	mov	r13, r21
    4d2c:	e6 2e       	mov	r14, r22
    4d2e:	f7 2e       	mov	r15, r23
    4d30:	08 2f       	mov	r16, r24
    4d32:	19 2f       	mov	r17, r25
    4d34:	ad 86       	std	Y+13, r10	; 0x0d
    4d36:	be 86       	std	Y+14, r11	; 0x0e
    4d38:	cf 86       	std	Y+15, r12	; 0x0f
    4d3a:	d8 8a       	std	Y+16, r13	; 0x10
    4d3c:	e9 8a       	std	Y+17, r14	; 0x11
    4d3e:	fa 8a       	std	Y+18, r15	; 0x12
    4d40:	0b 8b       	std	Y+19, r16	; 0x13
    4d42:	1c 8b       	std	Y+20, r17	; 0x14
    4d44:	91 e0       	ldi	r25, 0x01	; 1
    4d46:	9d 8f       	std	Y+29, r25	; 0x1d
    4d48:	1e 8e       	std	Y+30, r1	; 0x1e
    4d4a:	1f 8e       	std	Y+31, r1	; 0x1f
    4d4c:	18 a2       	std	Y+32, r1	; 0x20
    4d4e:	19 a2       	std	Y+33, r1	; 0x21
    4d50:	1a a2       	std	Y+34, r1	; 0x22
    4d52:	1b a2       	std	Y+35, r1	; 0x23
    4d54:	1c a2       	std	Y+36, r1	; 0x24
    4d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d58:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4d5a:	89 0f       	add	r24, r25
    4d5c:	8d a3       	std	Y+37, r24	; 0x25
    4d5e:	81 e0       	ldi	r24, 0x01	; 1
    4d60:	8d a7       	std	Y+45, r24	; 0x2d
    4d62:	9d a1       	ldd	r25, Y+37	; 0x25
    4d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d66:	98 17       	cp	r25, r24
    4d68:	08 f0       	brcs	.+2      	; 0x4d6c <CLCD_voidSendFloatNumber+0x1f8>
    4d6a:	1d a6       	std	Y+45, r1	; 0x2d
    4d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4d70:	98 0f       	add	r25, r24
    4d72:	9e a3       	std	Y+38, r25	; 0x26
    4d74:	91 e0       	ldi	r25, 0x01	; 1
    4d76:	9e a7       	std	Y+46, r25	; 0x2e
    4d78:	8e a1       	ldd	r24, Y+38	; 0x26
    4d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d7c:	89 17       	cp	r24, r25
    4d7e:	08 f0       	brcs	.+2      	; 0x4d82 <CLCD_voidSendFloatNumber+0x20e>
    4d80:	1e a6       	std	Y+46, r1	; 0x2e
    4d82:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d84:	9e a1       	ldd	r25, Y+38	; 0x26
    4d86:	89 0f       	add	r24, r25
    4d88:	8f a7       	std	Y+47, r24	; 0x2f
    4d8a:	81 e0       	ldi	r24, 0x01	; 1
    4d8c:	88 ab       	std	Y+48, r24	; 0x30
    4d8e:	9f a5       	ldd	r25, Y+47	; 0x2f
    4d90:	8e a1       	ldd	r24, Y+38	; 0x26
    4d92:	98 17       	cp	r25, r24
    4d94:	08 f0       	brcs	.+2      	; 0x4d98 <CLCD_voidSendFloatNumber+0x224>
    4d96:	18 aa       	std	Y+48, r1	; 0x30
    4d98:	9e a5       	ldd	r25, Y+46	; 0x2e
    4d9a:	88 a9       	ldd	r24, Y+48	; 0x30
    4d9c:	98 2b       	or	r25, r24
    4d9e:	9e a7       	std	Y+46, r25	; 0x2e
    4da0:	9f a5       	ldd	r25, Y+47	; 0x2f
    4da2:	9e a3       	std	Y+38, r25	; 0x26
    4da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4da6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4da8:	89 0f       	add	r24, r25
    4daa:	8f a3       	std	Y+39, r24	; 0x27
    4dac:	81 e0       	ldi	r24, 0x01	; 1
    4dae:	89 ab       	std	Y+49, r24	; 0x31
    4db0:	9f a1       	ldd	r25, Y+39	; 0x27
    4db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4db4:	98 17       	cp	r25, r24
    4db6:	08 f0       	brcs	.+2      	; 0x4dba <CLCD_voidSendFloatNumber+0x246>
    4db8:	19 aa       	std	Y+49, r1	; 0x31
    4dba:	9e a5       	ldd	r25, Y+46	; 0x2e
    4dbc:	8f a1       	ldd	r24, Y+39	; 0x27
    4dbe:	98 0f       	add	r25, r24
    4dc0:	9a ab       	std	Y+50, r25	; 0x32
    4dc2:	91 e0       	ldi	r25, 0x01	; 1
    4dc4:	9b ab       	std	Y+51, r25	; 0x33
    4dc6:	8a a9       	ldd	r24, Y+50	; 0x32
    4dc8:	9f a1       	ldd	r25, Y+39	; 0x27
    4dca:	89 17       	cp	r24, r25
    4dcc:	08 f0       	brcs	.+2      	; 0x4dd0 <CLCD_voidSendFloatNumber+0x25c>
    4dce:	1b aa       	std	Y+51, r1	; 0x33
    4dd0:	89 a9       	ldd	r24, Y+49	; 0x31
    4dd2:	9b a9       	ldd	r25, Y+51	; 0x33
    4dd4:	89 2b       	or	r24, r25
    4dd6:	89 ab       	std	Y+49, r24	; 0x31
    4dd8:	8a a9       	ldd	r24, Y+50	; 0x32
    4dda:	8f a3       	std	Y+39, r24	; 0x27
    4ddc:	98 89       	ldd	r25, Y+16	; 0x10
    4dde:	88 a1       	ldd	r24, Y+32	; 0x20
    4de0:	98 0f       	add	r25, r24
    4de2:	98 a7       	std	Y+40, r25	; 0x28
    4de4:	91 e0       	ldi	r25, 0x01	; 1
    4de6:	9c ab       	std	Y+52, r25	; 0x34
    4de8:	88 a5       	ldd	r24, Y+40	; 0x28
    4dea:	98 89       	ldd	r25, Y+16	; 0x10
    4dec:	89 17       	cp	r24, r25
    4dee:	08 f0       	brcs	.+2      	; 0x4df2 <CLCD_voidSendFloatNumber+0x27e>
    4df0:	1c aa       	std	Y+52, r1	; 0x34
    4df2:	89 a9       	ldd	r24, Y+49	; 0x31
    4df4:	98 a5       	ldd	r25, Y+40	; 0x28
    4df6:	89 0f       	add	r24, r25
    4df8:	8d ab       	std	Y+53, r24	; 0x35
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	8e ab       	std	Y+54, r24	; 0x36
    4dfe:	9d a9       	ldd	r25, Y+53	; 0x35
    4e00:	88 a5       	ldd	r24, Y+40	; 0x28
    4e02:	98 17       	cp	r25, r24
    4e04:	08 f0       	brcs	.+2      	; 0x4e08 <CLCD_voidSendFloatNumber+0x294>
    4e06:	1e aa       	std	Y+54, r1	; 0x36
    4e08:	9c a9       	ldd	r25, Y+52	; 0x34
    4e0a:	8e a9       	ldd	r24, Y+54	; 0x36
    4e0c:	98 2b       	or	r25, r24
    4e0e:	9c ab       	std	Y+52, r25	; 0x34
    4e10:	9d a9       	ldd	r25, Y+53	; 0x35
    4e12:	98 a7       	std	Y+40, r25	; 0x28
    4e14:	89 89       	ldd	r24, Y+17	; 0x11
    4e16:	99 a1       	ldd	r25, Y+33	; 0x21
    4e18:	89 0f       	add	r24, r25
    4e1a:	89 a7       	std	Y+41, r24	; 0x29
    4e1c:	81 e0       	ldi	r24, 0x01	; 1
    4e1e:	8f ab       	std	Y+55, r24	; 0x37
    4e20:	99 a5       	ldd	r25, Y+41	; 0x29
    4e22:	89 89       	ldd	r24, Y+17	; 0x11
    4e24:	98 17       	cp	r25, r24
    4e26:	08 f0       	brcs	.+2      	; 0x4e2a <CLCD_voidSendFloatNumber+0x2b6>
    4e28:	1f aa       	std	Y+55, r1	; 0x37
    4e2a:	9c a9       	ldd	r25, Y+52	; 0x34
    4e2c:	89 a5       	ldd	r24, Y+41	; 0x29
    4e2e:	98 0f       	add	r25, r24
    4e30:	98 af       	std	Y+56, r25	; 0x38
    4e32:	91 e0       	ldi	r25, 0x01	; 1
    4e34:	99 af       	std	Y+57, r25	; 0x39
    4e36:	88 ad       	ldd	r24, Y+56	; 0x38
    4e38:	99 a5       	ldd	r25, Y+41	; 0x29
    4e3a:	89 17       	cp	r24, r25
    4e3c:	08 f0       	brcs	.+2      	; 0x4e40 <CLCD_voidSendFloatNumber+0x2cc>
    4e3e:	19 ae       	std	Y+57, r1	; 0x39
    4e40:	8f a9       	ldd	r24, Y+55	; 0x37
    4e42:	99 ad       	ldd	r25, Y+57	; 0x39
    4e44:	89 2b       	or	r24, r25
    4e46:	8f ab       	std	Y+55, r24	; 0x37
    4e48:	88 ad       	ldd	r24, Y+56	; 0x38
    4e4a:	89 a7       	std	Y+41, r24	; 0x29
    4e4c:	9a 89       	ldd	r25, Y+18	; 0x12
    4e4e:	8a a1       	ldd	r24, Y+34	; 0x22
    4e50:	98 0f       	add	r25, r24
    4e52:	9a a7       	std	Y+42, r25	; 0x2a
    4e54:	91 e0       	ldi	r25, 0x01	; 1
    4e56:	9a af       	std	Y+58, r25	; 0x3a
    4e58:	8a a5       	ldd	r24, Y+42	; 0x2a
    4e5a:	9a 89       	ldd	r25, Y+18	; 0x12
    4e5c:	89 17       	cp	r24, r25
    4e5e:	08 f0       	brcs	.+2      	; 0x4e62 <CLCD_voidSendFloatNumber+0x2ee>
    4e60:	1a ae       	std	Y+58, r1	; 0x3a
    4e62:	8f a9       	ldd	r24, Y+55	; 0x37
    4e64:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e66:	89 0f       	add	r24, r25
    4e68:	8b af       	std	Y+59, r24	; 0x3b
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	8c af       	std	Y+60, r24	; 0x3c
    4e6e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4e70:	8a a5       	ldd	r24, Y+42	; 0x2a
    4e72:	98 17       	cp	r25, r24
    4e74:	08 f0       	brcs	.+2      	; 0x4e78 <CLCD_voidSendFloatNumber+0x304>
    4e76:	1c ae       	std	Y+60, r1	; 0x3c
    4e78:	9a ad       	ldd	r25, Y+58	; 0x3a
    4e7a:	8c ad       	ldd	r24, Y+60	; 0x3c
    4e7c:	98 2b       	or	r25, r24
    4e7e:	9a af       	std	Y+58, r25	; 0x3a
    4e80:	9b ad       	ldd	r25, Y+59	; 0x3b
    4e82:	9a a7       	std	Y+42, r25	; 0x2a
    4e84:	8b 89       	ldd	r24, Y+19	; 0x13
    4e86:	9b a1       	ldd	r25, Y+35	; 0x23
    4e88:	89 0f       	add	r24, r25
    4e8a:	8b a7       	std	Y+43, r24	; 0x2b
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	8d af       	std	Y+61, r24	; 0x3d
    4e90:	9b a5       	ldd	r25, Y+43	; 0x2b
    4e92:	8b 89       	ldd	r24, Y+19	; 0x13
    4e94:	98 17       	cp	r25, r24
    4e96:	08 f0       	brcs	.+2      	; 0x4e9a <CLCD_voidSendFloatNumber+0x326>
    4e98:	1d ae       	std	Y+61, r1	; 0x3d
    4e9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4e9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e9e:	98 0f       	add	r25, r24
    4ea0:	9e af       	std	Y+62, r25	; 0x3e
    4ea2:	91 e0       	ldi	r25, 0x01	; 1
    4ea4:	9f af       	std	Y+63, r25	; 0x3f
    4ea6:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ea8:	9b a5       	ldd	r25, Y+43	; 0x2b
    4eaa:	89 17       	cp	r24, r25
    4eac:	08 f0       	brcs	.+2      	; 0x4eb0 <CLCD_voidSendFloatNumber+0x33c>
    4eae:	1f ae       	std	Y+63, r1	; 0x3f
    4eb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4eb4:	89 2b       	or	r24, r25
    4eb6:	8d af       	std	Y+61, r24	; 0x3d
    4eb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4eba:	8b a7       	std	Y+43, r24	; 0x2b
    4ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ebe:	8c a1       	ldd	r24, Y+36	; 0x24
    4ec0:	98 0f       	add	r25, r24
    4ec2:	9c a7       	std	Y+44, r25	; 0x2c
    4ec4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ec8:	89 0f       	add	r24, r25
    4eca:	8c a7       	std	Y+44, r24	; 0x2c
    4ecc:	ad a0       	ldd	r10, Y+37	; 0x25
    4ece:	be a0       	ldd	r11, Y+38	; 0x26
    4ed0:	cf a0       	ldd	r12, Y+39	; 0x27
    4ed2:	d8 a4       	ldd	r13, Y+40	; 0x28
    4ed4:	e9 a4       	ldd	r14, Y+41	; 0x29
    4ed6:	fa a4       	ldd	r15, Y+42	; 0x2a
    4ed8:	0b a5       	ldd	r16, Y+43	; 0x2b
    4eda:	1c a5       	ldd	r17, Y+44	; 0x2c
    4edc:	2a 2d       	mov	r18, r10
    4ede:	3b 2d       	mov	r19, r11
    4ee0:	4c 2d       	mov	r20, r12
    4ee2:	5d 2d       	mov	r21, r13
    4ee4:	6e 2d       	mov	r22, r14
    4ee6:	7f 2d       	mov	r23, r15
    4ee8:	80 2f       	mov	r24, r16
    4eea:	91 2f       	mov	r25, r17
    4eec:	0f 2e       	mov	r0, r31
    4eee:	f0 ea       	ldi	r31, 0xA0	; 160
    4ef0:	af 2e       	mov	r10, r31
    4ef2:	f0 2d       	mov	r31, r0
    4ef4:	0f 2e       	mov	r0, r31
    4ef6:	f6 e8       	ldi	r31, 0x86	; 134
    4ef8:	bf 2e       	mov	r11, r31
    4efa:	f0 2d       	mov	r31, r0
    4efc:	cc 24       	eor	r12, r12
    4efe:	c3 94       	inc	r12
    4f00:	dd 24       	eor	r13, r13
    4f02:	ee 24       	eor	r14, r14
    4f04:	ff 24       	eor	r15, r15
    4f06:	00 e0       	ldi	r16, 0x00	; 0
    4f08:	10 e0       	ldi	r17, 0x00	; 0
    4f0a:	0e 94 11 08 	call	0x1022	; 0x1022 <__umoddi3>
    4f0e:	22 2e       	mov	r2, r18
    4f10:	33 2e       	mov	r3, r19
    4f12:	44 2e       	mov	r4, r20
    4f14:	55 2e       	mov	r5, r21
    4f16:	66 2e       	mov	r6, r22
    4f18:	77 2e       	mov	r7, r23
    4f1a:	88 2e       	mov	r8, r24
    4f1c:	99 2e       	mov	r9, r25
    4f1e:	a2 2c       	mov	r10, r2
    4f20:	b3 2c       	mov	r11, r3
    4f22:	c4 2c       	mov	r12, r4
    4f24:	d5 2c       	mov	r13, r5
    4f26:	e6 2c       	mov	r14, r6
    4f28:	f7 2c       	mov	r15, r7
    4f2a:	08 2d       	mov	r16, r8
    4f2c:	19 2d       	mov	r17, r9
    4f2e:	2a 2d       	mov	r18, r10
    4f30:	3b 2d       	mov	r19, r11
    4f32:	4c 2d       	mov	r20, r12
    4f34:	5d 2d       	mov	r21, r13
    4f36:	6e 2d       	mov	r22, r14
    4f38:	7f 2d       	mov	r23, r15
    4f3a:	80 2f       	mov	r24, r16
    4f3c:	91 2f       	mov	r25, r17
    4f3e:	0e 94 7f 21 	call	0x42fe	; 0x42fe <CLCD_voidSendNumber>
    4f42:	60 c0       	rjmp	.+192    	; 0x5004 <CLCD_voidSendFloatNumber+0x490>
	else
	{
		// then divide the number by 10  (ex : 25694232 ---> 2569423)
		// then module the number by 100000  (ex : 25694232 ---> 69423
		// Display the number
		CLCD_voidSendNumber((u64)(( Local_u64tempNumber/10) % 100000)); // Function to send the integer number
    4f44:	a9 80       	ldd	r10, Y+1	; 0x01
    4f46:	ba 80       	ldd	r11, Y+2	; 0x02
    4f48:	cb 80       	ldd	r12, Y+3	; 0x03
    4f4a:	dc 80       	ldd	r13, Y+4	; 0x04
    4f4c:	ed 80       	ldd	r14, Y+5	; 0x05
    4f4e:	fe 80       	ldd	r15, Y+6	; 0x06
    4f50:	0f 81       	ldd	r16, Y+7	; 0x07
    4f52:	18 85       	ldd	r17, Y+8	; 0x08
    4f54:	2a 2d       	mov	r18, r10
    4f56:	3b 2d       	mov	r19, r11
    4f58:	4c 2d       	mov	r20, r12
    4f5a:	5d 2d       	mov	r21, r13
    4f5c:	6e 2d       	mov	r22, r14
    4f5e:	7f 2d       	mov	r23, r15
    4f60:	80 2f       	mov	r24, r16
    4f62:	91 2f       	mov	r25, r17
    4f64:	0f 2e       	mov	r0, r31
    4f66:	fa e0       	ldi	r31, 0x0A	; 10
    4f68:	af 2e       	mov	r10, r31
    4f6a:	f0 2d       	mov	r31, r0
    4f6c:	bb 24       	eor	r11, r11
    4f6e:	cc 24       	eor	r12, r12
    4f70:	dd 24       	eor	r13, r13
    4f72:	ee 24       	eor	r14, r14
    4f74:	ff 24       	eor	r15, r15
    4f76:	00 e0       	ldi	r16, 0x00	; 0
    4f78:	10 e0       	ldi	r17, 0x00	; 0
    4f7a:	0e 94 9c 01 	call	0x338	; 0x338 <__udivdi3>
    4f7e:	22 2e       	mov	r2, r18
    4f80:	33 2e       	mov	r3, r19
    4f82:	44 2e       	mov	r4, r20
    4f84:	55 2e       	mov	r5, r21
    4f86:	66 2e       	mov	r6, r22
    4f88:	77 2e       	mov	r7, r23
    4f8a:	88 2e       	mov	r8, r24
    4f8c:	99 2e       	mov	r9, r25
    4f8e:	a2 2c       	mov	r10, r2
    4f90:	b3 2c       	mov	r11, r3
    4f92:	c4 2c       	mov	r12, r4
    4f94:	d5 2c       	mov	r13, r5
    4f96:	e6 2c       	mov	r14, r6
    4f98:	f7 2c       	mov	r15, r7
    4f9a:	08 2d       	mov	r16, r8
    4f9c:	19 2d       	mov	r17, r9
    4f9e:	2a 2d       	mov	r18, r10
    4fa0:	3b 2d       	mov	r19, r11
    4fa2:	4c 2d       	mov	r20, r12
    4fa4:	5d 2d       	mov	r21, r13
    4fa6:	6e 2d       	mov	r22, r14
    4fa8:	7f 2d       	mov	r23, r15
    4faa:	80 2f       	mov	r24, r16
    4fac:	91 2f       	mov	r25, r17
    4fae:	0f 2e       	mov	r0, r31
    4fb0:	f0 ea       	ldi	r31, 0xA0	; 160
    4fb2:	af 2e       	mov	r10, r31
    4fb4:	f0 2d       	mov	r31, r0
    4fb6:	0f 2e       	mov	r0, r31
    4fb8:	f6 e8       	ldi	r31, 0x86	; 134
    4fba:	bf 2e       	mov	r11, r31
    4fbc:	f0 2d       	mov	r31, r0
    4fbe:	cc 24       	eor	r12, r12
    4fc0:	c3 94       	inc	r12
    4fc2:	dd 24       	eor	r13, r13
    4fc4:	ee 24       	eor	r14, r14
    4fc6:	ff 24       	eor	r15, r15
    4fc8:	00 e0       	ldi	r16, 0x00	; 0
    4fca:	10 e0       	ldi	r17, 0x00	; 0
    4fcc:	0e 94 11 08 	call	0x1022	; 0x1022 <__umoddi3>
    4fd0:	22 2e       	mov	r2, r18
    4fd2:	33 2e       	mov	r3, r19
    4fd4:	44 2e       	mov	r4, r20
    4fd6:	55 2e       	mov	r5, r21
    4fd8:	66 2e       	mov	r6, r22
    4fda:	77 2e       	mov	r7, r23
    4fdc:	88 2e       	mov	r8, r24
    4fde:	99 2e       	mov	r9, r25
    4fe0:	a2 2c       	mov	r10, r2
    4fe2:	b3 2c       	mov	r11, r3
    4fe4:	c4 2c       	mov	r12, r4
    4fe6:	d5 2c       	mov	r13, r5
    4fe8:	e6 2c       	mov	r14, r6
    4fea:	f7 2c       	mov	r15, r7
    4fec:	08 2d       	mov	r16, r8
    4fee:	19 2d       	mov	r17, r9
    4ff0:	2a 2d       	mov	r18, r10
    4ff2:	3b 2d       	mov	r19, r11
    4ff4:	4c 2d       	mov	r20, r12
    4ff6:	5d 2d       	mov	r21, r13
    4ff8:	6e 2d       	mov	r22, r14
    4ffa:	7f 2d       	mov	r23, r15
    4ffc:	80 2f       	mov	r24, r16
    4ffe:	91 2f       	mov	r25, r17
    5000:	0e 94 7f 21 	call	0x42fe	; 0x42fe <CLCD_voidSendNumber>
	}

}
    5004:	ef 96       	adiw	r28, 0x3f	; 63
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	f8 94       	cli
    500a:	de bf       	out	0x3e, r29	; 62
    500c:	0f be       	out	0x3f, r0	; 63
    500e:	cd bf       	out	0x3d, r28	; 61
    5010:	cf 91       	pop	r28
    5012:	df 91       	pop	r29
    5014:	1f 91       	pop	r17
    5016:	0f 91       	pop	r16
    5018:	ff 90       	pop	r15
    501a:	ef 90       	pop	r14
    501c:	df 90       	pop	r13
    501e:	cf 90       	pop	r12
    5020:	bf 90       	pop	r11
    5022:	af 90       	pop	r10
    5024:	9f 90       	pop	r9
    5026:	8f 90       	pop	r8
    5028:	7f 90       	pop	r7
    502a:	6f 90       	pop	r6
    502c:	5f 90       	pop	r5
    502e:	4f 90       	pop	r4
    5030:	3f 90       	pop	r3
    5032:	2f 90       	pop	r2
    5034:	08 95       	ret

00005036 <CLCD_voidSendEnableTrigger>:
static void CLCD_voidSendEnableTrigger(void)
{
    5036:	df 93       	push	r29
    5038:	cf 93       	push	r28
    503a:	cd b7       	in	r28, 0x3d	; 61
    503c:	de b7       	in	r29, 0x3e	; 62
    503e:	6c 97       	sbiw	r28, 0x1c	; 28
    5040:	0f b6       	in	r0, 0x3f	; 63
    5042:	f8 94       	cli
    5044:	de bf       	out	0x3e, r29	; 62
    5046:	0f be       	out	0x3f, r0	; 63
    5048:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidSetPinVal(CLCD_EN, HIGH);
    504a:	81 e0       	ldi	r24, 0x01	; 1
    504c:	62 e0       	ldi	r22, 0x02	; 2
    504e:	41 e0       	ldi	r20, 0x01	; 1
    5050:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
    5054:	80 e0       	ldi	r24, 0x00	; 0
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	a0 e8       	ldi	r26, 0x80	; 128
    505a:	bf e3       	ldi	r27, 0x3F	; 63
    505c:	89 8f       	std	Y+25, r24	; 0x19
    505e:	9a 8f       	std	Y+26, r25	; 0x1a
    5060:	ab 8f       	std	Y+27, r26	; 0x1b
    5062:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5064:	69 8d       	ldd	r22, Y+25	; 0x19
    5066:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5068:	8b 8d       	ldd	r24, Y+27	; 0x1b
    506a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	30 e0       	ldi	r19, 0x00	; 0
    5070:	4a ef       	ldi	r20, 0xFA	; 250
    5072:	54 e4       	ldi	r21, 0x44	; 68
    5074:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5078:	dc 01       	movw	r26, r24
    507a:	cb 01       	movw	r24, r22
    507c:	8d 8b       	std	Y+21, r24	; 0x15
    507e:	9e 8b       	std	Y+22, r25	; 0x16
    5080:	af 8b       	std	Y+23, r26	; 0x17
    5082:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5084:	6d 89       	ldd	r22, Y+21	; 0x15
    5086:	7e 89       	ldd	r23, Y+22	; 0x16
    5088:	8f 89       	ldd	r24, Y+23	; 0x17
    508a:	98 8d       	ldd	r25, Y+24	; 0x18
    508c:	20 e0       	ldi	r18, 0x00	; 0
    508e:	30 e0       	ldi	r19, 0x00	; 0
    5090:	40 e8       	ldi	r20, 0x80	; 128
    5092:	5f e3       	ldi	r21, 0x3F	; 63
    5094:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    5098:	88 23       	and	r24, r24
    509a:	2c f4       	brge	.+10     	; 0x50a6 <CLCD_voidSendEnableTrigger+0x70>
		__ticks = 1;
    509c:	81 e0       	ldi	r24, 0x01	; 1
    509e:	90 e0       	ldi	r25, 0x00	; 0
    50a0:	9c 8b       	std	Y+20, r25	; 0x14
    50a2:	8b 8b       	std	Y+19, r24	; 0x13
    50a4:	3f c0       	rjmp	.+126    	; 0x5124 <CLCD_voidSendEnableTrigger+0xee>
	else if (__tmp > 65535)
    50a6:	6d 89       	ldd	r22, Y+21	; 0x15
    50a8:	7e 89       	ldd	r23, Y+22	; 0x16
    50aa:	8f 89       	ldd	r24, Y+23	; 0x17
    50ac:	98 8d       	ldd	r25, Y+24	; 0x18
    50ae:	20 e0       	ldi	r18, 0x00	; 0
    50b0:	3f ef       	ldi	r19, 0xFF	; 255
    50b2:	4f e7       	ldi	r20, 0x7F	; 127
    50b4:	57 e4       	ldi	r21, 0x47	; 71
    50b6:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    50ba:	18 16       	cp	r1, r24
    50bc:	4c f5       	brge	.+82     	; 0x5110 <CLCD_voidSendEnableTrigger+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50be:	69 8d       	ldd	r22, Y+25	; 0x19
    50c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50c6:	20 e0       	ldi	r18, 0x00	; 0
    50c8:	30 e0       	ldi	r19, 0x00	; 0
    50ca:	40 e2       	ldi	r20, 0x20	; 32
    50cc:	51 e4       	ldi	r21, 0x41	; 65
    50ce:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    50d2:	dc 01       	movw	r26, r24
    50d4:	cb 01       	movw	r24, r22
    50d6:	bc 01       	movw	r22, r24
    50d8:	cd 01       	movw	r24, r26
    50da:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    50de:	dc 01       	movw	r26, r24
    50e0:	cb 01       	movw	r24, r22
    50e2:	9c 8b       	std	Y+20, r25	; 0x14
    50e4:	8b 8b       	std	Y+19, r24	; 0x13
    50e6:	0f c0       	rjmp	.+30     	; 0x5106 <CLCD_voidSendEnableTrigger+0xd0>
    50e8:	88 ec       	ldi	r24, 0xC8	; 200
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	9a 8b       	std	Y+18, r25	; 0x12
    50ee:	89 8b       	std	Y+17, r24	; 0x11
    50f0:	89 89       	ldd	r24, Y+17	; 0x11
    50f2:	9a 89       	ldd	r25, Y+18	; 0x12
    50f4:	01 97       	sbiw	r24, 0x01	; 1
    50f6:	f1 f7       	brne	.-4      	; 0x50f4 <CLCD_voidSendEnableTrigger+0xbe>
    50f8:	9a 8b       	std	Y+18, r25	; 0x12
    50fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50fc:	8b 89       	ldd	r24, Y+19	; 0x13
    50fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5100:	01 97       	sbiw	r24, 0x01	; 1
    5102:	9c 8b       	std	Y+20, r25	; 0x14
    5104:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5106:	8b 89       	ldd	r24, Y+19	; 0x13
    5108:	9c 89       	ldd	r25, Y+20	; 0x14
    510a:	00 97       	sbiw	r24, 0x00	; 0
    510c:	69 f7       	brne	.-38     	; 0x50e8 <CLCD_voidSendEnableTrigger+0xb2>
    510e:	14 c0       	rjmp	.+40     	; 0x5138 <CLCD_voidSendEnableTrigger+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5110:	6d 89       	ldd	r22, Y+21	; 0x15
    5112:	7e 89       	ldd	r23, Y+22	; 0x16
    5114:	8f 89       	ldd	r24, Y+23	; 0x17
    5116:	98 8d       	ldd	r25, Y+24	; 0x18
    5118:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    511c:	dc 01       	movw	r26, r24
    511e:	cb 01       	movw	r24, r22
    5120:	9c 8b       	std	Y+20, r25	; 0x14
    5122:	8b 8b       	std	Y+19, r24	; 0x13
    5124:	8b 89       	ldd	r24, Y+19	; 0x13
    5126:	9c 89       	ldd	r25, Y+20	; 0x14
    5128:	98 8b       	std	Y+16, r25	; 0x10
    512a:	8f 87       	std	Y+15, r24	; 0x0f
    512c:	8f 85       	ldd	r24, Y+15	; 0x0f
    512e:	98 89       	ldd	r25, Y+16	; 0x10
    5130:	01 97       	sbiw	r24, 0x01	; 1
    5132:	f1 f7       	brne	.-4      	; 0x5130 <CLCD_voidSendEnableTrigger+0xfa>
    5134:	98 8b       	std	Y+16, r25	; 0x10
    5136:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_voidSetPinVal(CLCD_EN, LOW);
    5138:	81 e0       	ldi	r24, 0x01	; 1
    513a:	62 e0       	ldi	r22, 0x02	; 2
    513c:	40 e0       	ldi	r20, 0x00	; 0
    513e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	a0 e8       	ldi	r26, 0x80	; 128
    5148:	bf e3       	ldi	r27, 0x3F	; 63
    514a:	8b 87       	std	Y+11, r24	; 0x0b
    514c:	9c 87       	std	Y+12, r25	; 0x0c
    514e:	ad 87       	std	Y+13, r26	; 0x0d
    5150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5152:	6b 85       	ldd	r22, Y+11	; 0x0b
    5154:	7c 85       	ldd	r23, Y+12	; 0x0c
    5156:	8d 85       	ldd	r24, Y+13	; 0x0d
    5158:	9e 85       	ldd	r25, Y+14	; 0x0e
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	4a ef       	ldi	r20, 0xFA	; 250
    5160:	54 e4       	ldi	r21, 0x44	; 68
    5162:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5166:	dc 01       	movw	r26, r24
    5168:	cb 01       	movw	r24, r22
    516a:	8f 83       	std	Y+7, r24	; 0x07
    516c:	98 87       	std	Y+8, r25	; 0x08
    516e:	a9 87       	std	Y+9, r26	; 0x09
    5170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5172:	6f 81       	ldd	r22, Y+7	; 0x07
    5174:	78 85       	ldd	r23, Y+8	; 0x08
    5176:	89 85       	ldd	r24, Y+9	; 0x09
    5178:	9a 85       	ldd	r25, Y+10	; 0x0a
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	30 e0       	ldi	r19, 0x00	; 0
    517e:	40 e8       	ldi	r20, 0x80	; 128
    5180:	5f e3       	ldi	r21, 0x3F	; 63
    5182:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    5186:	88 23       	and	r24, r24
    5188:	2c f4       	brge	.+10     	; 0x5194 <CLCD_voidSendEnableTrigger+0x15e>
		__ticks = 1;
    518a:	81 e0       	ldi	r24, 0x01	; 1
    518c:	90 e0       	ldi	r25, 0x00	; 0
    518e:	9e 83       	std	Y+6, r25	; 0x06
    5190:	8d 83       	std	Y+5, r24	; 0x05
    5192:	3f c0       	rjmp	.+126    	; 0x5212 <CLCD_voidSendEnableTrigger+0x1dc>
	else if (__tmp > 65535)
    5194:	6f 81       	ldd	r22, Y+7	; 0x07
    5196:	78 85       	ldd	r23, Y+8	; 0x08
    5198:	89 85       	ldd	r24, Y+9	; 0x09
    519a:	9a 85       	ldd	r25, Y+10	; 0x0a
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	3f ef       	ldi	r19, 0xFF	; 255
    51a0:	4f e7       	ldi	r20, 0x7F	; 127
    51a2:	57 e4       	ldi	r21, 0x47	; 71
    51a4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    51a8:	18 16       	cp	r1, r24
    51aa:	4c f5       	brge	.+82     	; 0x51fe <CLCD_voidSendEnableTrigger+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    51ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    51b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    51b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	40 e2       	ldi	r20, 0x20	; 32
    51ba:	51 e4       	ldi	r21, 0x41	; 65
    51bc:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    51c0:	dc 01       	movw	r26, r24
    51c2:	cb 01       	movw	r24, r22
    51c4:	bc 01       	movw	r22, r24
    51c6:	cd 01       	movw	r24, r26
    51c8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	9e 83       	std	Y+6, r25	; 0x06
    51d2:	8d 83       	std	Y+5, r24	; 0x05
    51d4:	0f c0       	rjmp	.+30     	; 0x51f4 <CLCD_voidSendEnableTrigger+0x1be>
    51d6:	88 ec       	ldi	r24, 0xC8	; 200
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	9c 83       	std	Y+4, r25	; 0x04
    51dc:	8b 83       	std	Y+3, r24	; 0x03
    51de:	8b 81       	ldd	r24, Y+3	; 0x03
    51e0:	9c 81       	ldd	r25, Y+4	; 0x04
    51e2:	01 97       	sbiw	r24, 0x01	; 1
    51e4:	f1 f7       	brne	.-4      	; 0x51e2 <CLCD_voidSendEnableTrigger+0x1ac>
    51e6:	9c 83       	std	Y+4, r25	; 0x04
    51e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ea:	8d 81       	ldd	r24, Y+5	; 0x05
    51ec:	9e 81       	ldd	r25, Y+6	; 0x06
    51ee:	01 97       	sbiw	r24, 0x01	; 1
    51f0:	9e 83       	std	Y+6, r25	; 0x06
    51f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51f4:	8d 81       	ldd	r24, Y+5	; 0x05
    51f6:	9e 81       	ldd	r25, Y+6	; 0x06
    51f8:	00 97       	sbiw	r24, 0x00	; 0
    51fa:	69 f7       	brne	.-38     	; 0x51d6 <CLCD_voidSendEnableTrigger+0x1a0>
    51fc:	14 c0       	rjmp	.+40     	; 0x5226 <CLCD_voidSendEnableTrigger+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51fe:	6f 81       	ldd	r22, Y+7	; 0x07
    5200:	78 85       	ldd	r23, Y+8	; 0x08
    5202:	89 85       	ldd	r24, Y+9	; 0x09
    5204:	9a 85       	ldd	r25, Y+10	; 0x0a
    5206:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    520a:	dc 01       	movw	r26, r24
    520c:	cb 01       	movw	r24, r22
    520e:	9e 83       	std	Y+6, r25	; 0x06
    5210:	8d 83       	std	Y+5, r24	; 0x05
    5212:	8d 81       	ldd	r24, Y+5	; 0x05
    5214:	9e 81       	ldd	r25, Y+6	; 0x06
    5216:	9a 83       	std	Y+2, r25	; 0x02
    5218:	89 83       	std	Y+1, r24	; 0x01
    521a:	89 81       	ldd	r24, Y+1	; 0x01
    521c:	9a 81       	ldd	r25, Y+2	; 0x02
    521e:	01 97       	sbiw	r24, 0x01	; 1
    5220:	f1 f7       	brne	.-4      	; 0x521e <CLCD_voidSendEnableTrigger+0x1e8>
    5222:	9a 83       	std	Y+2, r25	; 0x02
    5224:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    5226:	6c 96       	adiw	r28, 0x1c	; 28
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	f8 94       	cli
    522c:	de bf       	out	0x3e, r29	; 62
    522e:	0f be       	out	0x3f, r0	; 63
    5230:	cd bf       	out	0x3d, r28	; 61
    5232:	cf 91       	pop	r28
    5234:	df 91       	pop	r29
    5236:	08 95       	ret

00005238 <CLCD_voidGoToX_Y>:
void CLCD_voidGoToX_Y		( 	u8 Copy_u8Row , u8 Copy_u8Col 	)
{
    5238:	df 93       	push	r29
    523a:	cf 93       	push	r28
    523c:	00 d0       	rcall	.+0      	; 0x523e <CLCD_voidGoToX_Y+0x6>
    523e:	cd b7       	in	r28, 0x3d	; 61
    5240:	de b7       	in	r29, 0x3e	; 62
    5242:	89 83       	std	Y+1, r24	; 0x01
    5244:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_u8Row == CLCD_ROW1 )
    5246:	89 81       	ldd	r24, Y+1	; 0x01
    5248:	81 30       	cpi	r24, 0x01	; 1
    524a:	29 f4       	brne	.+10     	; 0x5256 <CLCD_voidGoToX_Y+0x1e>
	{
		CLCD_voidSendCommand(CLCD_SET_DDRAM_ADDRESS + ( Copy_u8Col - 1 ) );
    524c:	8a 81       	ldd	r24, Y+2	; 0x02
    524e:	81 58       	subi	r24, 0x81	; 129
    5250:	0e 94 21 21 	call	0x4242	; 0x4242 <CLCD_voidSendCommand>
    5254:	07 c0       	rjmp	.+14     	; 0x5264 <CLCD_voidGoToX_Y+0x2c>
	}
	else if( Copy_u8Row == CLCD_ROW2 )
    5256:	89 81       	ldd	r24, Y+1	; 0x01
    5258:	82 30       	cpi	r24, 0x02	; 2
    525a:	21 f4       	brne	.+8      	; 0x5264 <CLCD_voidGoToX_Y+0x2c>
	{
		CLCD_voidSendCommand(CLCD_SET_DDRAM_ADDRESS + 0x40 + ( Copy_u8Col - 1 ) );
    525c:	8a 81       	ldd	r24, Y+2	; 0x02
    525e:	81 54       	subi	r24, 0x41	; 65
    5260:	0e 94 21 21 	call	0x4242	; 0x4242 <CLCD_voidSendCommand>
	}
}
    5264:	0f 90       	pop	r0
    5266:	0f 90       	pop	r0
    5268:	cf 91       	pop	r28
    526a:	df 91       	pop	r29
    526c:	08 95       	ret

0000526e <CLCD_voidDrwaExxtraChar>:
void CLCD_voidDrwaExxtraChar(	u8 Copy_u8Row ,u8 Copy_u8Col , u8 * Copy_u8ArrayChars)
{
    526e:	df 93       	push	r29
    5270:	cf 93       	push	r28
    5272:	00 d0       	rcall	.+0      	; 0x5274 <CLCD_voidDrwaExxtraChar+0x6>
    5274:	00 d0       	rcall	.+0      	; 0x5276 <CLCD_voidDrwaExxtraChar+0x8>
    5276:	0f 92       	push	r0
    5278:	cd b7       	in	r28, 0x3d	; 61
    527a:	de b7       	in	r29, 0x3e	; 62
    527c:	8a 83       	std	Y+2, r24	; 0x02
    527e:	6b 83       	std	Y+3, r22	; 0x03
    5280:	5d 83       	std	Y+5, r21	; 0x05
    5282:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8Iterrator = 0;
    5284:	19 82       	std	Y+1, r1	; 0x01
	/* Go To CGRAM */
	CLCD_voidSendCommand ( CLCD_SET_CGRAM_ADDRESS );
    5286:	80 e4       	ldi	r24, 0x40	; 64
    5288:	0e 94 21 21 	call	0x4242	; 0x4242 <CLCD_voidSendCommand>
	/* Draw The Character */
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< ( sizeof(Copy_u8ArrayChars)/sizeof(Copy_u8ArrayChars[0])); LOC_u8Iterrator++ )
    528c:	19 82       	std	Y+1, r1	; 0x01
    528e:	0e c0       	rjmp	.+28     	; 0x52ac <CLCD_voidDrwaExxtraChar+0x3e>
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
    5290:	89 81       	ldd	r24, Y+1	; 0x01
    5292:	28 2f       	mov	r18, r24
    5294:	30 e0       	ldi	r19, 0x00	; 0
    5296:	8c 81       	ldd	r24, Y+4	; 0x04
    5298:	9d 81       	ldd	r25, Y+5	; 0x05
    529a:	fc 01       	movw	r30, r24
    529c:	e2 0f       	add	r30, r18
    529e:	f3 1f       	adc	r31, r19
    52a0:	80 81       	ld	r24, Z
    52a2:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
{
	u8 LOC_u8Iterrator = 0;
	/* Go To CGRAM */
	CLCD_voidSendCommand ( CLCD_SET_CGRAM_ADDRESS );
	/* Draw The Character */
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< ( sizeof(Copy_u8ArrayChars)/sizeof(Copy_u8ArrayChars[0])); LOC_u8Iterrator++ )
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
    52a8:	8f 5f       	subi	r24, 0xFF	; 255
    52aa:	89 83       	std	Y+1, r24	; 0x01
    52ac:	89 81       	ldd	r24, Y+1	; 0x01
    52ae:	82 30       	cpi	r24, 0x02	; 2
    52b0:	78 f3       	brcs	.-34     	; 0x5290 <CLCD_voidDrwaExxtraChar+0x22>
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
	}
	CLCD_voidGoToX_Y( Copy_u8Row, Copy_u8Col );
    52b2:	8a 81       	ldd	r24, Y+2	; 0x02
    52b4:	6b 81       	ldd	r22, Y+3	; 0x03
    52b6:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< ( sizeof(Copy_u8ArrayChars)/sizeof(Copy_u8ArrayChars[0])); LOC_u8Iterrator++ )
    52ba:	19 82       	std	Y+1, r1	; 0x01
    52bc:	0e c0       	rjmp	.+28     	; 0x52da <CLCD_voidDrwaExxtraChar+0x6c>
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
    52be:	89 81       	ldd	r24, Y+1	; 0x01
    52c0:	28 2f       	mov	r18, r24
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	8c 81       	ldd	r24, Y+4	; 0x04
    52c6:	9d 81       	ldd	r25, Y+5	; 0x05
    52c8:	fc 01       	movw	r30, r24
    52ca:	e2 0f       	add	r30, r18
    52cc:	f3 1f       	adc	r31, r19
    52ce:	80 81       	ld	r24, Z
    52d0:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< ( sizeof(Copy_u8ArrayChars)/sizeof(Copy_u8ArrayChars[0])); LOC_u8Iterrator++ )
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
	}
	CLCD_voidGoToX_Y( Copy_u8Row, Copy_u8Col );
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< ( sizeof(Copy_u8ArrayChars)/sizeof(Copy_u8ArrayChars[0])); LOC_u8Iterrator++ )
    52d4:	89 81       	ldd	r24, Y+1	; 0x01
    52d6:	8f 5f       	subi	r24, 0xFF	; 255
    52d8:	89 83       	std	Y+1, r24	; 0x01
    52da:	89 81       	ldd	r24, Y+1	; 0x01
    52dc:	82 30       	cpi	r24, 0x02	; 2
    52de:	78 f3       	brcs	.-34     	; 0x52be <CLCD_voidDrwaExxtraChar+0x50>
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
	}
}
    52e0:	0f 90       	pop	r0
    52e2:	0f 90       	pop	r0
    52e4:	0f 90       	pop	r0
    52e6:	0f 90       	pop	r0
    52e8:	0f 90       	pop	r0
    52ea:	cf 91       	pop	r28
    52ec:	df 91       	pop	r29
    52ee:	08 95       	ret

000052f0 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen(void)
{
    52f0:	df 93       	push	r29
    52f2:	cf 93       	push	r28
    52f4:	cd b7       	in	r28, 0x3d	; 61
    52f6:	de b7       	in	r29, 0x3e	; 62
    52f8:	2e 97       	sbiw	r28, 0x0e	; 14
    52fa:	0f b6       	in	r0, 0x3f	; 63
    52fc:	f8 94       	cli
    52fe:	de bf       	out	0x3e, r29	; 62
    5300:	0f be       	out	0x3f, r0	; 63
    5302:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(CLCD_DISPLAY_CLEAR);
    5304:	81 e0       	ldi	r24, 0x01	; 1
    5306:	0e 94 21 21 	call	0x4242	; 0x4242 <CLCD_voidSendCommand>
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	a0 e0       	ldi	r26, 0x00	; 0
    5310:	b0 e4       	ldi	r27, 0x40	; 64
    5312:	8b 87       	std	Y+11, r24	; 0x0b
    5314:	9c 87       	std	Y+12, r25	; 0x0c
    5316:	ad 87       	std	Y+13, r26	; 0x0d
    5318:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    531a:	6b 85       	ldd	r22, Y+11	; 0x0b
    531c:	7c 85       	ldd	r23, Y+12	; 0x0c
    531e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5320:	9e 85       	ldd	r25, Y+14	; 0x0e
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	4a ef       	ldi	r20, 0xFA	; 250
    5328:	54 e4       	ldi	r21, 0x44	; 68
    532a:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    532e:	dc 01       	movw	r26, r24
    5330:	cb 01       	movw	r24, r22
    5332:	8f 83       	std	Y+7, r24	; 0x07
    5334:	98 87       	std	Y+8, r25	; 0x08
    5336:	a9 87       	std	Y+9, r26	; 0x09
    5338:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    533a:	6f 81       	ldd	r22, Y+7	; 0x07
    533c:	78 85       	ldd	r23, Y+8	; 0x08
    533e:	89 85       	ldd	r24, Y+9	; 0x09
    5340:	9a 85       	ldd	r25, Y+10	; 0x0a
    5342:	20 e0       	ldi	r18, 0x00	; 0
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	40 e8       	ldi	r20, 0x80	; 128
    5348:	5f e3       	ldi	r21, 0x3F	; 63
    534a:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    534e:	88 23       	and	r24, r24
    5350:	2c f4       	brge	.+10     	; 0x535c <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	9e 83       	std	Y+6, r25	; 0x06
    5358:	8d 83       	std	Y+5, r24	; 0x05
    535a:	3f c0       	rjmp	.+126    	; 0x53da <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    535c:	6f 81       	ldd	r22, Y+7	; 0x07
    535e:	78 85       	ldd	r23, Y+8	; 0x08
    5360:	89 85       	ldd	r24, Y+9	; 0x09
    5362:	9a 85       	ldd	r25, Y+10	; 0x0a
    5364:	20 e0       	ldi	r18, 0x00	; 0
    5366:	3f ef       	ldi	r19, 0xFF	; 255
    5368:	4f e7       	ldi	r20, 0x7F	; 127
    536a:	57 e4       	ldi	r21, 0x47	; 71
    536c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    5370:	18 16       	cp	r1, r24
    5372:	4c f5       	brge	.+82     	; 0x53c6 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5374:	6b 85       	ldd	r22, Y+11	; 0x0b
    5376:	7c 85       	ldd	r23, Y+12	; 0x0c
    5378:	8d 85       	ldd	r24, Y+13	; 0x0d
    537a:	9e 85       	ldd	r25, Y+14	; 0x0e
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	40 e2       	ldi	r20, 0x20	; 32
    5382:	51 e4       	ldi	r21, 0x41	; 65
    5384:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22
    538c:	bc 01       	movw	r22, r24
    538e:	cd 01       	movw	r24, r26
    5390:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	9e 83       	std	Y+6, r25	; 0x06
    539a:	8d 83       	std	Y+5, r24	; 0x05
    539c:	0f c0       	rjmp	.+30     	; 0x53bc <CLCD_voidClearScreen+0xcc>
    539e:	88 ec       	ldi	r24, 0xC8	; 200
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	9c 83       	std	Y+4, r25	; 0x04
    53a4:	8b 83       	std	Y+3, r24	; 0x03
    53a6:	8b 81       	ldd	r24, Y+3	; 0x03
    53a8:	9c 81       	ldd	r25, Y+4	; 0x04
    53aa:	01 97       	sbiw	r24, 0x01	; 1
    53ac:	f1 f7       	brne	.-4      	; 0x53aa <CLCD_voidClearScreen+0xba>
    53ae:	9c 83       	std	Y+4, r25	; 0x04
    53b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53b2:	8d 81       	ldd	r24, Y+5	; 0x05
    53b4:	9e 81       	ldd	r25, Y+6	; 0x06
    53b6:	01 97       	sbiw	r24, 0x01	; 1
    53b8:	9e 83       	std	Y+6, r25	; 0x06
    53ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53bc:	8d 81       	ldd	r24, Y+5	; 0x05
    53be:	9e 81       	ldd	r25, Y+6	; 0x06
    53c0:	00 97       	sbiw	r24, 0x00	; 0
    53c2:	69 f7       	brne	.-38     	; 0x539e <CLCD_voidClearScreen+0xae>
    53c4:	14 c0       	rjmp	.+40     	; 0x53ee <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53c6:	6f 81       	ldd	r22, Y+7	; 0x07
    53c8:	78 85       	ldd	r23, Y+8	; 0x08
    53ca:	89 85       	ldd	r24, Y+9	; 0x09
    53cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ce:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53d2:	dc 01       	movw	r26, r24
    53d4:	cb 01       	movw	r24, r22
    53d6:	9e 83       	std	Y+6, r25	; 0x06
    53d8:	8d 83       	std	Y+5, r24	; 0x05
    53da:	8d 81       	ldd	r24, Y+5	; 0x05
    53dc:	9e 81       	ldd	r25, Y+6	; 0x06
    53de:	9a 83       	std	Y+2, r25	; 0x02
    53e0:	89 83       	std	Y+1, r24	; 0x01
    53e2:	89 81       	ldd	r24, Y+1	; 0x01
    53e4:	9a 81       	ldd	r25, Y+2	; 0x02
    53e6:	01 97       	sbiw	r24, 0x01	; 1
    53e8:	f1 f7       	brne	.-4      	; 0x53e6 <CLCD_voidClearScreen+0xf6>
    53ea:	9a 83       	std	Y+2, r25	; 0x02
    53ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    53ee:	2e 96       	adiw	r28, 0x0e	; 14
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	cd bf       	out	0x3d, r28	; 61
    53fa:	cf 91       	pop	r28
    53fc:	df 91       	pop	r29
    53fe:	08 95       	ret

00005400 <KEYPAD_voidInit>:
#include "KEYPAD_private.h"
#include "util/delay.h"


void KEYPAD_voidInit(void)
{
    5400:	df 93       	push	r29
    5402:	cf 93       	push	r28
    5404:	cd b7       	in	r28, 0x3d	; 61
    5406:	de b7       	in	r29, 0x3e	; 62
	/* Set the Directions of Rows as Input */
	GPIO_voidSetPinDir(KPAD_ROW_PORT,KPAD_ROW0, INPUT);
    5408:	83 e0       	ldi	r24, 0x03	; 3
    540a:	60 e0       	ldi	r22, 0x00	; 0
    540c:	40 e0       	ldi	r20, 0x00	; 0
    540e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_ROW_PORT,KPAD_ROW1, INPUT);
    5412:	83 e0       	ldi	r24, 0x03	; 3
    5414:	61 e0       	ldi	r22, 0x01	; 1
    5416:	40 e0       	ldi	r20, 0x00	; 0
    5418:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_ROW_PORT,KPAD_ROW2, INPUT);
    541c:	83 e0       	ldi	r24, 0x03	; 3
    541e:	62 e0       	ldi	r22, 0x02	; 2
    5420:	40 e0       	ldi	r20, 0x00	; 0
    5422:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_ROW_PORT,KPAD_ROW3, INPUT);
    5426:	83 e0       	ldi	r24, 0x03	; 3
    5428:	63 e0       	ldi	r22, 0x03	; 3
    542a:	40 e0       	ldi	r20, 0x00	; 0
    542c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
	/* Configure the Pins of ROWS PULL UP */
	GPIO_voidSetPinVal(KPAD_ROW_PORT,KPAD_ROW0, HIGH );
    5430:	83 e0       	ldi	r24, 0x03	; 3
    5432:	60 e0       	ldi	r22, 0x00	; 0
    5434:	41 e0       	ldi	r20, 0x01	; 1
    5436:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_ROW_PORT,KPAD_ROW1, HIGH );
    543a:	83 e0       	ldi	r24, 0x03	; 3
    543c:	61 e0       	ldi	r22, 0x01	; 1
    543e:	41 e0       	ldi	r20, 0x01	; 1
    5440:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_ROW_PORT,KPAD_ROW2, HIGH );
    5444:	83 e0       	ldi	r24, 0x03	; 3
    5446:	62 e0       	ldi	r22, 0x02	; 2
    5448:	41 e0       	ldi	r20, 0x01	; 1
    544a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_ROW_PORT,KPAD_ROW3, HIGH );
    544e:	83 e0       	ldi	r24, 0x03	; 3
    5450:	63 e0       	ldi	r22, 0x03	; 3
    5452:	41 e0       	ldi	r20, 0x01	; 1
    5454:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	/* Set the Columns Pins as PUTPUT PINS */
	GPIO_voidSetPinDir(KPAD_COL_PORT,KPAD_COL0, OUTPUT);
    5458:	83 e0       	ldi	r24, 0x03	; 3
    545a:	64 e0       	ldi	r22, 0x04	; 4
    545c:	41 e0       	ldi	r20, 0x01	; 1
    545e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_COL_PORT,KPAD_COL1, OUTPUT);
    5462:	83 e0       	ldi	r24, 0x03	; 3
    5464:	65 e0       	ldi	r22, 0x05	; 5
    5466:	41 e0       	ldi	r20, 0x01	; 1
    5468:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_COL_PORT,KPAD_COL2, OUTPUT);
    546c:	83 e0       	ldi	r24, 0x03	; 3
    546e:	66 e0       	ldi	r22, 0x06	; 6
    5470:	41 e0       	ldi	r20, 0x01	; 1
    5472:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_COL_PORT,KPAD_COL3, OUTPUT);
    5476:	83 e0       	ldi	r24, 0x03	; 3
    5478:	67 e0       	ldi	r22, 0x07	; 7
    547a:	41 e0       	ldi	r20, 0x01	; 1
    547c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <GPIO_voidSetPinDir>

	GPIO_voidSetPinVal(KPAD_COL_PORT,KPAD_COL0, HIGH );
    5480:	83 e0       	ldi	r24, 0x03	; 3
    5482:	64 e0       	ldi	r22, 0x04	; 4
    5484:	41 e0       	ldi	r20, 0x01	; 1
    5486:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_COL_PORT,KPAD_COL1, HIGH );
    548a:	83 e0       	ldi	r24, 0x03	; 3
    548c:	65 e0       	ldi	r22, 0x05	; 5
    548e:	41 e0       	ldi	r20, 0x01	; 1
    5490:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_COL_PORT,KPAD_COL2, HIGH );
    5494:	83 e0       	ldi	r24, 0x03	; 3
    5496:	66 e0       	ldi	r22, 0x06	; 6
    5498:	41 e0       	ldi	r20, 0x01	; 1
    549a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_COL_PORT,KPAD_COL3, HIGH );
    549e:	83 e0       	ldi	r24, 0x03	; 3
    54a0:	67 e0       	ldi	r22, 0x07	; 7
    54a2:	41 e0       	ldi	r20, 0x01	; 1
    54a4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>

}
    54a8:	cf 91       	pop	r28
    54aa:	df 91       	pop	r29
    54ac:	08 95       	ret

000054ae <KEYPAD_voidGetPressedButton>:

u8 KEYPAD_voidGetPressedButton(void)
{
    54ae:	df 93       	push	r29
    54b0:	cf 93       	push	r28
    54b2:	cd b7       	in	r28, 0x3d	; 61
    54b4:	de b7       	in	r29, 0x3e	; 62
    54b6:	62 97       	sbiw	r28, 0x12	; 18
    54b8:	0f b6       	in	r0, 0x3f	; 63
    54ba:	f8 94       	cli
    54bc:	de bf       	out	0x3e, r29	; 62
    54be:	0f be       	out	0x3f, r0	; 63
    54c0:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_ColIterator = 0;
    54c2:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Loc_RowIterator = 0;
    54c4:	19 8a       	std	Y+17, r1	; 0x11
	u8 Loc_PressedValue = 0;
    54c6:	18 8a       	std	Y+16, r1	; 0x10
	u8 Loc_ReturnData = 0;
    54c8:	1f 86       	std	Y+15, r1	; 0x0f
	for(Loc_ColIterator = (0+KPAD_COL_START); Loc_ColIterator<=KPAD_COL_END ; Loc_ColIterator++)
    54ca:	84 e0       	ldi	r24, 0x04	; 4
    54cc:	8a 8b       	std	Y+18, r24	; 0x12
    54ce:	bd c0       	rjmp	.+378    	; 0x564a <KEYPAD_voidGetPressedButton+0x19c>
	{
		GPIO_voidSetPinVal(KPAD_COL_PORT, Loc_ColIterator, LOW);
    54d0:	83 e0       	ldi	r24, 0x03	; 3
    54d2:	6a 89       	ldd	r22, Y+18	; 0x12
    54d4:	40 e0       	ldi	r20, 0x00	; 0
    54d6:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>

		for(Loc_RowIterator = (0+KPAD_ROW_START); Loc_RowIterator<=KPAD_ROW_END ; Loc_RowIterator++)
    54da:	19 8a       	std	Y+17, r1	; 0x11
    54dc:	aa c0       	rjmp	.+340    	; 0x5632 <KEYPAD_voidGetPressedButton+0x184>
		{
			Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT, Loc_RowIterator);
    54de:	83 e0       	ldi	r24, 0x03	; 3
    54e0:	69 89       	ldd	r22, Y+17	; 0x11
    54e2:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <GPIO_u8ReadPin>
    54e6:	88 8b       	std	Y+16, r24	; 0x10
			if (Loc_PressedValue == 0)
    54e8:	88 89       	ldd	r24, Y+16	; 0x10
    54ea:	88 23       	and	r24, r24
    54ec:	09 f0       	breq	.+2      	; 0x54f0 <KEYPAD_voidGetPressedButton+0x42>
    54ee:	9e c0       	rjmp	.+316    	; 0x562c <KEYPAD_voidGetPressedButton+0x17e>
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	a8 e4       	ldi	r26, 0x48	; 72
    54f6:	b2 e4       	ldi	r27, 0x42	; 66
    54f8:	8b 87       	std	Y+11, r24	; 0x0b
    54fa:	9c 87       	std	Y+12, r25	; 0x0c
    54fc:	ad 87       	std	Y+13, r26	; 0x0d
    54fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5500:	6b 85       	ldd	r22, Y+11	; 0x0b
    5502:	7c 85       	ldd	r23, Y+12	; 0x0c
    5504:	8d 85       	ldd	r24, Y+13	; 0x0d
    5506:	9e 85       	ldd	r25, Y+14	; 0x0e
    5508:	20 e0       	ldi	r18, 0x00	; 0
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	4a ef       	ldi	r20, 0xFA	; 250
    550e:	54 e4       	ldi	r21, 0x44	; 68
    5510:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5514:	dc 01       	movw	r26, r24
    5516:	cb 01       	movw	r24, r22
    5518:	8f 83       	std	Y+7, r24	; 0x07
    551a:	98 87       	std	Y+8, r25	; 0x08
    551c:	a9 87       	std	Y+9, r26	; 0x09
    551e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5520:	6f 81       	ldd	r22, Y+7	; 0x07
    5522:	78 85       	ldd	r23, Y+8	; 0x08
    5524:	89 85       	ldd	r24, Y+9	; 0x09
    5526:	9a 85       	ldd	r25, Y+10	; 0x0a
    5528:	20 e0       	ldi	r18, 0x00	; 0
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	40 e8       	ldi	r20, 0x80	; 128
    552e:	5f e3       	ldi	r21, 0x3F	; 63
    5530:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    5534:	88 23       	and	r24, r24
    5536:	2c f4       	brge	.+10     	; 0x5542 <KEYPAD_voidGetPressedButton+0x94>
		__ticks = 1;
    5538:	81 e0       	ldi	r24, 0x01	; 1
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	9e 83       	std	Y+6, r25	; 0x06
    553e:	8d 83       	std	Y+5, r24	; 0x05
    5540:	3f c0       	rjmp	.+126    	; 0x55c0 <KEYPAD_voidGetPressedButton+0x112>
	else if (__tmp > 65535)
    5542:	6f 81       	ldd	r22, Y+7	; 0x07
    5544:	78 85       	ldd	r23, Y+8	; 0x08
    5546:	89 85       	ldd	r24, Y+9	; 0x09
    5548:	9a 85       	ldd	r25, Y+10	; 0x0a
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	3f ef       	ldi	r19, 0xFF	; 255
    554e:	4f e7       	ldi	r20, 0x7F	; 127
    5550:	57 e4       	ldi	r21, 0x47	; 71
    5552:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    5556:	18 16       	cp	r1, r24
    5558:	4c f5       	brge	.+82     	; 0x55ac <KEYPAD_voidGetPressedButton+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    555a:	6b 85       	ldd	r22, Y+11	; 0x0b
    555c:	7c 85       	ldd	r23, Y+12	; 0x0c
    555e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5560:	9e 85       	ldd	r25, Y+14	; 0x0e
    5562:	20 e0       	ldi	r18, 0x00	; 0
    5564:	30 e0       	ldi	r19, 0x00	; 0
    5566:	40 e2       	ldi	r20, 0x20	; 32
    5568:	51 e4       	ldi	r21, 0x41	; 65
    556a:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    556e:	dc 01       	movw	r26, r24
    5570:	cb 01       	movw	r24, r22
    5572:	bc 01       	movw	r22, r24
    5574:	cd 01       	movw	r24, r26
    5576:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    557a:	dc 01       	movw	r26, r24
    557c:	cb 01       	movw	r24, r22
    557e:	9e 83       	std	Y+6, r25	; 0x06
    5580:	8d 83       	std	Y+5, r24	; 0x05
    5582:	0f c0       	rjmp	.+30     	; 0x55a2 <KEYPAD_voidGetPressedButton+0xf4>
    5584:	88 ec       	ldi	r24, 0xC8	; 200
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	9c 83       	std	Y+4, r25	; 0x04
    558a:	8b 83       	std	Y+3, r24	; 0x03
    558c:	8b 81       	ldd	r24, Y+3	; 0x03
    558e:	9c 81       	ldd	r25, Y+4	; 0x04
    5590:	01 97       	sbiw	r24, 0x01	; 1
    5592:	f1 f7       	brne	.-4      	; 0x5590 <KEYPAD_voidGetPressedButton+0xe2>
    5594:	9c 83       	std	Y+4, r25	; 0x04
    5596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5598:	8d 81       	ldd	r24, Y+5	; 0x05
    559a:	9e 81       	ldd	r25, Y+6	; 0x06
    559c:	01 97       	sbiw	r24, 0x01	; 1
    559e:	9e 83       	std	Y+6, r25	; 0x06
    55a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55a2:	8d 81       	ldd	r24, Y+5	; 0x05
    55a4:	9e 81       	ldd	r25, Y+6	; 0x06
    55a6:	00 97       	sbiw	r24, 0x00	; 0
    55a8:	69 f7       	brne	.-38     	; 0x5584 <KEYPAD_voidGetPressedButton+0xd6>
    55aa:	14 c0       	rjmp	.+40     	; 0x55d4 <KEYPAD_voidGetPressedButton+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55ac:	6f 81       	ldd	r22, Y+7	; 0x07
    55ae:	78 85       	ldd	r23, Y+8	; 0x08
    55b0:	89 85       	ldd	r24, Y+9	; 0x09
    55b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    55b4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    55b8:	dc 01       	movw	r26, r24
    55ba:	cb 01       	movw	r24, r22
    55bc:	9e 83       	std	Y+6, r25	; 0x06
    55be:	8d 83       	std	Y+5, r24	; 0x05
    55c0:	8d 81       	ldd	r24, Y+5	; 0x05
    55c2:	9e 81       	ldd	r25, Y+6	; 0x06
    55c4:	9a 83       	std	Y+2, r25	; 0x02
    55c6:	89 83       	std	Y+1, r24	; 0x01
    55c8:	89 81       	ldd	r24, Y+1	; 0x01
    55ca:	9a 81       	ldd	r25, Y+2	; 0x02
    55cc:	01 97       	sbiw	r24, 0x01	; 1
    55ce:	f1 f7       	brne	.-4      	; 0x55cc <KEYPAD_voidGetPressedButton+0x11e>
    55d0:	9a 83       	std	Y+2, r25	; 0x02
    55d2:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
    55d4:	83 e0       	ldi	r24, 0x03	; 3
    55d6:	69 89       	ldd	r22, Y+17	; 0x11
    55d8:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <GPIO_u8ReadPin>
    55dc:	88 8b       	std	Y+16, r24	; 0x10
				if (Loc_PressedValue == 0)
    55de:	88 89       	ldd	r24, Y+16	; 0x10
    55e0:	88 23       	and	r24, r24
    55e2:	a9 f4       	brne	.+42     	; 0x560e <KEYPAD_voidGetPressedButton+0x160>
				{
					Loc_ReturnData=KEYPAD_Map[Loc_RowIterator - KPAD_ROW_START][Loc_ColIterator - KPAD_COL_START];
    55e4:	89 89       	ldd	r24, Y+17	; 0x11
    55e6:	48 2f       	mov	r20, r24
    55e8:	50 e0       	ldi	r21, 0x00	; 0
    55ea:	8a 89       	ldd	r24, Y+18	; 0x12
    55ec:	88 2f       	mov	r24, r24
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	9c 01       	movw	r18, r24
    55f2:	24 50       	subi	r18, 0x04	; 4
    55f4:	30 40       	sbci	r19, 0x00	; 0
    55f6:	ca 01       	movw	r24, r20
    55f8:	88 0f       	add	r24, r24
    55fa:	99 1f       	adc	r25, r25
    55fc:	88 0f       	add	r24, r24
    55fe:	99 1f       	adc	r25, r25
    5600:	82 0f       	add	r24, r18
    5602:	93 1f       	adc	r25, r19
    5604:	fc 01       	movw	r30, r24
    5606:	ec 55       	subi	r30, 0x5C	; 92
    5608:	fd 4f       	sbci	r31, 0xFD	; 253
    560a:	80 81       	ld	r24, Z
    560c:	8f 87       	std	Y+15, r24	; 0x0f
				}
				Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
    560e:	83 e0       	ldi	r24, 0x03	; 3
    5610:	69 89       	ldd	r22, Y+17	; 0x11
    5612:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <GPIO_u8ReadPin>
    5616:	88 8b       	std	Y+16, r24	; 0x10
    5618:	05 c0       	rjmp	.+10     	; 0x5624 <KEYPAD_voidGetPressedButton+0x176>
				while(Loc_PressedValue == 0)
				{
					Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
    561a:	83 e0       	ldi	r24, 0x03	; 3
    561c:	69 89       	ldd	r22, Y+17	; 0x11
    561e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <GPIO_u8ReadPin>
    5622:	88 8b       	std	Y+16, r24	; 0x10
				if (Loc_PressedValue == 0)
				{
					Loc_ReturnData=KEYPAD_Map[Loc_RowIterator - KPAD_ROW_START][Loc_ColIterator - KPAD_COL_START];
				}
				Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
				while(Loc_PressedValue == 0)
    5624:	88 89       	ldd	r24, Y+16	; 0x10
    5626:	88 23       	and	r24, r24
    5628:	c1 f3       	breq	.-16     	; 0x561a <KEYPAD_voidGetPressedButton+0x16c>
    562a:	07 c0       	rjmp	.+14     	; 0x563a <KEYPAD_voidGetPressedButton+0x18c>
	u8 Loc_ReturnData = 0;
	for(Loc_ColIterator = (0+KPAD_COL_START); Loc_ColIterator<=KPAD_COL_END ; Loc_ColIterator++)
	{
		GPIO_voidSetPinVal(KPAD_COL_PORT, Loc_ColIterator, LOW);

		for(Loc_RowIterator = (0+KPAD_ROW_START); Loc_RowIterator<=KPAD_ROW_END ; Loc_RowIterator++)
    562c:	89 89       	ldd	r24, Y+17	; 0x11
    562e:	8f 5f       	subi	r24, 0xFF	; 255
    5630:	89 8b       	std	Y+17, r24	; 0x11
    5632:	89 89       	ldd	r24, Y+17	; 0x11
    5634:	84 30       	cpi	r24, 0x04	; 4
    5636:	08 f4       	brcc	.+2      	; 0x563a <KEYPAD_voidGetPressedButton+0x18c>
    5638:	52 cf       	rjmp	.-348    	; 0x54de <KEYPAD_voidGetPressedButton+0x30>
					Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
				}
				break;
			}
		}
		GPIO_voidSetPinVal(KPAD_COL_PORT, Loc_ColIterator,HIGH);
    563a:	83 e0       	ldi	r24, 0x03	; 3
    563c:	6a 89       	ldd	r22, Y+18	; 0x12
    563e:	41 e0       	ldi	r20, 0x01	; 1
    5640:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <GPIO_voidSetPinVal>
{
	u8 Loc_ColIterator = 0;
	u8 Loc_RowIterator = 0;
	u8 Loc_PressedValue = 0;
	u8 Loc_ReturnData = 0;
	for(Loc_ColIterator = (0+KPAD_COL_START); Loc_ColIterator<=KPAD_COL_END ; Loc_ColIterator++)
    5644:	8a 89       	ldd	r24, Y+18	; 0x12
    5646:	8f 5f       	subi	r24, 0xFF	; 255
    5648:	8a 8b       	std	Y+18, r24	; 0x12
    564a:	8a 89       	ldd	r24, Y+18	; 0x12
    564c:	88 30       	cpi	r24, 0x08	; 8
    564e:	08 f4       	brcc	.+2      	; 0x5652 <KEYPAD_voidGetPressedButton+0x1a4>
    5650:	3f cf       	rjmp	.-386    	; 0x54d0 <KEYPAD_voidGetPressedButton+0x22>
				break;
			}
		}
		GPIO_voidSetPinVal(KPAD_COL_PORT, Loc_ColIterator,HIGH);
	}
	return Loc_ReturnData;
    5652:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    5654:	62 96       	adiw	r28, 0x12	; 18
    5656:	0f b6       	in	r0, 0x3f	; 63
    5658:	f8 94       	cli
    565a:	de bf       	out	0x3e, r29	; 62
    565c:	0f be       	out	0x3f, r0	; 63
    565e:	cd bf       	out	0x3d, r28	; 61
    5660:	cf 91       	pop	r28
    5662:	df 91       	pop	r29
    5664:	08 95       	ret

00005666 <Timer0_CompareCallBack>:


volatile u16 CompareMatchCounts = 0;
volatile u8 RemainSeconds = HALT_INIT_TIME;
void Timer0_CompareCallBack (void)
{
    5666:	df 93       	push	r29
    5668:	cf 93       	push	r28
    566a:	cd b7       	in	r28, 0x3d	; 61
    566c:	de b7       	in	r29, 0x3e	; 62
	CompareMatchCounts++;
    566e:	80 91 bc 02 	lds	r24, 0x02BC
    5672:	90 91 bd 02 	lds	r25, 0x02BD
    5676:	01 96       	adiw	r24, 0x01	; 1
    5678:	90 93 bd 02 	sts	0x02BD, r25
    567c:	80 93 bc 02 	sts	0x02BC, r24
	if( CompareMatchCounts == 499 )
    5680:	80 91 bc 02 	lds	r24, 0x02BC
    5684:	90 91 bd 02 	lds	r25, 0x02BD
    5688:	21 e0       	ldi	r18, 0x01	; 1
    568a:	83 3f       	cpi	r24, 0xF3	; 243
    568c:	92 07       	cpc	r25, r18
    568e:	49 f4       	brne	.+18     	; 0x56a2 <Timer0_CompareCallBack+0x3c>
	{
		RemainSeconds--;
    5690:	80 91 b4 02 	lds	r24, 0x02B4
    5694:	81 50       	subi	r24, 0x01	; 1
    5696:	80 93 b4 02 	sts	0x02B4, r24
		CompareMatchCounts = 0;
    569a:	10 92 bd 02 	sts	0x02BD, r1
    569e:	10 92 bc 02 	sts	0x02BC, r1
	}
}
    56a2:	cf 91       	pop	r28
    56a4:	df 91       	pop	r29
    56a6:	08 95       	ret

000056a8 <Login_u8CheckPassword>:


u8 Login_u8CheckPassword( u8 * Copy_ptrSavedPassword , u8 * copy_ptrEnteredPassword, u8 Copy_u8Passwordlength )
{
    56a8:	df 93       	push	r29
    56aa:	cf 93       	push	r28
    56ac:	cd b7       	in	r28, 0x3d	; 61
    56ae:	de b7       	in	r29, 0x3e	; 62
    56b0:	27 97       	sbiw	r28, 0x07	; 7
    56b2:	0f b6       	in	r0, 0x3f	; 63
    56b4:	f8 94       	cli
    56b6:	de bf       	out	0x3e, r29	; 62
    56b8:	0f be       	out	0x3f, r0	; 63
    56ba:	cd bf       	out	0x3d, r28	; 61
    56bc:	9c 83       	std	Y+4, r25	; 0x04
    56be:	8b 83       	std	Y+3, r24	; 0x03
    56c0:	7e 83       	std	Y+6, r23	; 0x06
    56c2:	6d 83       	std	Y+5, r22	; 0x05
    56c4:	4f 83       	std	Y+7, r20	; 0x07
	u8 Local_u8ErrorState = STD_OK;
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopIterator= 0;
    56ca:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_ptrSavedPassword == NULL) || (copy_ptrEnteredPassword == NULL) )
    56cc:	8b 81       	ldd	r24, Y+3	; 0x03
    56ce:	9c 81       	ldd	r25, Y+4	; 0x04
    56d0:	00 97       	sbiw	r24, 0x00	; 0
    56d2:	21 f0       	breq	.+8      	; 0x56dc <Login_u8CheckPassword+0x34>
    56d4:	8d 81       	ldd	r24, Y+5	; 0x05
    56d6:	9e 81       	ldd	r25, Y+6	; 0x06
    56d8:	00 97       	sbiw	r24, 0x00	; 0
    56da:	11 f4       	brne	.+4      	; 0x56e0 <Login_u8CheckPassword+0x38>
	{
		Local_u8ErrorState = STD_NOK;
    56dc:	1a 82       	std	Y+2, r1	; 0x02
    56de:	22 c0       	rjmp	.+68     	; 0x5724 <Login_u8CheckPassword+0x7c>
	}
	else
	{
		for( Local_u8LoopIterator = 0; Local_u8LoopIterator < Copy_u8Passwordlength ; Local_u8LoopIterator++ )
    56e0:	19 82       	std	Y+1, r1	; 0x01
    56e2:	1c c0       	rjmp	.+56     	; 0x571c <Login_u8CheckPassword+0x74>
		{
			if( copy_ptrEnteredPassword[Local_u8LoopIterator] != Copy_ptrSavedPassword[Local_u8LoopIterator] )
    56e4:	89 81       	ldd	r24, Y+1	; 0x01
    56e6:	28 2f       	mov	r18, r24
    56e8:	30 e0       	ldi	r19, 0x00	; 0
    56ea:	8d 81       	ldd	r24, Y+5	; 0x05
    56ec:	9e 81       	ldd	r25, Y+6	; 0x06
    56ee:	fc 01       	movw	r30, r24
    56f0:	e2 0f       	add	r30, r18
    56f2:	f3 1f       	adc	r31, r19
    56f4:	40 81       	ld	r20, Z
    56f6:	89 81       	ldd	r24, Y+1	; 0x01
    56f8:	28 2f       	mov	r18, r24
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	8b 81       	ldd	r24, Y+3	; 0x03
    56fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5700:	fc 01       	movw	r30, r24
    5702:	e2 0f       	add	r30, r18
    5704:	f3 1f       	adc	r31, r19
    5706:	80 81       	ld	r24, Z
    5708:	48 17       	cp	r20, r24
    570a:	19 f0       	breq	.+6      	; 0x5712 <Login_u8CheckPassword+0x6a>
			{
				Local_u8ErrorState = PASSWORD_INCORRECT;
    570c:	8f e0       	ldi	r24, 0x0F	; 15
    570e:	8a 83       	std	Y+2, r24	; 0x02
    5710:	09 c0       	rjmp	.+18     	; 0x5724 <Login_u8CheckPassword+0x7c>
				break;
			}
			else
			{
				Local_u8ErrorState = PASSWORD_CORRECT;
    5712:	8f ef       	ldi	r24, 0xFF	; 255
    5714:	8a 83       	std	Y+2, r24	; 0x02
	{
		Local_u8ErrorState = STD_NOK;
	}
	else
	{
		for( Local_u8LoopIterator = 0; Local_u8LoopIterator < Copy_u8Passwordlength ; Local_u8LoopIterator++ )
    5716:	89 81       	ldd	r24, Y+1	; 0x01
    5718:	8f 5f       	subi	r24, 0xFF	; 255
    571a:	89 83       	std	Y+1, r24	; 0x01
    571c:	99 81       	ldd	r25, Y+1	; 0x01
    571e:	8f 81       	ldd	r24, Y+7	; 0x07
    5720:	98 17       	cp	r25, r24
    5722:	00 f3       	brcs	.-64     	; 0x56e4 <Login_u8CheckPassword+0x3c>
			{
				Local_u8ErrorState = PASSWORD_CORRECT;
			}
		}
	}
	return Local_u8ErrorState;
    5724:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5726:	27 96       	adiw	r28, 0x07	; 7
    5728:	0f b6       	in	r0, 0x3f	; 63
    572a:	f8 94       	cli
    572c:	de bf       	out	0x3e, r29	; 62
    572e:	0f be       	out	0x3f, r0	; 63
    5730:	cd bf       	out	0x3d, r28	; 61
    5732:	cf 91       	pop	r28
    5734:	df 91       	pop	r29
    5736:	08 95       	ret

00005738 <APP_voidClearArray>:

void APP_voidClearArray(u8 * Copy_ptrArrayAddress , u8 Copy_u8ArraySize)
{
    5738:	df 93       	push	r29
    573a:	cf 93       	push	r28
    573c:	00 d0       	rcall	.+0      	; 0x573e <APP_voidClearArray+0x6>
    573e:	00 d0       	rcall	.+0      	; 0x5740 <APP_voidClearArray+0x8>
    5740:	cd b7       	in	r28, 0x3d	; 61
    5742:	de b7       	in	r29, 0x3e	; 62
    5744:	9b 83       	std	Y+3, r25	; 0x03
    5746:	8a 83       	std	Y+2, r24	; 0x02
    5748:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8LoopIterator = 0;
    574a:	19 82       	std	Y+1, r1	; 0x01
	for( Local_u8LoopIterator = 0; Local_u8LoopIterator < Copy_u8ArraySize; Local_u8LoopIterator++ )
    574c:	19 82       	std	Y+1, r1	; 0x01
    574e:	0c c0       	rjmp	.+24     	; 0x5768 <APP_voidClearArray+0x30>
	{
		*(Copy_ptrArrayAddress + Local_u8LoopIterator) = 0;
    5750:	89 81       	ldd	r24, Y+1	; 0x01
    5752:	28 2f       	mov	r18, r24
    5754:	30 e0       	ldi	r19, 0x00	; 0
    5756:	8a 81       	ldd	r24, Y+2	; 0x02
    5758:	9b 81       	ldd	r25, Y+3	; 0x03
    575a:	fc 01       	movw	r30, r24
    575c:	e2 0f       	add	r30, r18
    575e:	f3 1f       	adc	r31, r19
    5760:	10 82       	st	Z, r1
}

void APP_voidClearArray(u8 * Copy_ptrArrayAddress , u8 Copy_u8ArraySize)
{
	u8 Local_u8LoopIterator = 0;
	for( Local_u8LoopIterator = 0; Local_u8LoopIterator < Copy_u8ArraySize; Local_u8LoopIterator++ )
    5762:	89 81       	ldd	r24, Y+1	; 0x01
    5764:	8f 5f       	subi	r24, 0xFF	; 255
    5766:	89 83       	std	Y+1, r24	; 0x01
    5768:	99 81       	ldd	r25, Y+1	; 0x01
    576a:	8c 81       	ldd	r24, Y+4	; 0x04
    576c:	98 17       	cp	r25, r24
    576e:	80 f3       	brcs	.-32     	; 0x5750 <APP_voidClearArray+0x18>
	{
		*(Copy_ptrArrayAddress + Local_u8LoopIterator) = 0;
	}
}
    5770:	0f 90       	pop	r0
    5772:	0f 90       	pop	r0
    5774:	0f 90       	pop	r0
    5776:	0f 90       	pop	r0
    5778:	cf 91       	pop	r28
    577a:	df 91       	pop	r29
    577c:	08 95       	ret

0000577e <APP_voidDisplayMenu>:

void APP_voidDisplayMenu(u8 Copy_u8MinuNumber)
{
    577e:	df 93       	push	r29
    5780:	cf 93       	push	r28
    5782:	0f 92       	push	r0
    5784:	cd b7       	in	r28, 0x3d	; 61
    5786:	de b7       	in	r29, 0x3e	; 62
    5788:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidClearScreen();
    578a:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>

		break;

	}

}
    578e:	0f 90       	pop	r0
    5790:	cf 91       	pop	r28
    5792:	df 91       	pop	r29
    5794:	08 95       	ret

00005796 <main>:
#include"Application.h"

extern u8 RemainSeconds;

int main(void)
{
    5796:	af 92       	push	r10
    5798:	bf 92       	push	r11
    579a:	cf 92       	push	r12
    579c:	df 92       	push	r13
    579e:	ef 92       	push	r14
    57a0:	ff 92       	push	r15
    57a2:	0f 93       	push	r16
    57a4:	1f 93       	push	r17
    57a6:	df 93       	push	r29
    57a8:	cf 93       	push	r28
    57aa:	cd b7       	in	r28, 0x3d	; 61
    57ac:	de b7       	in	r29, 0x3e	; 62
    57ae:	c6 5b       	subi	r28, 0xB6	; 182
    57b0:	d0 40       	sbci	r29, 0x00	; 0
    57b2:	0f b6       	in	r0, 0x3f	; 63
    57b4:	f8 94       	cli
    57b6:	de bf       	out	0x3e, r29	; 62
    57b8:	0f be       	out	0x3f, r0	; 63
    57ba:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Menu = NO_MODE;
    57bc:	fe 01       	movw	r30, r28
    57be:	ee 55       	subi	r30, 0x5E	; 94
    57c0:	ff 4f       	sbci	r31, 0xFF	; 255
    57c2:	10 82       	st	Z, r1
	u8 Local_u8FailedLogin = STD_OK ;
    57c4:	fe 01       	movw	r30, r28
    57c6:	ef 55       	subi	r30, 0x5F	; 95
    57c8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	80 83       	st	Z, r24
	u8 Local_u8LoopIterator = 0;
    57ce:	fe 01       	movw	r30, r28
    57d0:	e0 56       	subi	r30, 0x60	; 96
    57d2:	ff 4f       	sbci	r31, 0xFF	; 255
    57d4:	10 82       	st	Z, r1
	u8 local_u8passwordFlag	= 0;
    57d6:	fe 01       	movw	r30, r28
    57d8:	ed 55       	subi	r30, 0x5D	; 93
    57da:	ff 4f       	sbci	r31, 0xFF	; 255
    57dc:	10 82       	st	Z, r1
	u8 Local_u8Password_LCD_Position = 10;
    57de:	fe 01       	movw	r30, r28
    57e0:	e1 56       	subi	r30, 0x61	; 97
    57e2:	ff 4f       	sbci	r31, 0xFF	; 255
    57e4:	8a e0       	ldi	r24, 0x0A	; 10
    57e6:	80 83       	st	Z, r24
	u8 Local_u8KeypadpressedValue = 0;
    57e8:	fe 01       	movw	r30, r28
    57ea:	e2 56       	subi	r30, 0x62	; 98
    57ec:	ff 4f       	sbci	r31, 0xFF	; 255
    57ee:	10 82       	st	Z, r1
	u8 Local_arrEnteredpassword[PASS_LENGHTH] = {0};
    57f0:	fe 01       	movw	r30, r28
    57f2:	ec 55       	subi	r30, 0x5C	; 92
    57f4:	ff 4f       	sbci	r31, 0xFF	; 255
    57f6:	10 82       	st	Z, r1
    57f8:	11 82       	std	Z+1, r1	; 0x01
    57fa:	12 82       	std	Z+2, r1	; 0x02
    57fc:	13 82       	std	Z+3, r1	; 0x03
	u8 local_arrSavedPassword[PASS_LENGHTH];
	u8 Local_u8passwordCheck = 0;
    57fe:	fe 01       	movw	r30, r28
    5800:	e3 56       	subi	r30, 0x63	; 99
    5802:	ff 4f       	sbci	r31, 0xFF	; 255
    5804:	10 82       	st	Z, r1
	u8 Local_u8NumberOfTries = 0;
    5806:	fe 01       	movw	r30, r28
    5808:	e4 56       	subi	r30, 0x64	; 100
    580a:	ff 4f       	sbci	r31, 0xFF	; 255
    580c:	10 82       	st	Z, r1
	u8 Local_u8Temperature = 0;
    580e:	fe 01       	movw	r30, r28
    5810:	e5 56       	subi	r30, 0x65	; 101
    5812:	ff 4f       	sbci	r31, 0xFF	; 255
    5814:	10 82       	st	Z, r1
	/*******************************************************************/
	CLCD_voidInit();
    5816:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <CLCD_voidInit>
	CLCD_voidSendCommand(CLCD_DISPLAY_ON_CURSOR_OFF);
    581a:	8c e0       	ldi	r24, 0x0C	; 12
    581c:	0e 94 21 21 	call	0x4242	; 0x4242 <CLCD_voidSendCommand>
	KEYPAD_voidInit();
    5820:	0e 94 00 2a 	call	0x5400	; 0x5400 <KEYPAD_voidInit>

	TIM0_Config_t Timer0 ;
	Timer0.TIMER0_CLOCK_SELECT = TIM0_CLK_64;
    5824:	fe 01       	movw	r30, r28
    5826:	e4 55       	subi	r30, 0x54	; 84
    5828:	ff 4f       	sbci	r31, 0xFF	; 255
    582a:	83 e0       	ldi	r24, 0x03	; 3
    582c:	81 83       	std	Z+1, r24	; 0x01
	Timer0.TIMER0_Mode = TIMER0_CTC_MODE;
    582e:	fe 01       	movw	r30, r28
    5830:	e4 55       	subi	r30, 0x54	; 84
    5832:	ff 4f       	sbci	r31, 0xFF	; 255
    5834:	80 e4       	ldi	r24, 0x40	; 64
    5836:	80 83       	st	Z, r24
	Timer0.TIMER0_COMPARE_OUTPUT = OC0_DISCONNECTED;
    5838:	fe 01       	movw	r30, r28
    583a:	e4 55       	subi	r30, 0x54	; 84
    583c:	ff 4f       	sbci	r31, 0xFF	; 255
    583e:	14 82       	std	Z+4, r1	; 0x04
	Timer0.TIMER_COMP_INTERRUPT = TIMER0_COMP_ENABLE_INTERRUPT;
    5840:	fe 01       	movw	r30, r28
    5842:	e4 55       	subi	r30, 0x54	; 84
    5844:	ff 4f       	sbci	r31, 0xFF	; 255
    5846:	82 e0       	ldi	r24, 0x02	; 2
    5848:	83 83       	std	Z+3, r24	; 0x03
	Timer0.COMP_CALLBACK = Timer0_CompareCallBack;
    584a:	fe 01       	movw	r30, r28
    584c:	e4 55       	subi	r30, 0x54	; 84
    584e:	ff 4f       	sbci	r31, 0xFF	; 255
    5850:	83 e3       	ldi	r24, 0x33	; 51
    5852:	9b e2       	ldi	r25, 0x2B	; 43
    5854:	90 87       	std	Z+8, r25	; 0x08
    5856:	87 83       	std	Z+7, r24	; 0x07
	TIM0_u8Set_CompareRegister_Value(250);
    5858:	8a ef       	ldi	r24, 0xFA	; 250
    585a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <TIM0_u8Set_CompareRegister_Value>
	GIE_voidEnable();
    585e:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <GIE_voidEnable>
	TIM0_u8SetConfigurations( &Timer0 );
    5862:	ce 01       	movw	r24, r28
    5864:	84 55       	subi	r24, 0x54	; 84
    5866:	9f 4f       	sbci	r25, 0xFF	; 255
    5868:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TIM0_u8SetConfigurations>
	/******************************************************************/

	 CLCD_voidSendFloatNumber(25.249525);
    586c:	67 e0       	ldi	r22, 0x07	; 7
    586e:	7f ef       	ldi	r23, 0xFF	; 255
    5870:	89 ec       	ldi	r24, 0xC9	; 201
    5872:	91 e4       	ldi	r25, 0x41	; 65
    5874:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <CLCD_voidSendFloatNumber>
    5878:	fe 01       	movw	r30, r28
    587a:	e9 56       	subi	r30, 0x69	; 105
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	80 e0       	ldi	r24, 0x00	; 0
    5880:	90 e6       	ldi	r25, 0x60	; 96
    5882:	aa ee       	ldi	r26, 0xEA	; 234
    5884:	b6 e4       	ldi	r27, 0x46	; 70
    5886:	80 83       	st	Z, r24
    5888:	91 83       	std	Z+1, r25	; 0x01
    588a:	a2 83       	std	Z+2, r26	; 0x02
    588c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    588e:	8e 01       	movw	r16, r28
    5890:	0d 56       	subi	r16, 0x6D	; 109
    5892:	1f 4f       	sbci	r17, 0xFF	; 255
    5894:	fe 01       	movw	r30, r28
    5896:	e9 56       	subi	r30, 0x69	; 105
    5898:	ff 4f       	sbci	r31, 0xFF	; 255
    589a:	60 81       	ld	r22, Z
    589c:	71 81       	ldd	r23, Z+1	; 0x01
    589e:	82 81       	ldd	r24, Z+2	; 0x02
    58a0:	93 81       	ldd	r25, Z+3	; 0x03
    58a2:	20 e0       	ldi	r18, 0x00	; 0
    58a4:	30 e0       	ldi	r19, 0x00	; 0
    58a6:	4a ef       	ldi	r20, 0xFA	; 250
    58a8:	54 e4       	ldi	r21, 0x44	; 68
    58aa:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    58ae:	dc 01       	movw	r26, r24
    58b0:	cb 01       	movw	r24, r22
    58b2:	f8 01       	movw	r30, r16
    58b4:	80 83       	st	Z, r24
    58b6:	91 83       	std	Z+1, r25	; 0x01
    58b8:	a2 83       	std	Z+2, r26	; 0x02
    58ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58bc:	fe 01       	movw	r30, r28
    58be:	ed 56       	subi	r30, 0x6D	; 109
    58c0:	ff 4f       	sbci	r31, 0xFF	; 255
    58c2:	60 81       	ld	r22, Z
    58c4:	71 81       	ldd	r23, Z+1	; 0x01
    58c6:	82 81       	ldd	r24, Z+2	; 0x02
    58c8:	93 81       	ldd	r25, Z+3	; 0x03
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	40 e8       	ldi	r20, 0x80	; 128
    58d0:	5f e3       	ldi	r21, 0x3F	; 63
    58d2:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    58d6:	88 23       	and	r24, r24
    58d8:	44 f4       	brge	.+16     	; 0x58ea <main+0x154>
		__ticks = 1;
    58da:	fe 01       	movw	r30, r28
    58dc:	ef 56       	subi	r30, 0x6F	; 111
    58de:	ff 4f       	sbci	r31, 0xFF	; 255
    58e0:	81 e0       	ldi	r24, 0x01	; 1
    58e2:	90 e0       	ldi	r25, 0x00	; 0
    58e4:	91 83       	std	Z+1, r25	; 0x01
    58e6:	80 83       	st	Z, r24
    58e8:	64 c0       	rjmp	.+200    	; 0x59b2 <main+0x21c>
	else if (__tmp > 65535)
    58ea:	fe 01       	movw	r30, r28
    58ec:	ed 56       	subi	r30, 0x6D	; 109
    58ee:	ff 4f       	sbci	r31, 0xFF	; 255
    58f0:	60 81       	ld	r22, Z
    58f2:	71 81       	ldd	r23, Z+1	; 0x01
    58f4:	82 81       	ldd	r24, Z+2	; 0x02
    58f6:	93 81       	ldd	r25, Z+3	; 0x03
    58f8:	20 e0       	ldi	r18, 0x00	; 0
    58fa:	3f ef       	ldi	r19, 0xFF	; 255
    58fc:	4f e7       	ldi	r20, 0x7F	; 127
    58fe:	57 e4       	ldi	r21, 0x47	; 71
    5900:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    5904:	18 16       	cp	r1, r24
    5906:	0c f0       	brlt	.+2      	; 0x590a <main+0x174>
    5908:	43 c0       	rjmp	.+134    	; 0x5990 <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    590a:	fe 01       	movw	r30, r28
    590c:	e9 56       	subi	r30, 0x69	; 105
    590e:	ff 4f       	sbci	r31, 0xFF	; 255
    5910:	60 81       	ld	r22, Z
    5912:	71 81       	ldd	r23, Z+1	; 0x01
    5914:	82 81       	ldd	r24, Z+2	; 0x02
    5916:	93 81       	ldd	r25, Z+3	; 0x03
    5918:	20 e0       	ldi	r18, 0x00	; 0
    591a:	30 e0       	ldi	r19, 0x00	; 0
    591c:	40 e2       	ldi	r20, 0x20	; 32
    591e:	51 e4       	ldi	r21, 0x41	; 65
    5920:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5924:	dc 01       	movw	r26, r24
    5926:	cb 01       	movw	r24, r22
    5928:	8e 01       	movw	r16, r28
    592a:	0f 56       	subi	r16, 0x6F	; 111
    592c:	1f 4f       	sbci	r17, 0xFF	; 255
    592e:	bc 01       	movw	r22, r24
    5930:	cd 01       	movw	r24, r26
    5932:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5936:	dc 01       	movw	r26, r24
    5938:	cb 01       	movw	r24, r22
    593a:	f8 01       	movw	r30, r16
    593c:	91 83       	std	Z+1, r25	; 0x01
    593e:	80 83       	st	Z, r24
    5940:	1f c0       	rjmp	.+62     	; 0x5980 <main+0x1ea>
    5942:	fe 01       	movw	r30, r28
    5944:	e1 57       	subi	r30, 0x71	; 113
    5946:	ff 4f       	sbci	r31, 0xFF	; 255
    5948:	88 ec       	ldi	r24, 0xC8	; 200
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	91 83       	std	Z+1, r25	; 0x01
    594e:	80 83       	st	Z, r24
    5950:	fe 01       	movw	r30, r28
    5952:	e1 57       	subi	r30, 0x71	; 113
    5954:	ff 4f       	sbci	r31, 0xFF	; 255
    5956:	80 81       	ld	r24, Z
    5958:	91 81       	ldd	r25, Z+1	; 0x01
    595a:	01 97       	sbiw	r24, 0x01	; 1
    595c:	f1 f7       	brne	.-4      	; 0x595a <main+0x1c4>
    595e:	fe 01       	movw	r30, r28
    5960:	e1 57       	subi	r30, 0x71	; 113
    5962:	ff 4f       	sbci	r31, 0xFF	; 255
    5964:	91 83       	std	Z+1, r25	; 0x01
    5966:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5968:	de 01       	movw	r26, r28
    596a:	af 56       	subi	r26, 0x6F	; 111
    596c:	bf 4f       	sbci	r27, 0xFF	; 255
    596e:	fe 01       	movw	r30, r28
    5970:	ef 56       	subi	r30, 0x6F	; 111
    5972:	ff 4f       	sbci	r31, 0xFF	; 255
    5974:	80 81       	ld	r24, Z
    5976:	91 81       	ldd	r25, Z+1	; 0x01
    5978:	01 97       	sbiw	r24, 0x01	; 1
    597a:	11 96       	adiw	r26, 0x01	; 1
    597c:	9c 93       	st	X, r25
    597e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5980:	fe 01       	movw	r30, r28
    5982:	ef 56       	subi	r30, 0x6F	; 111
    5984:	ff 4f       	sbci	r31, 0xFF	; 255
    5986:	80 81       	ld	r24, Z
    5988:	91 81       	ldd	r25, Z+1	; 0x01
    598a:	00 97       	sbiw	r24, 0x00	; 0
    598c:	d1 f6       	brne	.-76     	; 0x5942 <main+0x1ac>
    598e:	27 c0       	rjmp	.+78     	; 0x59de <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5990:	8e 01       	movw	r16, r28
    5992:	0f 56       	subi	r16, 0x6F	; 111
    5994:	1f 4f       	sbci	r17, 0xFF	; 255
    5996:	fe 01       	movw	r30, r28
    5998:	ed 56       	subi	r30, 0x6D	; 109
    599a:	ff 4f       	sbci	r31, 0xFF	; 255
    599c:	60 81       	ld	r22, Z
    599e:	71 81       	ldd	r23, Z+1	; 0x01
    59a0:	82 81       	ldd	r24, Z+2	; 0x02
    59a2:	93 81       	ldd	r25, Z+3	; 0x03
    59a4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    59a8:	dc 01       	movw	r26, r24
    59aa:	cb 01       	movw	r24, r22
    59ac:	f8 01       	movw	r30, r16
    59ae:	91 83       	std	Z+1, r25	; 0x01
    59b0:	80 83       	st	Z, r24
    59b2:	de 01       	movw	r26, r28
    59b4:	a3 57       	subi	r26, 0x73	; 115
    59b6:	bf 4f       	sbci	r27, 0xFF	; 255
    59b8:	fe 01       	movw	r30, r28
    59ba:	ef 56       	subi	r30, 0x6F	; 111
    59bc:	ff 4f       	sbci	r31, 0xFF	; 255
    59be:	80 81       	ld	r24, Z
    59c0:	91 81       	ldd	r25, Z+1	; 0x01
    59c2:	8d 93       	st	X+, r24
    59c4:	9c 93       	st	X, r25
    59c6:	fe 01       	movw	r30, r28
    59c8:	e3 57       	subi	r30, 0x73	; 115
    59ca:	ff 4f       	sbci	r31, 0xFF	; 255
    59cc:	80 81       	ld	r24, Z
    59ce:	91 81       	ldd	r25, Z+1	; 0x01
    59d0:	01 97       	sbiw	r24, 0x01	; 1
    59d2:	f1 f7       	brne	.-4      	; 0x59d0 <main+0x23a>
    59d4:	fe 01       	movw	r30, r28
    59d6:	e3 57       	subi	r30, 0x73	; 115
    59d8:	ff 4f       	sbci	r31, 0xFF	; 255
    59da:	91 83       	std	Z+1, r25	; 0x01
    59dc:	80 83       	st	Z, r24
	 _delay_ms(30000);

	/* Checking the Password is set before or this is the firsst time using the program */
	EEPROM_voidReadByte(PASSWORD_FLAG_ADDRESS , &local_u8passwordFlag); // Read the password flag
    59de:	9e 01       	movw	r18, r28
    59e0:	2d 55       	subi	r18, 0x5D	; 93
    59e2:	3f 4f       	sbci	r19, 0xFF	; 255
    59e4:	89 e6       	ldi	r24, 0x69	; 105
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	b9 01       	movw	r22, r18
    59ea:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <EEPROM_voidReadByte>
	if( local_u8passwordFlag == PASSWORD_NOT_SET )
    59ee:	fe 01       	movw	r30, r28
    59f0:	ed 55       	subi	r30, 0x5D	; 93
    59f2:	ff 4f       	sbci	r31, 0xFF	; 255
    59f4:	80 81       	ld	r24, Z
    59f6:	8f 3f       	cpi	r24, 0xFF	; 255
    59f8:	09 f0       	breq	.+2      	; 0x59fc <main+0x266>
    59fa:	e4 c6       	rjmp	.+3528   	; 0x67c4 <main+0x102e>
	{
		CLCD_voidClearScreen(); // Clear the Screen
    59fc:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
		CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1); // Set the Cursor to the Start of the LCD
    5a00:	81 e0       	ldi	r24, 0x01	; 1
    5a02:	61 e0       	ldi	r22, 0x01	; 1
    5a04:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
		CLCD_voidSendString( (u8*)"Welcome to Smart" ); // Sending Welcome string
    5a08:	80 e6       	ldi	r24, 0x60	; 96
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
		CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1); // Goto the next Line in the LCD
    5a10:	82 e0       	ldi	r24, 0x02	; 2
    5a12:	61 e0       	ldi	r22, 0x01	; 1
    5a14:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
		CLCD_voidSendString( (u8*)"Home System" ); // Sending the rest of message
    5a18:	81 e7       	ldi	r24, 0x71	; 113
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
    5a20:	fe 01       	movw	r30, r28
    5a22:	e7 57       	subi	r30, 0x77	; 119
    5a24:	ff 4f       	sbci	r31, 0xFF	; 255
    5a26:	80 e0       	ldi	r24, 0x00	; 0
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	aa ef       	ldi	r26, 0xFA	; 250
    5a2c:	b4 e4       	ldi	r27, 0x44	; 68
    5a2e:	80 83       	st	Z, r24
    5a30:	91 83       	std	Z+1, r25	; 0x01
    5a32:	a2 83       	std	Z+2, r26	; 0x02
    5a34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a36:	8e 01       	movw	r16, r28
    5a38:	0b 57       	subi	r16, 0x7B	; 123
    5a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a3c:	fe 01       	movw	r30, r28
    5a3e:	e7 57       	subi	r30, 0x77	; 119
    5a40:	ff 4f       	sbci	r31, 0xFF	; 255
    5a42:	60 81       	ld	r22, Z
    5a44:	71 81       	ldd	r23, Z+1	; 0x01
    5a46:	82 81       	ldd	r24, Z+2	; 0x02
    5a48:	93 81       	ldd	r25, Z+3	; 0x03
    5a4a:	20 e0       	ldi	r18, 0x00	; 0
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	4a ef       	ldi	r20, 0xFA	; 250
    5a50:	54 e4       	ldi	r21, 0x44	; 68
    5a52:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5a56:	dc 01       	movw	r26, r24
    5a58:	cb 01       	movw	r24, r22
    5a5a:	f8 01       	movw	r30, r16
    5a5c:	80 83       	st	Z, r24
    5a5e:	91 83       	std	Z+1, r25	; 0x01
    5a60:	a2 83       	std	Z+2, r26	; 0x02
    5a62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a64:	fe 01       	movw	r30, r28
    5a66:	eb 57       	subi	r30, 0x7B	; 123
    5a68:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6a:	60 81       	ld	r22, Z
    5a6c:	71 81       	ldd	r23, Z+1	; 0x01
    5a6e:	82 81       	ldd	r24, Z+2	; 0x02
    5a70:	93 81       	ldd	r25, Z+3	; 0x03
    5a72:	20 e0       	ldi	r18, 0x00	; 0
    5a74:	30 e0       	ldi	r19, 0x00	; 0
    5a76:	40 e8       	ldi	r20, 0x80	; 128
    5a78:	5f e3       	ldi	r21, 0x3F	; 63
    5a7a:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    5a7e:	88 23       	and	r24, r24
    5a80:	44 f4       	brge	.+16     	; 0x5a92 <main+0x2fc>
		__ticks = 1;
    5a82:	fe 01       	movw	r30, r28
    5a84:	ed 57       	subi	r30, 0x7D	; 125
    5a86:	ff 4f       	sbci	r31, 0xFF	; 255
    5a88:	81 e0       	ldi	r24, 0x01	; 1
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	91 83       	std	Z+1, r25	; 0x01
    5a8e:	80 83       	st	Z, r24
    5a90:	64 c0       	rjmp	.+200    	; 0x5b5a <main+0x3c4>
	else if (__tmp > 65535)
    5a92:	fe 01       	movw	r30, r28
    5a94:	eb 57       	subi	r30, 0x7B	; 123
    5a96:	ff 4f       	sbci	r31, 0xFF	; 255
    5a98:	60 81       	ld	r22, Z
    5a9a:	71 81       	ldd	r23, Z+1	; 0x01
    5a9c:	82 81       	ldd	r24, Z+2	; 0x02
    5a9e:	93 81       	ldd	r25, Z+3	; 0x03
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	3f ef       	ldi	r19, 0xFF	; 255
    5aa4:	4f e7       	ldi	r20, 0x7F	; 127
    5aa6:	57 e4       	ldi	r21, 0x47	; 71
    5aa8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    5aac:	18 16       	cp	r1, r24
    5aae:	0c f0       	brlt	.+2      	; 0x5ab2 <main+0x31c>
    5ab0:	43 c0       	rjmp	.+134    	; 0x5b38 <main+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ab2:	fe 01       	movw	r30, r28
    5ab4:	e7 57       	subi	r30, 0x77	; 119
    5ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab8:	60 81       	ld	r22, Z
    5aba:	71 81       	ldd	r23, Z+1	; 0x01
    5abc:	82 81       	ldd	r24, Z+2	; 0x02
    5abe:	93 81       	ldd	r25, Z+3	; 0x03
    5ac0:	20 e0       	ldi	r18, 0x00	; 0
    5ac2:	30 e0       	ldi	r19, 0x00	; 0
    5ac4:	40 e2       	ldi	r20, 0x20	; 32
    5ac6:	51 e4       	ldi	r21, 0x41	; 65
    5ac8:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5acc:	dc 01       	movw	r26, r24
    5ace:	cb 01       	movw	r24, r22
    5ad0:	8e 01       	movw	r16, r28
    5ad2:	0d 57       	subi	r16, 0x7D	; 125
    5ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ad6:	bc 01       	movw	r22, r24
    5ad8:	cd 01       	movw	r24, r26
    5ada:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5ade:	dc 01       	movw	r26, r24
    5ae0:	cb 01       	movw	r24, r22
    5ae2:	f8 01       	movw	r30, r16
    5ae4:	91 83       	std	Z+1, r25	; 0x01
    5ae6:	80 83       	st	Z, r24
    5ae8:	1f c0       	rjmp	.+62     	; 0x5b28 <main+0x392>
    5aea:	fe 01       	movw	r30, r28
    5aec:	ef 57       	subi	r30, 0x7F	; 127
    5aee:	ff 4f       	sbci	r31, 0xFF	; 255
    5af0:	88 ec       	ldi	r24, 0xC8	; 200
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	91 83       	std	Z+1, r25	; 0x01
    5af6:	80 83       	st	Z, r24
    5af8:	fe 01       	movw	r30, r28
    5afa:	ef 57       	subi	r30, 0x7F	; 127
    5afc:	ff 4f       	sbci	r31, 0xFF	; 255
    5afe:	80 81       	ld	r24, Z
    5b00:	91 81       	ldd	r25, Z+1	; 0x01
    5b02:	01 97       	sbiw	r24, 0x01	; 1
    5b04:	f1 f7       	brne	.-4      	; 0x5b02 <main+0x36c>
    5b06:	fe 01       	movw	r30, r28
    5b08:	ef 57       	subi	r30, 0x7F	; 127
    5b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0c:	91 83       	std	Z+1, r25	; 0x01
    5b0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b10:	de 01       	movw	r26, r28
    5b12:	ad 57       	subi	r26, 0x7D	; 125
    5b14:	bf 4f       	sbci	r27, 0xFF	; 255
    5b16:	fe 01       	movw	r30, r28
    5b18:	ed 57       	subi	r30, 0x7D	; 125
    5b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b1c:	80 81       	ld	r24, Z
    5b1e:	91 81       	ldd	r25, Z+1	; 0x01
    5b20:	01 97       	sbiw	r24, 0x01	; 1
    5b22:	11 96       	adiw	r26, 0x01	; 1
    5b24:	9c 93       	st	X, r25
    5b26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b28:	fe 01       	movw	r30, r28
    5b2a:	ed 57       	subi	r30, 0x7D	; 125
    5b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2e:	80 81       	ld	r24, Z
    5b30:	91 81       	ldd	r25, Z+1	; 0x01
    5b32:	00 97       	sbiw	r24, 0x00	; 0
    5b34:	d1 f6       	brne	.-76     	; 0x5aea <main+0x354>
    5b36:	27 c0       	rjmp	.+78     	; 0x5b86 <main+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b38:	8e 01       	movw	r16, r28
    5b3a:	0d 57       	subi	r16, 0x7D	; 125
    5b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b3e:	fe 01       	movw	r30, r28
    5b40:	eb 57       	subi	r30, 0x7B	; 123
    5b42:	ff 4f       	sbci	r31, 0xFF	; 255
    5b44:	60 81       	ld	r22, Z
    5b46:	71 81       	ldd	r23, Z+1	; 0x01
    5b48:	82 81       	ldd	r24, Z+2	; 0x02
    5b4a:	93 81       	ldd	r25, Z+3	; 0x03
    5b4c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5b50:	dc 01       	movw	r26, r24
    5b52:	cb 01       	movw	r24, r22
    5b54:	f8 01       	movw	r30, r16
    5b56:	91 83       	std	Z+1, r25	; 0x01
    5b58:	80 83       	st	Z, r24
    5b5a:	de 01       	movw	r26, r28
    5b5c:	a1 58       	subi	r26, 0x81	; 129
    5b5e:	bf 4f       	sbci	r27, 0xFF	; 255
    5b60:	fe 01       	movw	r30, r28
    5b62:	ed 57       	subi	r30, 0x7D	; 125
    5b64:	ff 4f       	sbci	r31, 0xFF	; 255
    5b66:	80 81       	ld	r24, Z
    5b68:	91 81       	ldd	r25, Z+1	; 0x01
    5b6a:	8d 93       	st	X+, r24
    5b6c:	9c 93       	st	X, r25
    5b6e:	fe 01       	movw	r30, r28
    5b70:	e1 58       	subi	r30, 0x81	; 129
    5b72:	ff 4f       	sbci	r31, 0xFF	; 255
    5b74:	80 81       	ld	r24, Z
    5b76:	91 81       	ldd	r25, Z+1	; 0x01
    5b78:	01 97       	sbiw	r24, 0x01	; 1
    5b7a:	f1 f7       	brne	.-4      	; 0x5b78 <main+0x3e2>
    5b7c:	fe 01       	movw	r30, r28
    5b7e:	e1 58       	subi	r30, 0x81	; 129
    5b80:	ff 4f       	sbci	r31, 0xFF	; 255
    5b82:	91 83       	std	Z+1, r25	; 0x01
    5b84:	80 83       	st	Z, r24
		_delay_ms(2000); // Wait 2 second showing the Message
		CLCD_voidClearScreen(); // Clear the screen
    5b86:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
		CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1); // Go to the first Position in the LCD
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
    5b8c:	61 e0       	ldi	r22, 0x01	; 1
    5b8e:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
		CLCD_voidSendString( (u8*)"First time login" ); // Sending a message that the user should Set password for the system
    5b92:	8d e7       	ldi	r24, 0x7D	; 125
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
		CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1); // Go to the next line in the LCD
    5b9a:	82 e0       	ldi	r24, 0x02	; 2
    5b9c:	61 e0       	ldi	r22, 0x01	; 1
    5b9e:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
		CLCD_voidSendString( (u8*)"Set Password" );
    5ba2:	8e e8       	ldi	r24, 0x8E	; 142
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
    5baa:	fe 01       	movw	r30, r28
    5bac:	e5 58       	subi	r30, 0x85	; 133
    5bae:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb0:	80 e0       	ldi	r24, 0x00	; 0
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	aa e7       	ldi	r26, 0x7A	; 122
    5bb6:	b4 e4       	ldi	r27, 0x44	; 68
    5bb8:	80 83       	st	Z, r24
    5bba:	91 83       	std	Z+1, r25	; 0x01
    5bbc:	a2 83       	std	Z+2, r26	; 0x02
    5bbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bc0:	8e 01       	movw	r16, r28
    5bc2:	09 58       	subi	r16, 0x89	; 137
    5bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc6:	fe 01       	movw	r30, r28
    5bc8:	e5 58       	subi	r30, 0x85	; 133
    5bca:	ff 4f       	sbci	r31, 0xFF	; 255
    5bcc:	60 81       	ld	r22, Z
    5bce:	71 81       	ldd	r23, Z+1	; 0x01
    5bd0:	82 81       	ldd	r24, Z+2	; 0x02
    5bd2:	93 81       	ldd	r25, Z+3	; 0x03
    5bd4:	20 e0       	ldi	r18, 0x00	; 0
    5bd6:	30 e0       	ldi	r19, 0x00	; 0
    5bd8:	4a ef       	ldi	r20, 0xFA	; 250
    5bda:	54 e4       	ldi	r21, 0x44	; 68
    5bdc:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5be0:	dc 01       	movw	r26, r24
    5be2:	cb 01       	movw	r24, r22
    5be4:	f8 01       	movw	r30, r16
    5be6:	80 83       	st	Z, r24
    5be8:	91 83       	std	Z+1, r25	; 0x01
    5bea:	a2 83       	std	Z+2, r26	; 0x02
    5bec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bee:	fe 01       	movw	r30, r28
    5bf0:	e9 58       	subi	r30, 0x89	; 137
    5bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf4:	60 81       	ld	r22, Z
    5bf6:	71 81       	ldd	r23, Z+1	; 0x01
    5bf8:	82 81       	ldd	r24, Z+2	; 0x02
    5bfa:	93 81       	ldd	r25, Z+3	; 0x03
    5bfc:	20 e0       	ldi	r18, 0x00	; 0
    5bfe:	30 e0       	ldi	r19, 0x00	; 0
    5c00:	40 e8       	ldi	r20, 0x80	; 128
    5c02:	5f e3       	ldi	r21, 0x3F	; 63
    5c04:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    5c08:	88 23       	and	r24, r24
    5c0a:	44 f4       	brge	.+16     	; 0x5c1c <main+0x486>
		__ticks = 1;
    5c0c:	fe 01       	movw	r30, r28
    5c0e:	eb 58       	subi	r30, 0x8B	; 139
    5c10:	ff 4f       	sbci	r31, 0xFF	; 255
    5c12:	81 e0       	ldi	r24, 0x01	; 1
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	91 83       	std	Z+1, r25	; 0x01
    5c18:	80 83       	st	Z, r24
    5c1a:	64 c0       	rjmp	.+200    	; 0x5ce4 <main+0x54e>
	else if (__tmp > 65535)
    5c1c:	fe 01       	movw	r30, r28
    5c1e:	e9 58       	subi	r30, 0x89	; 137
    5c20:	ff 4f       	sbci	r31, 0xFF	; 255
    5c22:	60 81       	ld	r22, Z
    5c24:	71 81       	ldd	r23, Z+1	; 0x01
    5c26:	82 81       	ldd	r24, Z+2	; 0x02
    5c28:	93 81       	ldd	r25, Z+3	; 0x03
    5c2a:	20 e0       	ldi	r18, 0x00	; 0
    5c2c:	3f ef       	ldi	r19, 0xFF	; 255
    5c2e:	4f e7       	ldi	r20, 0x7F	; 127
    5c30:	57 e4       	ldi	r21, 0x47	; 71
    5c32:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    5c36:	18 16       	cp	r1, r24
    5c38:	0c f0       	brlt	.+2      	; 0x5c3c <main+0x4a6>
    5c3a:	43 c0       	rjmp	.+134    	; 0x5cc2 <main+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c3c:	fe 01       	movw	r30, r28
    5c3e:	e5 58       	subi	r30, 0x85	; 133
    5c40:	ff 4f       	sbci	r31, 0xFF	; 255
    5c42:	60 81       	ld	r22, Z
    5c44:	71 81       	ldd	r23, Z+1	; 0x01
    5c46:	82 81       	ldd	r24, Z+2	; 0x02
    5c48:	93 81       	ldd	r25, Z+3	; 0x03
    5c4a:	20 e0       	ldi	r18, 0x00	; 0
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	40 e2       	ldi	r20, 0x20	; 32
    5c50:	51 e4       	ldi	r21, 0x41	; 65
    5c52:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5c56:	dc 01       	movw	r26, r24
    5c58:	cb 01       	movw	r24, r22
    5c5a:	8e 01       	movw	r16, r28
    5c5c:	0b 58       	subi	r16, 0x8B	; 139
    5c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c60:	bc 01       	movw	r22, r24
    5c62:	cd 01       	movw	r24, r26
    5c64:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c68:	dc 01       	movw	r26, r24
    5c6a:	cb 01       	movw	r24, r22
    5c6c:	f8 01       	movw	r30, r16
    5c6e:	91 83       	std	Z+1, r25	; 0x01
    5c70:	80 83       	st	Z, r24
    5c72:	1f c0       	rjmp	.+62     	; 0x5cb2 <main+0x51c>
    5c74:	fe 01       	movw	r30, r28
    5c76:	ed 58       	subi	r30, 0x8D	; 141
    5c78:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7a:	88 ec       	ldi	r24, 0xC8	; 200
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	91 83       	std	Z+1, r25	; 0x01
    5c80:	80 83       	st	Z, r24
    5c82:	fe 01       	movw	r30, r28
    5c84:	ed 58       	subi	r30, 0x8D	; 141
    5c86:	ff 4f       	sbci	r31, 0xFF	; 255
    5c88:	80 81       	ld	r24, Z
    5c8a:	91 81       	ldd	r25, Z+1	; 0x01
    5c8c:	01 97       	sbiw	r24, 0x01	; 1
    5c8e:	f1 f7       	brne	.-4      	; 0x5c8c <main+0x4f6>
    5c90:	fe 01       	movw	r30, r28
    5c92:	ed 58       	subi	r30, 0x8D	; 141
    5c94:	ff 4f       	sbci	r31, 0xFF	; 255
    5c96:	91 83       	std	Z+1, r25	; 0x01
    5c98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c9a:	de 01       	movw	r26, r28
    5c9c:	ab 58       	subi	r26, 0x8B	; 139
    5c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    5ca0:	fe 01       	movw	r30, r28
    5ca2:	eb 58       	subi	r30, 0x8B	; 139
    5ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca6:	80 81       	ld	r24, Z
    5ca8:	91 81       	ldd	r25, Z+1	; 0x01
    5caa:	01 97       	sbiw	r24, 0x01	; 1
    5cac:	11 96       	adiw	r26, 0x01	; 1
    5cae:	9c 93       	st	X, r25
    5cb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cb2:	fe 01       	movw	r30, r28
    5cb4:	eb 58       	subi	r30, 0x8B	; 139
    5cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb8:	80 81       	ld	r24, Z
    5cba:	91 81       	ldd	r25, Z+1	; 0x01
    5cbc:	00 97       	sbiw	r24, 0x00	; 0
    5cbe:	d1 f6       	brne	.-76     	; 0x5c74 <main+0x4de>
    5cc0:	27 c0       	rjmp	.+78     	; 0x5d10 <main+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cc2:	8e 01       	movw	r16, r28
    5cc4:	0b 58       	subi	r16, 0x8B	; 139
    5cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cc8:	fe 01       	movw	r30, r28
    5cca:	e9 58       	subi	r30, 0x89	; 137
    5ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cce:	60 81       	ld	r22, Z
    5cd0:	71 81       	ldd	r23, Z+1	; 0x01
    5cd2:	82 81       	ldd	r24, Z+2	; 0x02
    5cd4:	93 81       	ldd	r25, Z+3	; 0x03
    5cd6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	f8 01       	movw	r30, r16
    5ce0:	91 83       	std	Z+1, r25	; 0x01
    5ce2:	80 83       	st	Z, r24
    5ce4:	de 01       	movw	r26, r28
    5ce6:	af 58       	subi	r26, 0x8F	; 143
    5ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    5cea:	fe 01       	movw	r30, r28
    5cec:	eb 58       	subi	r30, 0x8B	; 139
    5cee:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf0:	80 81       	ld	r24, Z
    5cf2:	91 81       	ldd	r25, Z+1	; 0x01
    5cf4:	8d 93       	st	X+, r24
    5cf6:	9c 93       	st	X, r25
    5cf8:	fe 01       	movw	r30, r28
    5cfa:	ef 58       	subi	r30, 0x8F	; 143
    5cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfe:	80 81       	ld	r24, Z
    5d00:	91 81       	ldd	r25, Z+1	; 0x01
    5d02:	01 97       	sbiw	r24, 0x01	; 1
    5d04:	f1 f7       	brne	.-4      	; 0x5d02 <main+0x56c>
    5d06:	fe 01       	movw	r30, r28
    5d08:	ef 58       	subi	r30, 0x8F	; 143
    5d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0c:	91 83       	std	Z+1, r25	; 0x01
    5d0e:	80 83       	st	Z, r24
		_delay_ms(1000); // Wait 1 second showing the Message
		CLCD_voidClearScreen(); // Clear the screen
    5d10:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
		CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1);
    5d14:	81 e0       	ldi	r24, 0x01	; 1
    5d16:	61 e0       	ldi	r22, 0x01	; 1
    5d18:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
		CLCD_voidSendString( (u8*)"Password:" ); // Waiting from the user to Enter the Password to be set to this System
    5d1c:	8b e9       	ldi	r24, 0x9B	; 155
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>

		for( Local_u8LoopIterator = 0; Local_u8LoopIterator < PASS_LENGHTH ; Local_u8LoopIterator++ )
    5d24:	fe 01       	movw	r30, r28
    5d26:	e0 56       	subi	r30, 0x60	; 96
    5d28:	ff 4f       	sbci	r31, 0xFF	; 255
    5d2a:	10 82       	st	Z, r1
    5d2c:	fd c0       	rjmp	.+506    	; 0x5f28 <main+0x792>
		{
			do
			{
				Local_u8KeypadpressedValue = KEYPAD_voidGetPressedButton(); // Reading the keypad until the user press any Button
    5d2e:	0e 94 57 2a 	call	0x54ae	; 0x54ae <KEYPAD_voidGetPressedButton>
    5d32:	fe 01       	movw	r30, r28
    5d34:	e2 56       	subi	r30, 0x62	; 98
    5d36:	ff 4f       	sbci	r31, 0xFF	; 255
    5d38:	80 83       	st	Z, r24
			}while(Local_u8KeypadpressedValue == NOT_PRESSED);
    5d3a:	fe 01       	movw	r30, r28
    5d3c:	e2 56       	subi	r30, 0x62	; 98
    5d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d40:	80 81       	ld	r24, Z
    5d42:	88 23       	and	r24, r24
    5d44:	a1 f3       	breq	.-24     	; 0x5d2e <main+0x598>

			Local_arrEnteredpassword[Local_u8LoopIterator] = Local_u8KeypadpressedValue; // Save the pressed value on the array
    5d46:	fe 01       	movw	r30, r28
    5d48:	e0 56       	subi	r30, 0x60	; 96
    5d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4c:	80 81       	ld	r24, Z
    5d4e:	28 2f       	mov	r18, r24
    5d50:	30 e0       	ldi	r19, 0x00	; 0
    5d52:	ce 01       	movw	r24, r28
    5d54:	8c 55       	subi	r24, 0x5C	; 92
    5d56:	9f 4f       	sbci	r25, 0xFF	; 255
    5d58:	dc 01       	movw	r26, r24
    5d5a:	a2 0f       	add	r26, r18
    5d5c:	b3 1f       	adc	r27, r19
    5d5e:	fe 01       	movw	r30, r28
    5d60:	e2 56       	subi	r30, 0x62	; 98
    5d62:	ff 4f       	sbci	r31, 0xFF	; 255
    5d64:	80 81       	ld	r24, Z
    5d66:	8c 93       	st	X, r24
			CLCD_voidGoToX_Y(CLCD_ROW1, Local_u8Password_LCD_Position);  // Go to the First Digit position on the LCD
    5d68:	fe 01       	movw	r30, r28
    5d6a:	e1 56       	subi	r30, 0x61	; 97
    5d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6e:	81 e0       	ldi	r24, 0x01	; 1
    5d70:	60 81       	ld	r22, Z
    5d72:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
			CLCD_voidSendCharacter(Local_u8KeypadpressedValue); // Displaying the pressed button on the LCD for a while
    5d76:	fe 01       	movw	r30, r28
    5d78:	e2 56       	subi	r30, 0x62	; 98
    5d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d7c:	80 81       	ld	r24, Z
    5d7e:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
    5d82:	fe 01       	movw	r30, r28
    5d84:	e3 59       	subi	r30, 0x93	; 147
    5d86:	ff 4f       	sbci	r31, 0xFF	; 255
    5d88:	80 e0       	ldi	r24, 0x00	; 0
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	a8 e4       	ldi	r26, 0x48	; 72
    5d8e:	b3 e4       	ldi	r27, 0x43	; 67
    5d90:	80 83       	st	Z, r24
    5d92:	91 83       	std	Z+1, r25	; 0x01
    5d94:	a2 83       	std	Z+2, r26	; 0x02
    5d96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d98:	8e 01       	movw	r16, r28
    5d9a:	07 59       	subi	r16, 0x97	; 151
    5d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d9e:	fe 01       	movw	r30, r28
    5da0:	e3 59       	subi	r30, 0x93	; 147
    5da2:	ff 4f       	sbci	r31, 0xFF	; 255
    5da4:	60 81       	ld	r22, Z
    5da6:	71 81       	ldd	r23, Z+1	; 0x01
    5da8:	82 81       	ldd	r24, Z+2	; 0x02
    5daa:	93 81       	ldd	r25, Z+3	; 0x03
    5dac:	20 e0       	ldi	r18, 0x00	; 0
    5dae:	30 e0       	ldi	r19, 0x00	; 0
    5db0:	4a ef       	ldi	r20, 0xFA	; 250
    5db2:	54 e4       	ldi	r21, 0x44	; 68
    5db4:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5db8:	dc 01       	movw	r26, r24
    5dba:	cb 01       	movw	r24, r22
    5dbc:	f8 01       	movw	r30, r16
    5dbe:	80 83       	st	Z, r24
    5dc0:	91 83       	std	Z+1, r25	; 0x01
    5dc2:	a2 83       	std	Z+2, r26	; 0x02
    5dc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5dc6:	fe 01       	movw	r30, r28
    5dc8:	e7 59       	subi	r30, 0x97	; 151
    5dca:	ff 4f       	sbci	r31, 0xFF	; 255
    5dcc:	60 81       	ld	r22, Z
    5dce:	71 81       	ldd	r23, Z+1	; 0x01
    5dd0:	82 81       	ldd	r24, Z+2	; 0x02
    5dd2:	93 81       	ldd	r25, Z+3	; 0x03
    5dd4:	20 e0       	ldi	r18, 0x00	; 0
    5dd6:	30 e0       	ldi	r19, 0x00	; 0
    5dd8:	40 e8       	ldi	r20, 0x80	; 128
    5dda:	5f e3       	ldi	r21, 0x3F	; 63
    5ddc:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    5de0:	88 23       	and	r24, r24
    5de2:	44 f4       	brge	.+16     	; 0x5df4 <main+0x65e>
		__ticks = 1;
    5de4:	fe 01       	movw	r30, r28
    5de6:	e9 59       	subi	r30, 0x99	; 153
    5de8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dea:	81 e0       	ldi	r24, 0x01	; 1
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	91 83       	std	Z+1, r25	; 0x01
    5df0:	80 83       	st	Z, r24
    5df2:	64 c0       	rjmp	.+200    	; 0x5ebc <main+0x726>
	else if (__tmp > 65535)
    5df4:	fe 01       	movw	r30, r28
    5df6:	e7 59       	subi	r30, 0x97	; 151
    5df8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfa:	60 81       	ld	r22, Z
    5dfc:	71 81       	ldd	r23, Z+1	; 0x01
    5dfe:	82 81       	ldd	r24, Z+2	; 0x02
    5e00:	93 81       	ldd	r25, Z+3	; 0x03
    5e02:	20 e0       	ldi	r18, 0x00	; 0
    5e04:	3f ef       	ldi	r19, 0xFF	; 255
    5e06:	4f e7       	ldi	r20, 0x7F	; 127
    5e08:	57 e4       	ldi	r21, 0x47	; 71
    5e0a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    5e0e:	18 16       	cp	r1, r24
    5e10:	0c f0       	brlt	.+2      	; 0x5e14 <main+0x67e>
    5e12:	43 c0       	rjmp	.+134    	; 0x5e9a <main+0x704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e14:	fe 01       	movw	r30, r28
    5e16:	e3 59       	subi	r30, 0x93	; 147
    5e18:	ff 4f       	sbci	r31, 0xFF	; 255
    5e1a:	60 81       	ld	r22, Z
    5e1c:	71 81       	ldd	r23, Z+1	; 0x01
    5e1e:	82 81       	ldd	r24, Z+2	; 0x02
    5e20:	93 81       	ldd	r25, Z+3	; 0x03
    5e22:	20 e0       	ldi	r18, 0x00	; 0
    5e24:	30 e0       	ldi	r19, 0x00	; 0
    5e26:	40 e2       	ldi	r20, 0x20	; 32
    5e28:	51 e4       	ldi	r21, 0x41	; 65
    5e2a:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5e2e:	dc 01       	movw	r26, r24
    5e30:	cb 01       	movw	r24, r22
    5e32:	8e 01       	movw	r16, r28
    5e34:	09 59       	subi	r16, 0x99	; 153
    5e36:	1f 4f       	sbci	r17, 0xFF	; 255
    5e38:	bc 01       	movw	r22, r24
    5e3a:	cd 01       	movw	r24, r26
    5e3c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5e40:	dc 01       	movw	r26, r24
    5e42:	cb 01       	movw	r24, r22
    5e44:	f8 01       	movw	r30, r16
    5e46:	91 83       	std	Z+1, r25	; 0x01
    5e48:	80 83       	st	Z, r24
    5e4a:	1f c0       	rjmp	.+62     	; 0x5e8a <main+0x6f4>
    5e4c:	fe 01       	movw	r30, r28
    5e4e:	eb 59       	subi	r30, 0x9B	; 155
    5e50:	ff 4f       	sbci	r31, 0xFF	; 255
    5e52:	88 ec       	ldi	r24, 0xC8	; 200
    5e54:	90 e0       	ldi	r25, 0x00	; 0
    5e56:	91 83       	std	Z+1, r25	; 0x01
    5e58:	80 83       	st	Z, r24
    5e5a:	fe 01       	movw	r30, r28
    5e5c:	eb 59       	subi	r30, 0x9B	; 155
    5e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e60:	80 81       	ld	r24, Z
    5e62:	91 81       	ldd	r25, Z+1	; 0x01
    5e64:	01 97       	sbiw	r24, 0x01	; 1
    5e66:	f1 f7       	brne	.-4      	; 0x5e64 <main+0x6ce>
    5e68:	fe 01       	movw	r30, r28
    5e6a:	eb 59       	subi	r30, 0x9B	; 155
    5e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6e:	91 83       	std	Z+1, r25	; 0x01
    5e70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e72:	de 01       	movw	r26, r28
    5e74:	a9 59       	subi	r26, 0x99	; 153
    5e76:	bf 4f       	sbci	r27, 0xFF	; 255
    5e78:	fe 01       	movw	r30, r28
    5e7a:	e9 59       	subi	r30, 0x99	; 153
    5e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e7e:	80 81       	ld	r24, Z
    5e80:	91 81       	ldd	r25, Z+1	; 0x01
    5e82:	01 97       	sbiw	r24, 0x01	; 1
    5e84:	11 96       	adiw	r26, 0x01	; 1
    5e86:	9c 93       	st	X, r25
    5e88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e8a:	fe 01       	movw	r30, r28
    5e8c:	e9 59       	subi	r30, 0x99	; 153
    5e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e90:	80 81       	ld	r24, Z
    5e92:	91 81       	ldd	r25, Z+1	; 0x01
    5e94:	00 97       	sbiw	r24, 0x00	; 0
    5e96:	d1 f6       	brne	.-76     	; 0x5e4c <main+0x6b6>
    5e98:	27 c0       	rjmp	.+78     	; 0x5ee8 <main+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e9a:	8e 01       	movw	r16, r28
    5e9c:	09 59       	subi	r16, 0x99	; 153
    5e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea0:	fe 01       	movw	r30, r28
    5ea2:	e7 59       	subi	r30, 0x97	; 151
    5ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ea6:	60 81       	ld	r22, Z
    5ea8:	71 81       	ldd	r23, Z+1	; 0x01
    5eaa:	82 81       	ldd	r24, Z+2	; 0x02
    5eac:	93 81       	ldd	r25, Z+3	; 0x03
    5eae:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5eb2:	dc 01       	movw	r26, r24
    5eb4:	cb 01       	movw	r24, r22
    5eb6:	f8 01       	movw	r30, r16
    5eb8:	91 83       	std	Z+1, r25	; 0x01
    5eba:	80 83       	st	Z, r24
    5ebc:	de 01       	movw	r26, r28
    5ebe:	ad 59       	subi	r26, 0x9D	; 157
    5ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    5ec2:	fe 01       	movw	r30, r28
    5ec4:	e9 59       	subi	r30, 0x99	; 153
    5ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec8:	80 81       	ld	r24, Z
    5eca:	91 81       	ldd	r25, Z+1	; 0x01
    5ecc:	8d 93       	st	X+, r24
    5ece:	9c 93       	st	X, r25
    5ed0:	fe 01       	movw	r30, r28
    5ed2:	ed 59       	subi	r30, 0x9D	; 157
    5ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed6:	80 81       	ld	r24, Z
    5ed8:	91 81       	ldd	r25, Z+1	; 0x01
    5eda:	01 97       	sbiw	r24, 0x01	; 1
    5edc:	f1 f7       	brne	.-4      	; 0x5eda <main+0x744>
    5ede:	fe 01       	movw	r30, r28
    5ee0:	ed 59       	subi	r30, 0x9D	; 157
    5ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee4:	91 83       	std	Z+1, r25	; 0x01
    5ee6:	80 83       	st	Z, r24
			_delay_ms(200);
			CLCD_voidGoToX_Y(CLCD_ROW1 , Local_u8Password_LCD_Position);
    5ee8:	fe 01       	movw	r30, r28
    5eea:	e1 56       	subi	r30, 0x61	; 97
    5eec:	ff 4f       	sbci	r31, 0xFF	; 255
    5eee:	81 e0       	ldi	r24, 0x01	; 1
    5ef0:	60 81       	ld	r22, Z
    5ef2:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
			CLCD_voidSendCharacter('*'); // Displaying a * in the first Digit place
    5ef6:	8a e2       	ldi	r24, 0x2A	; 42
    5ef8:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
			Local_u8Password_LCD_Position++; // Increasing to points to the position of next digit on the LCD
    5efc:	de 01       	movw	r26, r28
    5efe:	a1 56       	subi	r26, 0x61	; 97
    5f00:	bf 4f       	sbci	r27, 0xFF	; 255
    5f02:	fe 01       	movw	r30, r28
    5f04:	e1 56       	subi	r30, 0x61	; 97
    5f06:	ff 4f       	sbci	r31, 0xFF	; 255
    5f08:	80 81       	ld	r24, Z
    5f0a:	8f 5f       	subi	r24, 0xFF	; 255
    5f0c:	8c 93       	st	X, r24
			Local_u8KeypadpressedValue = 0;
    5f0e:	fe 01       	movw	r30, r28
    5f10:	e2 56       	subi	r30, 0x62	; 98
    5f12:	ff 4f       	sbci	r31, 0xFF	; 255
    5f14:	10 82       	st	Z, r1
		_delay_ms(1000); // Wait 1 second showing the Message
		CLCD_voidClearScreen(); // Clear the screen
		CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1);
		CLCD_voidSendString( (u8*)"Password:" ); // Waiting from the user to Enter the Password to be set to this System

		for( Local_u8LoopIterator = 0; Local_u8LoopIterator < PASS_LENGHTH ; Local_u8LoopIterator++ )
    5f16:	de 01       	movw	r26, r28
    5f18:	a0 56       	subi	r26, 0x60	; 96
    5f1a:	bf 4f       	sbci	r27, 0xFF	; 255
    5f1c:	fe 01       	movw	r30, r28
    5f1e:	e0 56       	subi	r30, 0x60	; 96
    5f20:	ff 4f       	sbci	r31, 0xFF	; 255
    5f22:	80 81       	ld	r24, Z
    5f24:	8f 5f       	subi	r24, 0xFF	; 255
    5f26:	8c 93       	st	X, r24
    5f28:	fe 01       	movw	r30, r28
    5f2a:	e0 56       	subi	r30, 0x60	; 96
    5f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2e:	80 81       	ld	r24, Z
    5f30:	84 30       	cpi	r24, 0x04	; 4
    5f32:	08 f4       	brcc	.+2      	; 0x5f36 <main+0x7a0>
    5f34:	fc ce       	rjmp	.-520    	; 0x5d2e <main+0x598>
			CLCD_voidGoToX_Y(CLCD_ROW1 , Local_u8Password_LCD_Position);
			CLCD_voidSendCharacter('*'); // Displaying a * in the first Digit place
			Local_u8Password_LCD_Position++; // Increasing to points to the position of next digit on the LCD
			Local_u8KeypadpressedValue = 0;
		}
		CLCD_voidClearScreen(); // Clear Screen
    5f36:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
		CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1);
    5f3a:	81 e0       	ldi	r24, 0x01	; 1
    5f3c:	61 e0       	ldi	r22, 0x01	; 1
    5f3e:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
		CLCD_voidSendString((u8*)"Password Saved"); // Send Notification that the password has been Saved
    5f42:	85 ea       	ldi	r24, 0xA5	; 165
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
		EEPROM_voidWriteBlock( BASE_ADDRESS_PASSWORD, PASS_LENGHTH , Local_arrEnteredpassword ); // Save the password in the memory
    5f4a:	9e 01       	movw	r18, r28
    5f4c:	2c 55       	subi	r18, 0x5C	; 92
    5f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f50:	84 e6       	ldi	r24, 0x64	; 100
    5f52:	90 e0       	ldi	r25, 0x00	; 0
    5f54:	64 e0       	ldi	r22, 0x04	; 4
    5f56:	a9 01       	movw	r20, r18
    5f58:	0e 94 48 17 	call	0x2e90	; 0x2e90 <EEPROM_voidWriteBlock>
		EEPROM_voidWriteByte(PASSWORD_FLAG_ADDRESS , PASSWORD_SET); // Change the Password Flag to be Set
    5f5c:	89 e6       	ldi	r24, 0x69	; 105
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    5f60:	60 e0       	ldi	r22, 0x00	; 0
    5f62:	0e 94 23 17 	call	0x2e46	; 0x2e46 <EEPROM_voidWriteByte>
    5f66:	fe 01       	movw	r30, r28
    5f68:	e1 5a       	subi	r30, 0xA1	; 161
    5f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f6c:	80 e0       	ldi	r24, 0x00	; 0
    5f6e:	90 e0       	ldi	r25, 0x00	; 0
    5f70:	aa ef       	ldi	r26, 0xFA	; 250
    5f72:	b3 e4       	ldi	r27, 0x43	; 67
    5f74:	80 83       	st	Z, r24
    5f76:	91 83       	std	Z+1, r25	; 0x01
    5f78:	a2 83       	std	Z+2, r26	; 0x02
    5f7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f7c:	8e 01       	movw	r16, r28
    5f7e:	05 5a       	subi	r16, 0xA5	; 165
    5f80:	1f 4f       	sbci	r17, 0xFF	; 255
    5f82:	fe 01       	movw	r30, r28
    5f84:	e1 5a       	subi	r30, 0xA1	; 161
    5f86:	ff 4f       	sbci	r31, 0xFF	; 255
    5f88:	60 81       	ld	r22, Z
    5f8a:	71 81       	ldd	r23, Z+1	; 0x01
    5f8c:	82 81       	ldd	r24, Z+2	; 0x02
    5f8e:	93 81       	ldd	r25, Z+3	; 0x03
    5f90:	20 e0       	ldi	r18, 0x00	; 0
    5f92:	30 e0       	ldi	r19, 0x00	; 0
    5f94:	4a ef       	ldi	r20, 0xFA	; 250
    5f96:	54 e4       	ldi	r21, 0x44	; 68
    5f98:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    5f9c:	dc 01       	movw	r26, r24
    5f9e:	cb 01       	movw	r24, r22
    5fa0:	f8 01       	movw	r30, r16
    5fa2:	80 83       	st	Z, r24
    5fa4:	91 83       	std	Z+1, r25	; 0x01
    5fa6:	a2 83       	std	Z+2, r26	; 0x02
    5fa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5faa:	fe 01       	movw	r30, r28
    5fac:	e5 5a       	subi	r30, 0xA5	; 165
    5fae:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb0:	60 81       	ld	r22, Z
    5fb2:	71 81       	ldd	r23, Z+1	; 0x01
    5fb4:	82 81       	ldd	r24, Z+2	; 0x02
    5fb6:	93 81       	ldd	r25, Z+3	; 0x03
    5fb8:	20 e0       	ldi	r18, 0x00	; 0
    5fba:	30 e0       	ldi	r19, 0x00	; 0
    5fbc:	40 e8       	ldi	r20, 0x80	; 128
    5fbe:	5f e3       	ldi	r21, 0x3F	; 63
    5fc0:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    5fc4:	88 23       	and	r24, r24
    5fc6:	44 f4       	brge	.+16     	; 0x5fd8 <main+0x842>
		__ticks = 1;
    5fc8:	fe 01       	movw	r30, r28
    5fca:	e7 5a       	subi	r30, 0xA7	; 167
    5fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fce:	81 e0       	ldi	r24, 0x01	; 1
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	91 83       	std	Z+1, r25	; 0x01
    5fd4:	80 83       	st	Z, r24
    5fd6:	64 c0       	rjmp	.+200    	; 0x60a0 <main+0x90a>
	else if (__tmp > 65535)
    5fd8:	fe 01       	movw	r30, r28
    5fda:	e5 5a       	subi	r30, 0xA5	; 165
    5fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fde:	60 81       	ld	r22, Z
    5fe0:	71 81       	ldd	r23, Z+1	; 0x01
    5fe2:	82 81       	ldd	r24, Z+2	; 0x02
    5fe4:	93 81       	ldd	r25, Z+3	; 0x03
    5fe6:	20 e0       	ldi	r18, 0x00	; 0
    5fe8:	3f ef       	ldi	r19, 0xFF	; 255
    5fea:	4f e7       	ldi	r20, 0x7F	; 127
    5fec:	57 e4       	ldi	r21, 0x47	; 71
    5fee:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    5ff2:	18 16       	cp	r1, r24
    5ff4:	0c f0       	brlt	.+2      	; 0x5ff8 <main+0x862>
    5ff6:	43 c0       	rjmp	.+134    	; 0x607e <main+0x8e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ff8:	fe 01       	movw	r30, r28
    5ffa:	e1 5a       	subi	r30, 0xA1	; 161
    5ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ffe:	60 81       	ld	r22, Z
    6000:	71 81       	ldd	r23, Z+1	; 0x01
    6002:	82 81       	ldd	r24, Z+2	; 0x02
    6004:	93 81       	ldd	r25, Z+3	; 0x03
    6006:	20 e0       	ldi	r18, 0x00	; 0
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	40 e2       	ldi	r20, 0x20	; 32
    600c:	51 e4       	ldi	r21, 0x41	; 65
    600e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    6012:	dc 01       	movw	r26, r24
    6014:	cb 01       	movw	r24, r22
    6016:	8e 01       	movw	r16, r28
    6018:	07 5a       	subi	r16, 0xA7	; 167
    601a:	1f 4f       	sbci	r17, 0xFF	; 255
    601c:	bc 01       	movw	r22, r24
    601e:	cd 01       	movw	r24, r26
    6020:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6024:	dc 01       	movw	r26, r24
    6026:	cb 01       	movw	r24, r22
    6028:	f8 01       	movw	r30, r16
    602a:	91 83       	std	Z+1, r25	; 0x01
    602c:	80 83       	st	Z, r24
    602e:	1f c0       	rjmp	.+62     	; 0x606e <main+0x8d8>
    6030:	fe 01       	movw	r30, r28
    6032:	e9 5a       	subi	r30, 0xA9	; 169
    6034:	ff 4f       	sbci	r31, 0xFF	; 255
    6036:	88 ec       	ldi	r24, 0xC8	; 200
    6038:	90 e0       	ldi	r25, 0x00	; 0
    603a:	91 83       	std	Z+1, r25	; 0x01
    603c:	80 83       	st	Z, r24
    603e:	fe 01       	movw	r30, r28
    6040:	e9 5a       	subi	r30, 0xA9	; 169
    6042:	ff 4f       	sbci	r31, 0xFF	; 255
    6044:	80 81       	ld	r24, Z
    6046:	91 81       	ldd	r25, Z+1	; 0x01
    6048:	01 97       	sbiw	r24, 0x01	; 1
    604a:	f1 f7       	brne	.-4      	; 0x6048 <main+0x8b2>
    604c:	fe 01       	movw	r30, r28
    604e:	e9 5a       	subi	r30, 0xA9	; 169
    6050:	ff 4f       	sbci	r31, 0xFF	; 255
    6052:	91 83       	std	Z+1, r25	; 0x01
    6054:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6056:	de 01       	movw	r26, r28
    6058:	a7 5a       	subi	r26, 0xA7	; 167
    605a:	bf 4f       	sbci	r27, 0xFF	; 255
    605c:	fe 01       	movw	r30, r28
    605e:	e7 5a       	subi	r30, 0xA7	; 167
    6060:	ff 4f       	sbci	r31, 0xFF	; 255
    6062:	80 81       	ld	r24, Z
    6064:	91 81       	ldd	r25, Z+1	; 0x01
    6066:	01 97       	sbiw	r24, 0x01	; 1
    6068:	11 96       	adiw	r26, 0x01	; 1
    606a:	9c 93       	st	X, r25
    606c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    606e:	fe 01       	movw	r30, r28
    6070:	e7 5a       	subi	r30, 0xA7	; 167
    6072:	ff 4f       	sbci	r31, 0xFF	; 255
    6074:	80 81       	ld	r24, Z
    6076:	91 81       	ldd	r25, Z+1	; 0x01
    6078:	00 97       	sbiw	r24, 0x00	; 0
    607a:	d1 f6       	brne	.-76     	; 0x6030 <main+0x89a>
    607c:	27 c0       	rjmp	.+78     	; 0x60cc <main+0x936>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    607e:	8e 01       	movw	r16, r28
    6080:	07 5a       	subi	r16, 0xA7	; 167
    6082:	1f 4f       	sbci	r17, 0xFF	; 255
    6084:	fe 01       	movw	r30, r28
    6086:	e5 5a       	subi	r30, 0xA5	; 165
    6088:	ff 4f       	sbci	r31, 0xFF	; 255
    608a:	60 81       	ld	r22, Z
    608c:	71 81       	ldd	r23, Z+1	; 0x01
    608e:	82 81       	ldd	r24, Z+2	; 0x02
    6090:	93 81       	ldd	r25, Z+3	; 0x03
    6092:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6096:	dc 01       	movw	r26, r24
    6098:	cb 01       	movw	r24, r22
    609a:	f8 01       	movw	r30, r16
    609c:	91 83       	std	Z+1, r25	; 0x01
    609e:	80 83       	st	Z, r24
    60a0:	de 01       	movw	r26, r28
    60a2:	ab 5a       	subi	r26, 0xAB	; 171
    60a4:	bf 4f       	sbci	r27, 0xFF	; 255
    60a6:	fe 01       	movw	r30, r28
    60a8:	e7 5a       	subi	r30, 0xA7	; 167
    60aa:	ff 4f       	sbci	r31, 0xFF	; 255
    60ac:	80 81       	ld	r24, Z
    60ae:	91 81       	ldd	r25, Z+1	; 0x01
    60b0:	8d 93       	st	X+, r24
    60b2:	9c 93       	st	X, r25
    60b4:	fe 01       	movw	r30, r28
    60b6:	eb 5a       	subi	r30, 0xAB	; 171
    60b8:	ff 4f       	sbci	r31, 0xFF	; 255
    60ba:	80 81       	ld	r24, Z
    60bc:	91 81       	ldd	r25, Z+1	; 0x01
    60be:	01 97       	sbiw	r24, 0x01	; 1
    60c0:	f1 f7       	brne	.-4      	; 0x60be <main+0x928>
    60c2:	fe 01       	movw	r30, r28
    60c4:	eb 5a       	subi	r30, 0xAB	; 171
    60c6:	ff 4f       	sbci	r31, 0xFF	; 255
    60c8:	91 83       	std	Z+1, r25	; 0x01
    60ca:	80 83       	st	Z, r24
		_delay_ms(500);
		Local_u8KeypadpressedValue = 0; // return to initial value
    60cc:	fe 01       	movw	r30, r28
    60ce:	e2 56       	subi	r30, 0x62	; 98
    60d0:	ff 4f       	sbci	r31, 0xFF	; 255
    60d2:	10 82       	st	Z, r1
		Local_u8Password_LCD_Position = 10; // return to the initial value
    60d4:	fe 01       	movw	r30, r28
    60d6:	e1 56       	subi	r30, 0x61	; 97
    60d8:	ff 4f       	sbci	r31, 0xFF	; 255
    60da:	8a e0       	ldi	r24, 0x0A	; 10
    60dc:	80 83       	st	Z, r24
		/* Clear the array of Entered Password */
		APP_voidClearArray(Local_arrEnteredpassword, PASS_LENGHTH);
    60de:	ce 01       	movw	r24, r28
    60e0:	8c 55       	subi	r24, 0x5C	; 92
    60e2:	9f 4f       	sbci	r25, 0xFF	; 255
    60e4:	64 e0       	ldi	r22, 0x04	; 4
    60e6:	0e 94 9c 2b 	call	0x5738	; 0x5738 <APP_voidClearArray>
    60ea:	6c c3       	rjmp	.+1752   	; 0x67c4 <main+0x102e>
	while(1)
	{

		while( Local_u8Menu == NO_MODE  )
		{
			if( Local_u8FailedLogin == STD_NOK) // The user Entered the Password Wrong and exceeded the number of tries
    60ec:	fe 01       	movw	r30, r28
    60ee:	ef 55       	subi	r30, 0x5F	; 95
    60f0:	ff 4f       	sbci	r31, 0xFF	; 255
    60f2:	80 81       	ld	r24, Z
    60f4:	88 23       	and	r24, r24
    60f6:	e9 f5       	brne	.+122    	; 0x6172 <main+0x9dc>
			{

				TIM0_Enable();  // Start Timer
    60f8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TIM0_Enable>
				if( RemainSeconds == 0 ) // when the time becomes 0 then reset the number of tries and stop the timer
    60fc:	80 91 b4 02 	lds	r24, 0x02B4
    6100:	88 23       	and	r24, r24
    6102:	79 f4       	brne	.+30     	; 0x6122 <main+0x98c>
				{
					TIM0_Disable(); // Stop the Timer
    6104:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <TIM0_Disable>
					Local_u8FailedLogin = STD_OK; // reset the flag
    6108:	fe 01       	movw	r30, r28
    610a:	ef 55       	subi	r30, 0x5F	; 95
    610c:	ff 4f       	sbci	r31, 0xFF	; 255
    610e:	81 e0       	ldi	r24, 0x01	; 1
    6110:	80 83       	st	Z, r24
					Local_u8NumberOfTries = 0; // reset the number of tries
    6112:	fe 01       	movw	r30, r28
    6114:	e4 56       	subi	r30, 0x64	; 100
    6116:	ff 4f       	sbci	r31, 0xFF	; 255
    6118:	10 82       	st	Z, r1
					RemainSeconds = HALT_INIT_TIME  ; // reset the delay time for the next time
    611a:	84 e1       	ldi	r24, 0x14	; 20
    611c:	80 93 b4 02 	sts	0x02B4, r24
    6120:	51 c3       	rjmp	.+1698   	; 0x67c4 <main+0x102e>

				}
				else
				{ // the user has to wait until the counts reaches 0

					CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1); // Set the Cursor to the Start of the LCD
    6122:	81 e0       	ldi	r24, 0x01	; 1
    6124:	61 e0       	ldi	r22, 0x01	; 1
    6126:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
					CLCD_voidSendString((u8*)"No more Tries");
    612a:	84 eb       	ldi	r24, 0xB4	; 180
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
					CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1); // Goto the next Line in the LCD
    6132:	82 e0       	ldi	r24, 0x02	; 2
    6134:	61 e0       	ldi	r22, 0x01	; 1
    6136:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
					CLCD_voidSendString( (u8*)"wait "); // Sending the rest of message
    613a:	82 ec       	ldi	r24, 0xC2	; 194
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
					CLCD_voidSendNumber(RemainSeconds);
    6142:	80 91 b4 02 	lds	r24, 0x02B4
    6146:	a8 2e       	mov	r10, r24
    6148:	bb 24       	eor	r11, r11
    614a:	cc 24       	eor	r12, r12
    614c:	dd 24       	eor	r13, r13
    614e:	ee 24       	eor	r14, r14
    6150:	ff 24       	eor	r15, r15
    6152:	87 01       	movw	r16, r14
    6154:	2a 2d       	mov	r18, r10
    6156:	3b 2d       	mov	r19, r11
    6158:	4c 2d       	mov	r20, r12
    615a:	5d 2d       	mov	r21, r13
    615c:	6e 2d       	mov	r22, r14
    615e:	7f 2d       	mov	r23, r15
    6160:	80 2f       	mov	r24, r16
    6162:	91 2f       	mov	r25, r17
    6164:	0e 94 7f 21 	call	0x42fe	; 0x42fe <CLCD_voidSendNumber>

					CLCD_voidSendString((u8*)" Seconds ");
    6168:	88 ec       	ldi	r24, 0xC8	; 200
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
    6170:	29 c3       	rjmp	.+1618   	; 0x67c4 <main+0x102e>
				}

			}
			else
			{
				CLCD_voidClearScreen(); // Clear the Screen
    6172:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
				CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1); // Set the Cursor to the Start of the LCD
    6176:	81 e0       	ldi	r24, 0x01	; 1
    6178:	61 e0       	ldi	r22, 0x01	; 1
    617a:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
				CLCD_voidSendString( (u8*)"Welcome to Smart" ); // Sending Welcome string
    617e:	80 e6       	ldi	r24, 0x60	; 96
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
				CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1); // Goto the next Line in the LCD
    6186:	82 e0       	ldi	r24, 0x02	; 2
    6188:	61 e0       	ldi	r22, 0x01	; 1
    618a:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
				CLCD_voidSendString( (u8*)"Home System" ); // Sending the rest of message
    618e:	81 e7       	ldi	r24, 0x71	; 113
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
    6196:	fe 01       	movw	r30, r28
    6198:	ef 5a       	subi	r30, 0xAF	; 175
    619a:	ff 4f       	sbci	r31, 0xFF	; 255
    619c:	80 e0       	ldi	r24, 0x00	; 0
    619e:	90 e0       	ldi	r25, 0x00	; 0
    61a0:	aa ef       	ldi	r26, 0xFA	; 250
    61a2:	b4 e4       	ldi	r27, 0x44	; 68
    61a4:	80 83       	st	Z, r24
    61a6:	91 83       	std	Z+1, r25	; 0x01
    61a8:	a2 83       	std	Z+2, r26	; 0x02
    61aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61ac:	8e 01       	movw	r16, r28
    61ae:	03 5b       	subi	r16, 0xB3	; 179
    61b0:	1f 4f       	sbci	r17, 0xFF	; 255
    61b2:	fe 01       	movw	r30, r28
    61b4:	ef 5a       	subi	r30, 0xAF	; 175
    61b6:	ff 4f       	sbci	r31, 0xFF	; 255
    61b8:	60 81       	ld	r22, Z
    61ba:	71 81       	ldd	r23, Z+1	; 0x01
    61bc:	82 81       	ldd	r24, Z+2	; 0x02
    61be:	93 81       	ldd	r25, Z+3	; 0x03
    61c0:	20 e0       	ldi	r18, 0x00	; 0
    61c2:	30 e0       	ldi	r19, 0x00	; 0
    61c4:	4a ef       	ldi	r20, 0xFA	; 250
    61c6:	54 e4       	ldi	r21, 0x44	; 68
    61c8:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    61cc:	dc 01       	movw	r26, r24
    61ce:	cb 01       	movw	r24, r22
    61d0:	f8 01       	movw	r30, r16
    61d2:	80 83       	st	Z, r24
    61d4:	91 83       	std	Z+1, r25	; 0x01
    61d6:	a2 83       	std	Z+2, r26	; 0x02
    61d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    61da:	fe 01       	movw	r30, r28
    61dc:	e3 5b       	subi	r30, 0xB3	; 179
    61de:	ff 4f       	sbci	r31, 0xFF	; 255
    61e0:	60 81       	ld	r22, Z
    61e2:	71 81       	ldd	r23, Z+1	; 0x01
    61e4:	82 81       	ldd	r24, Z+2	; 0x02
    61e6:	93 81       	ldd	r25, Z+3	; 0x03
    61e8:	20 e0       	ldi	r18, 0x00	; 0
    61ea:	30 e0       	ldi	r19, 0x00	; 0
    61ec:	40 e8       	ldi	r20, 0x80	; 128
    61ee:	5f e3       	ldi	r21, 0x3F	; 63
    61f0:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    61f4:	88 23       	and	r24, r24
    61f6:	44 f4       	brge	.+16     	; 0x6208 <main+0xa72>
		__ticks = 1;
    61f8:	fe 01       	movw	r30, r28
    61fa:	e5 5b       	subi	r30, 0xB5	; 181
    61fc:	ff 4f       	sbci	r31, 0xFF	; 255
    61fe:	81 e0       	ldi	r24, 0x01	; 1
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	91 83       	std	Z+1, r25	; 0x01
    6204:	80 83       	st	Z, r24
    6206:	64 c0       	rjmp	.+200    	; 0x62d0 <main+0xb3a>
	else if (__tmp > 65535)
    6208:	fe 01       	movw	r30, r28
    620a:	e3 5b       	subi	r30, 0xB3	; 179
    620c:	ff 4f       	sbci	r31, 0xFF	; 255
    620e:	60 81       	ld	r22, Z
    6210:	71 81       	ldd	r23, Z+1	; 0x01
    6212:	82 81       	ldd	r24, Z+2	; 0x02
    6214:	93 81       	ldd	r25, Z+3	; 0x03
    6216:	20 e0       	ldi	r18, 0x00	; 0
    6218:	3f ef       	ldi	r19, 0xFF	; 255
    621a:	4f e7       	ldi	r20, 0x7F	; 127
    621c:	57 e4       	ldi	r21, 0x47	; 71
    621e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    6222:	18 16       	cp	r1, r24
    6224:	0c f0       	brlt	.+2      	; 0x6228 <main+0xa92>
    6226:	43 c0       	rjmp	.+134    	; 0x62ae <main+0xb18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6228:	fe 01       	movw	r30, r28
    622a:	ef 5a       	subi	r30, 0xAF	; 175
    622c:	ff 4f       	sbci	r31, 0xFF	; 255
    622e:	60 81       	ld	r22, Z
    6230:	71 81       	ldd	r23, Z+1	; 0x01
    6232:	82 81       	ldd	r24, Z+2	; 0x02
    6234:	93 81       	ldd	r25, Z+3	; 0x03
    6236:	20 e0       	ldi	r18, 0x00	; 0
    6238:	30 e0       	ldi	r19, 0x00	; 0
    623a:	40 e2       	ldi	r20, 0x20	; 32
    623c:	51 e4       	ldi	r21, 0x41	; 65
    623e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    6242:	dc 01       	movw	r26, r24
    6244:	cb 01       	movw	r24, r22
    6246:	8e 01       	movw	r16, r28
    6248:	05 5b       	subi	r16, 0xB5	; 181
    624a:	1f 4f       	sbci	r17, 0xFF	; 255
    624c:	bc 01       	movw	r22, r24
    624e:	cd 01       	movw	r24, r26
    6250:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6254:	dc 01       	movw	r26, r24
    6256:	cb 01       	movw	r24, r22
    6258:	f8 01       	movw	r30, r16
    625a:	91 83       	std	Z+1, r25	; 0x01
    625c:	80 83       	st	Z, r24
    625e:	1f c0       	rjmp	.+62     	; 0x629e <main+0xb08>
    6260:	fe 01       	movw	r30, r28
    6262:	e7 5b       	subi	r30, 0xB7	; 183
    6264:	ff 4f       	sbci	r31, 0xFF	; 255
    6266:	88 ec       	ldi	r24, 0xC8	; 200
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	91 83       	std	Z+1, r25	; 0x01
    626c:	80 83       	st	Z, r24
    626e:	fe 01       	movw	r30, r28
    6270:	e7 5b       	subi	r30, 0xB7	; 183
    6272:	ff 4f       	sbci	r31, 0xFF	; 255
    6274:	80 81       	ld	r24, Z
    6276:	91 81       	ldd	r25, Z+1	; 0x01
    6278:	01 97       	sbiw	r24, 0x01	; 1
    627a:	f1 f7       	brne	.-4      	; 0x6278 <main+0xae2>
    627c:	fe 01       	movw	r30, r28
    627e:	e7 5b       	subi	r30, 0xB7	; 183
    6280:	ff 4f       	sbci	r31, 0xFF	; 255
    6282:	91 83       	std	Z+1, r25	; 0x01
    6284:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6286:	de 01       	movw	r26, r28
    6288:	a5 5b       	subi	r26, 0xB5	; 181
    628a:	bf 4f       	sbci	r27, 0xFF	; 255
    628c:	fe 01       	movw	r30, r28
    628e:	e5 5b       	subi	r30, 0xB5	; 181
    6290:	ff 4f       	sbci	r31, 0xFF	; 255
    6292:	80 81       	ld	r24, Z
    6294:	91 81       	ldd	r25, Z+1	; 0x01
    6296:	01 97       	sbiw	r24, 0x01	; 1
    6298:	11 96       	adiw	r26, 0x01	; 1
    629a:	9c 93       	st	X, r25
    629c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    629e:	fe 01       	movw	r30, r28
    62a0:	e5 5b       	subi	r30, 0xB5	; 181
    62a2:	ff 4f       	sbci	r31, 0xFF	; 255
    62a4:	80 81       	ld	r24, Z
    62a6:	91 81       	ldd	r25, Z+1	; 0x01
    62a8:	00 97       	sbiw	r24, 0x00	; 0
    62aa:	d1 f6       	brne	.-76     	; 0x6260 <main+0xaca>
    62ac:	27 c0       	rjmp	.+78     	; 0x62fc <main+0xb66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62ae:	8e 01       	movw	r16, r28
    62b0:	05 5b       	subi	r16, 0xB5	; 181
    62b2:	1f 4f       	sbci	r17, 0xFF	; 255
    62b4:	fe 01       	movw	r30, r28
    62b6:	e3 5b       	subi	r30, 0xB3	; 179
    62b8:	ff 4f       	sbci	r31, 0xFF	; 255
    62ba:	60 81       	ld	r22, Z
    62bc:	71 81       	ldd	r23, Z+1	; 0x01
    62be:	82 81       	ldd	r24, Z+2	; 0x02
    62c0:	93 81       	ldd	r25, Z+3	; 0x03
    62c2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    62c6:	dc 01       	movw	r26, r24
    62c8:	cb 01       	movw	r24, r22
    62ca:	f8 01       	movw	r30, r16
    62cc:	91 83       	std	Z+1, r25	; 0x01
    62ce:	80 83       	st	Z, r24
    62d0:	de 01       	movw	r26, r28
    62d2:	a9 5b       	subi	r26, 0xB9	; 185
    62d4:	bf 4f       	sbci	r27, 0xFF	; 255
    62d6:	fe 01       	movw	r30, r28
    62d8:	e5 5b       	subi	r30, 0xB5	; 181
    62da:	ff 4f       	sbci	r31, 0xFF	; 255
    62dc:	80 81       	ld	r24, Z
    62de:	91 81       	ldd	r25, Z+1	; 0x01
    62e0:	8d 93       	st	X+, r24
    62e2:	9c 93       	st	X, r25
    62e4:	fe 01       	movw	r30, r28
    62e6:	e9 5b       	subi	r30, 0xB9	; 185
    62e8:	ff 4f       	sbci	r31, 0xFF	; 255
    62ea:	80 81       	ld	r24, Z
    62ec:	91 81       	ldd	r25, Z+1	; 0x01
    62ee:	01 97       	sbiw	r24, 0x01	; 1
    62f0:	f1 f7       	brne	.-4      	; 0x62ee <main+0xb58>
    62f2:	fe 01       	movw	r30, r28
    62f4:	e9 5b       	subi	r30, 0xB9	; 185
    62f6:	ff 4f       	sbci	r31, 0xFF	; 255
    62f8:	91 83       	std	Z+1, r25	; 0x01
    62fa:	80 83       	st	Z, r24
				_delay_ms(2000); // Wait 2 second showing the Message
				do
				{
					CLCD_voidClearScreen(); // Clear the screen
    62fc:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
					CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1); // Go to the first Position in the LCD
    6300:	81 e0       	ldi	r24, 0x01	; 1
    6302:	61 e0       	ldi	r22, 0x01	; 1
    6304:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
					CLCD_voidSendString( (u8*)"Enter Pass code" ); // Sending a message that the user should Set password for the system
    6308:	82 ed       	ldi	r24, 0xD2	; 210
    630a:	90 e0       	ldi	r25, 0x00	; 0
    630c:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
					CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1); // Go to the next line in the LCD
    6310:	82 e0       	ldi	r24, 0x02	; 2
    6312:	61 e0       	ldi	r22, 0x01	; 1
    6314:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
					CLCD_voidSendString( (u8*)"Password:" ); // Waiting from the user to Enter the Password to be set to this System
    6318:	8b e9       	ldi	r24, 0x9B	; 155
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>

					for( Local_u8LoopIterator = 0; Local_u8LoopIterator < PASS_LENGHTH ; Local_u8LoopIterator++ )
    6320:	fe 01       	movw	r30, r28
    6322:	e0 56       	subi	r30, 0x60	; 96
    6324:	ff 4f       	sbci	r31, 0xFF	; 255
    6326:	10 82       	st	Z, r1
    6328:	cf c0       	rjmp	.+414    	; 0x64c8 <main+0xd32>
					{
						do
						{
							Local_u8KeypadpressedValue = KEYPAD_voidGetPressedButton(); // Reading the keypad until the user press any Button
    632a:	0e 94 57 2a 	call	0x54ae	; 0x54ae <KEYPAD_voidGetPressedButton>
    632e:	fe 01       	movw	r30, r28
    6330:	e2 56       	subi	r30, 0x62	; 98
    6332:	ff 4f       	sbci	r31, 0xFF	; 255
    6334:	80 83       	st	Z, r24
						}while(Local_u8KeypadpressedValue == NOT_PRESSED);
    6336:	fe 01       	movw	r30, r28
    6338:	e2 56       	subi	r30, 0x62	; 98
    633a:	ff 4f       	sbci	r31, 0xFF	; 255
    633c:	80 81       	ld	r24, Z
    633e:	88 23       	and	r24, r24
    6340:	a1 f3       	breq	.-24     	; 0x632a <main+0xb94>

						Local_arrEnteredpassword[Local_u8LoopIterator] = Local_u8KeypadpressedValue; // Save the pressed value on the array
    6342:	fe 01       	movw	r30, r28
    6344:	e0 56       	subi	r30, 0x60	; 96
    6346:	ff 4f       	sbci	r31, 0xFF	; 255
    6348:	80 81       	ld	r24, Z
    634a:	28 2f       	mov	r18, r24
    634c:	30 e0       	ldi	r19, 0x00	; 0
    634e:	ce 01       	movw	r24, r28
    6350:	8c 55       	subi	r24, 0x5C	; 92
    6352:	9f 4f       	sbci	r25, 0xFF	; 255
    6354:	dc 01       	movw	r26, r24
    6356:	a2 0f       	add	r26, r18
    6358:	b3 1f       	adc	r27, r19
    635a:	fe 01       	movw	r30, r28
    635c:	e2 56       	subi	r30, 0x62	; 98
    635e:	ff 4f       	sbci	r31, 0xFF	; 255
    6360:	80 81       	ld	r24, Z
    6362:	8c 93       	st	X, r24
						CLCD_voidGoToX_Y(CLCD_ROW2, Local_u8Password_LCD_Position);  // Go to the First Digit position on the LCD
    6364:	fe 01       	movw	r30, r28
    6366:	e1 56       	subi	r30, 0x61	; 97
    6368:	ff 4f       	sbci	r31, 0xFF	; 255
    636a:	82 e0       	ldi	r24, 0x02	; 2
    636c:	60 81       	ld	r22, Z
    636e:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
						CLCD_voidSendCharacter(Local_u8KeypadpressedValue); // Displaying the pressed button on the LCD for a while
    6372:	fe 01       	movw	r30, r28
    6374:	e2 56       	subi	r30, 0x62	; 98
    6376:	ff 4f       	sbci	r31, 0xFF	; 255
    6378:	80 81       	ld	r24, Z
    637a:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
    637e:	fe 01       	movw	r30, r28
    6380:	ed 5b       	subi	r30, 0xBD	; 189
    6382:	ff 4f       	sbci	r31, 0xFF	; 255
    6384:	80 e0       	ldi	r24, 0x00	; 0
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	a8 e4       	ldi	r26, 0x48	; 72
    638a:	b3 e4       	ldi	r27, 0x43	; 67
    638c:	80 83       	st	Z, r24
    638e:	91 83       	std	Z+1, r25	; 0x01
    6390:	a2 83       	std	Z+2, r26	; 0x02
    6392:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6394:	8e 01       	movw	r16, r28
    6396:	01 5c       	subi	r16, 0xC1	; 193
    6398:	1f 4f       	sbci	r17, 0xFF	; 255
    639a:	fe 01       	movw	r30, r28
    639c:	ed 5b       	subi	r30, 0xBD	; 189
    639e:	ff 4f       	sbci	r31, 0xFF	; 255
    63a0:	60 81       	ld	r22, Z
    63a2:	71 81       	ldd	r23, Z+1	; 0x01
    63a4:	82 81       	ldd	r24, Z+2	; 0x02
    63a6:	93 81       	ldd	r25, Z+3	; 0x03
    63a8:	20 e0       	ldi	r18, 0x00	; 0
    63aa:	30 e0       	ldi	r19, 0x00	; 0
    63ac:	4a ef       	ldi	r20, 0xFA	; 250
    63ae:	54 e4       	ldi	r21, 0x44	; 68
    63b0:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    63b4:	dc 01       	movw	r26, r24
    63b6:	cb 01       	movw	r24, r22
    63b8:	f8 01       	movw	r30, r16
    63ba:	80 83       	st	Z, r24
    63bc:	91 83       	std	Z+1, r25	; 0x01
    63be:	a2 83       	std	Z+2, r26	; 0x02
    63c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    63c2:	fe 01       	movw	r30, r28
    63c4:	ff 96       	adiw	r30, 0x3f	; 63
    63c6:	60 81       	ld	r22, Z
    63c8:	71 81       	ldd	r23, Z+1	; 0x01
    63ca:	82 81       	ldd	r24, Z+2	; 0x02
    63cc:	93 81       	ldd	r25, Z+3	; 0x03
    63ce:	20 e0       	ldi	r18, 0x00	; 0
    63d0:	30 e0       	ldi	r19, 0x00	; 0
    63d2:	40 e8       	ldi	r20, 0x80	; 128
    63d4:	5f e3       	ldi	r21, 0x3F	; 63
    63d6:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    63da:	88 23       	and	r24, r24
    63dc:	2c f4       	brge	.+10     	; 0x63e8 <main+0xc52>
		__ticks = 1;
    63de:	81 e0       	ldi	r24, 0x01	; 1
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	9e af       	std	Y+62, r25	; 0x3e
    63e4:	8d af       	std	Y+61, r24	; 0x3d
    63e6:	46 c0       	rjmp	.+140    	; 0x6474 <main+0xcde>
	else if (__tmp > 65535)
    63e8:	fe 01       	movw	r30, r28
    63ea:	ff 96       	adiw	r30, 0x3f	; 63
    63ec:	60 81       	ld	r22, Z
    63ee:	71 81       	ldd	r23, Z+1	; 0x01
    63f0:	82 81       	ldd	r24, Z+2	; 0x02
    63f2:	93 81       	ldd	r25, Z+3	; 0x03
    63f4:	20 e0       	ldi	r18, 0x00	; 0
    63f6:	3f ef       	ldi	r19, 0xFF	; 255
    63f8:	4f e7       	ldi	r20, 0x7F	; 127
    63fa:	57 e4       	ldi	r21, 0x47	; 71
    63fc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    6400:	18 16       	cp	r1, r24
    6402:	64 f5       	brge	.+88     	; 0x645c <main+0xcc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6404:	fe 01       	movw	r30, r28
    6406:	ed 5b       	subi	r30, 0xBD	; 189
    6408:	ff 4f       	sbci	r31, 0xFF	; 255
    640a:	60 81       	ld	r22, Z
    640c:	71 81       	ldd	r23, Z+1	; 0x01
    640e:	82 81       	ldd	r24, Z+2	; 0x02
    6410:	93 81       	ldd	r25, Z+3	; 0x03
    6412:	20 e0       	ldi	r18, 0x00	; 0
    6414:	30 e0       	ldi	r19, 0x00	; 0
    6416:	40 e2       	ldi	r20, 0x20	; 32
    6418:	51 e4       	ldi	r21, 0x41	; 65
    641a:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    641e:	dc 01       	movw	r26, r24
    6420:	cb 01       	movw	r24, r22
    6422:	bc 01       	movw	r22, r24
    6424:	cd 01       	movw	r24, r26
    6426:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    642a:	dc 01       	movw	r26, r24
    642c:	cb 01       	movw	r24, r22
    642e:	9e af       	std	Y+62, r25	; 0x3e
    6430:	8d af       	std	Y+61, r24	; 0x3d
    6432:	0f c0       	rjmp	.+30     	; 0x6452 <main+0xcbc>
    6434:	88 ec       	ldi	r24, 0xC8	; 200
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	9c af       	std	Y+60, r25	; 0x3c
    643a:	8b af       	std	Y+59, r24	; 0x3b
    643c:	8b ad       	ldd	r24, Y+59	; 0x3b
    643e:	9c ad       	ldd	r25, Y+60	; 0x3c
    6440:	01 97       	sbiw	r24, 0x01	; 1
    6442:	f1 f7       	brne	.-4      	; 0x6440 <main+0xcaa>
    6444:	9c af       	std	Y+60, r25	; 0x3c
    6446:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6448:	8d ad       	ldd	r24, Y+61	; 0x3d
    644a:	9e ad       	ldd	r25, Y+62	; 0x3e
    644c:	01 97       	sbiw	r24, 0x01	; 1
    644e:	9e af       	std	Y+62, r25	; 0x3e
    6450:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6452:	8d ad       	ldd	r24, Y+61	; 0x3d
    6454:	9e ad       	ldd	r25, Y+62	; 0x3e
    6456:	00 97       	sbiw	r24, 0x00	; 0
    6458:	69 f7       	brne	.-38     	; 0x6434 <main+0xc9e>
    645a:	16 c0       	rjmp	.+44     	; 0x6488 <main+0xcf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    645c:	fe 01       	movw	r30, r28
    645e:	ff 96       	adiw	r30, 0x3f	; 63
    6460:	60 81       	ld	r22, Z
    6462:	71 81       	ldd	r23, Z+1	; 0x01
    6464:	82 81       	ldd	r24, Z+2	; 0x02
    6466:	93 81       	ldd	r25, Z+3	; 0x03
    6468:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    646c:	dc 01       	movw	r26, r24
    646e:	cb 01       	movw	r24, r22
    6470:	9e af       	std	Y+62, r25	; 0x3e
    6472:	8d af       	std	Y+61, r24	; 0x3d
    6474:	8d ad       	ldd	r24, Y+61	; 0x3d
    6476:	9e ad       	ldd	r25, Y+62	; 0x3e
    6478:	9a af       	std	Y+58, r25	; 0x3a
    647a:	89 af       	std	Y+57, r24	; 0x39
    647c:	89 ad       	ldd	r24, Y+57	; 0x39
    647e:	9a ad       	ldd	r25, Y+58	; 0x3a
    6480:	01 97       	sbiw	r24, 0x01	; 1
    6482:	f1 f7       	brne	.-4      	; 0x6480 <main+0xcea>
    6484:	9a af       	std	Y+58, r25	; 0x3a
    6486:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(200);
						CLCD_voidGoToX_Y(CLCD_ROW2 , Local_u8Password_LCD_Position);
    6488:	fe 01       	movw	r30, r28
    648a:	e1 56       	subi	r30, 0x61	; 97
    648c:	ff 4f       	sbci	r31, 0xFF	; 255
    648e:	82 e0       	ldi	r24, 0x02	; 2
    6490:	60 81       	ld	r22, Z
    6492:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
						CLCD_voidSendCharacter('*'); // Displaying a * in the first Digit place
    6496:	8a e2       	ldi	r24, 0x2A	; 42
    6498:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
						Local_u8Password_LCD_Position++; // Increasing to points to the position of next digit on the LCD
    649c:	de 01       	movw	r26, r28
    649e:	a1 56       	subi	r26, 0x61	; 97
    64a0:	bf 4f       	sbci	r27, 0xFF	; 255
    64a2:	fe 01       	movw	r30, r28
    64a4:	e1 56       	subi	r30, 0x61	; 97
    64a6:	ff 4f       	sbci	r31, 0xFF	; 255
    64a8:	80 81       	ld	r24, Z
    64aa:	8f 5f       	subi	r24, 0xFF	; 255
    64ac:	8c 93       	st	X, r24
						Local_u8KeypadpressedValue = 0;
    64ae:	fe 01       	movw	r30, r28
    64b0:	e2 56       	subi	r30, 0x62	; 98
    64b2:	ff 4f       	sbci	r31, 0xFF	; 255
    64b4:	10 82       	st	Z, r1
					CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1); // Go to the first Position in the LCD
					CLCD_voidSendString( (u8*)"Enter Pass code" ); // Sending a message that the user should Set password for the system
					CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1); // Go to the next line in the LCD
					CLCD_voidSendString( (u8*)"Password:" ); // Waiting from the user to Enter the Password to be set to this System

					for( Local_u8LoopIterator = 0; Local_u8LoopIterator < PASS_LENGHTH ; Local_u8LoopIterator++ )
    64b6:	de 01       	movw	r26, r28
    64b8:	a0 56       	subi	r26, 0x60	; 96
    64ba:	bf 4f       	sbci	r27, 0xFF	; 255
    64bc:	fe 01       	movw	r30, r28
    64be:	e0 56       	subi	r30, 0x60	; 96
    64c0:	ff 4f       	sbci	r31, 0xFF	; 255
    64c2:	80 81       	ld	r24, Z
    64c4:	8f 5f       	subi	r24, 0xFF	; 255
    64c6:	8c 93       	st	X, r24
    64c8:	fe 01       	movw	r30, r28
    64ca:	e0 56       	subi	r30, 0x60	; 96
    64cc:	ff 4f       	sbci	r31, 0xFF	; 255
    64ce:	80 81       	ld	r24, Z
    64d0:	84 30       	cpi	r24, 0x04	; 4
    64d2:	08 f4       	brcc	.+2      	; 0x64d6 <main+0xd40>
    64d4:	2a cf       	rjmp	.-428    	; 0x632a <main+0xb94>
						CLCD_voidGoToX_Y(CLCD_ROW2 , Local_u8Password_LCD_Position);
						CLCD_voidSendCharacter('*'); // Displaying a * in the first Digit place
						Local_u8Password_LCD_Position++; // Increasing to points to the position of next digit on the LCD
						Local_u8KeypadpressedValue = 0;
					}
					EEPROM_voidReadBlock(BASE_ADDRESS_PASSWORD , PASS_LENGHTH,local_arrSavedPassword); // Read the Saved Password in the memory
    64d6:	9e 01       	movw	r18, r28
    64d8:	28 55       	subi	r18, 0x58	; 88
    64da:	3f 4f       	sbci	r19, 0xFF	; 255
    64dc:	84 e6       	ldi	r24, 0x64	; 100
    64de:	90 e0       	ldi	r25, 0x00	; 0
    64e0:	64 e0       	ldi	r22, 0x04	; 4
    64e2:	a9 01       	movw	r20, r18
    64e4:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <EEPROM_voidReadBlock>
					Local_u8passwordCheck = Login_u8CheckPassword(local_arrSavedPassword , Local_arrEnteredpassword , PASS_LENGHTH);
    64e8:	ce 01       	movw	r24, r28
    64ea:	88 55       	subi	r24, 0x58	; 88
    64ec:	9f 4f       	sbci	r25, 0xFF	; 255
    64ee:	9e 01       	movw	r18, r28
    64f0:	2c 55       	subi	r18, 0x5C	; 92
    64f2:	3f 4f       	sbci	r19, 0xFF	; 255
    64f4:	b9 01       	movw	r22, r18
    64f6:	44 e0       	ldi	r20, 0x04	; 4
    64f8:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <Login_u8CheckPassword>
    64fc:	fe 01       	movw	r30, r28
    64fe:	e3 56       	subi	r30, 0x63	; 99
    6500:	ff 4f       	sbci	r31, 0xFF	; 255
    6502:	80 83       	st	Z, r24

					if(Local_u8passwordCheck == PASSWORD_CORRECT) // Checking if the password is correct or not
    6504:	fe 01       	movw	r30, r28
    6506:	e3 56       	subi	r30, 0x63	; 99
    6508:	ff 4f       	sbci	r31, 0xFF	; 255
    650a:	80 81       	ld	r24, Z
    650c:	8f 3f       	cpi	r24, 0xFF	; 255
    650e:	09 f0       	breq	.+2      	; 0x6512 <main+0xd7c>
    6510:	99 c0       	rjmp	.+306    	; 0x6644 <main+0xeae>
					{
						CLCD_voidClearScreen(); // Clear the screen
    6512:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
						CLCD_voidGoToX_Y(CLCD_ROW1 ,  CLCD_COL1); // going to the first position in the LCD
    6516:	81 e0       	ldi	r24, 0x01	; 1
    6518:	61 e0       	ldi	r22, 0x01	; 1
    651a:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
						CLCD_voidSendString((u8*)"Password Correct"); // Displaying a message that the password is correct
    651e:	82 ee       	ldi	r24, 0xE2	; 226
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
						CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1);
    6526:	82 e0       	ldi	r24, 0x02	; 2
    6528:	61 e0       	ldi	r22, 0x01	; 1
    652a:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
						CLCD_voidSendString((u8*)"Welcome.."); // Welcoming the user
    652e:	83 ef       	ldi	r24, 0xF3	; 243
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>

						Local_u8Menu = MAIN_WINDOW;  // Set the Mode to the main Window of the System
    6536:	fe 01       	movw	r30, r28
    6538:	ee 55       	subi	r30, 0x5E	; 94
    653a:	ff 4f       	sbci	r31, 0xFF	; 255
    653c:	80 e3       	ldi	r24, 0x30	; 48
    653e:	80 83       	st	Z, r24

						APP_voidClearArray(Local_arrEnteredpassword , PASS_LENGHTH); // Clear the array and return to the initial state
    6540:	ce 01       	movw	r24, r28
    6542:	8c 55       	subi	r24, 0x5C	; 92
    6544:	9f 4f       	sbci	r25, 0xFF	; 255
    6546:	64 e0       	ldi	r22, 0x04	; 4
    6548:	0e 94 9c 2b 	call	0x5738	; 0x5738 <APP_voidClearArray>
						Local_u8KeypadpressedValue = NOT_PRESSED;     // reset the variable to the initial value
    654c:	fe 01       	movw	r30, r28
    654e:	e2 56       	subi	r30, 0x62	; 98
    6550:	ff 4f       	sbci	r31, 0xFF	; 255
    6552:	10 82       	st	Z, r1
						Local_u8Password_LCD_Position = 10; // reset the variable to the initial value
    6554:	fe 01       	movw	r30, r28
    6556:	e1 56       	subi	r30, 0x61	; 97
    6558:	ff 4f       	sbci	r31, 0xFF	; 255
    655a:	8a e0       	ldi	r24, 0x0A	; 10
    655c:	80 83       	st	Z, r24
    655e:	80 e0       	ldi	r24, 0x00	; 0
    6560:	90 e0       	ldi	r25, 0x00	; 0
    6562:	aa e7       	ldi	r26, 0x7A	; 122
    6564:	b4 e4       	ldi	r27, 0x44	; 68
    6566:	8d ab       	std	Y+53, r24	; 0x35
    6568:	9e ab       	std	Y+54, r25	; 0x36
    656a:	af ab       	std	Y+55, r26	; 0x37
    656c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    656e:	6d a9       	ldd	r22, Y+53	; 0x35
    6570:	7e a9       	ldd	r23, Y+54	; 0x36
    6572:	8f a9       	ldd	r24, Y+55	; 0x37
    6574:	98 ad       	ldd	r25, Y+56	; 0x38
    6576:	20 e0       	ldi	r18, 0x00	; 0
    6578:	30 e0       	ldi	r19, 0x00	; 0
    657a:	4a ef       	ldi	r20, 0xFA	; 250
    657c:	54 e4       	ldi	r21, 0x44	; 68
    657e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    6582:	dc 01       	movw	r26, r24
    6584:	cb 01       	movw	r24, r22
    6586:	89 ab       	std	Y+49, r24	; 0x31
    6588:	9a ab       	std	Y+50, r25	; 0x32
    658a:	ab ab       	std	Y+51, r26	; 0x33
    658c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    658e:	69 a9       	ldd	r22, Y+49	; 0x31
    6590:	7a a9       	ldd	r23, Y+50	; 0x32
    6592:	8b a9       	ldd	r24, Y+51	; 0x33
    6594:	9c a9       	ldd	r25, Y+52	; 0x34
    6596:	20 e0       	ldi	r18, 0x00	; 0
    6598:	30 e0       	ldi	r19, 0x00	; 0
    659a:	40 e8       	ldi	r20, 0x80	; 128
    659c:	5f e3       	ldi	r21, 0x3F	; 63
    659e:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    65a2:	88 23       	and	r24, r24
    65a4:	2c f4       	brge	.+10     	; 0x65b0 <main+0xe1a>
		__ticks = 1;
    65a6:	81 e0       	ldi	r24, 0x01	; 1
    65a8:	90 e0       	ldi	r25, 0x00	; 0
    65aa:	98 ab       	std	Y+48, r25	; 0x30
    65ac:	8f a7       	std	Y+47, r24	; 0x2f
    65ae:	3f c0       	rjmp	.+126    	; 0x662e <main+0xe98>
	else if (__tmp > 65535)
    65b0:	69 a9       	ldd	r22, Y+49	; 0x31
    65b2:	7a a9       	ldd	r23, Y+50	; 0x32
    65b4:	8b a9       	ldd	r24, Y+51	; 0x33
    65b6:	9c a9       	ldd	r25, Y+52	; 0x34
    65b8:	20 e0       	ldi	r18, 0x00	; 0
    65ba:	3f ef       	ldi	r19, 0xFF	; 255
    65bc:	4f e7       	ldi	r20, 0x7F	; 127
    65be:	57 e4       	ldi	r21, 0x47	; 71
    65c0:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    65c4:	18 16       	cp	r1, r24
    65c6:	4c f5       	brge	.+82     	; 0x661a <main+0xe84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65c8:	6d a9       	ldd	r22, Y+53	; 0x35
    65ca:	7e a9       	ldd	r23, Y+54	; 0x36
    65cc:	8f a9       	ldd	r24, Y+55	; 0x37
    65ce:	98 ad       	ldd	r25, Y+56	; 0x38
    65d0:	20 e0       	ldi	r18, 0x00	; 0
    65d2:	30 e0       	ldi	r19, 0x00	; 0
    65d4:	40 e2       	ldi	r20, 0x20	; 32
    65d6:	51 e4       	ldi	r21, 0x41	; 65
    65d8:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    65dc:	dc 01       	movw	r26, r24
    65de:	cb 01       	movw	r24, r22
    65e0:	bc 01       	movw	r22, r24
    65e2:	cd 01       	movw	r24, r26
    65e4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    65e8:	dc 01       	movw	r26, r24
    65ea:	cb 01       	movw	r24, r22
    65ec:	98 ab       	std	Y+48, r25	; 0x30
    65ee:	8f a7       	std	Y+47, r24	; 0x2f
    65f0:	0f c0       	rjmp	.+30     	; 0x6610 <main+0xe7a>
    65f2:	88 ec       	ldi	r24, 0xC8	; 200
    65f4:	90 e0       	ldi	r25, 0x00	; 0
    65f6:	9e a7       	std	Y+46, r25	; 0x2e
    65f8:	8d a7       	std	Y+45, r24	; 0x2d
    65fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    65fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    65fe:	01 97       	sbiw	r24, 0x01	; 1
    6600:	f1 f7       	brne	.-4      	; 0x65fe <main+0xe68>
    6602:	9e a7       	std	Y+46, r25	; 0x2e
    6604:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6606:	8f a5       	ldd	r24, Y+47	; 0x2f
    6608:	98 a9       	ldd	r25, Y+48	; 0x30
    660a:	01 97       	sbiw	r24, 0x01	; 1
    660c:	98 ab       	std	Y+48, r25	; 0x30
    660e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6610:	8f a5       	ldd	r24, Y+47	; 0x2f
    6612:	98 a9       	ldd	r25, Y+48	; 0x30
    6614:	00 97       	sbiw	r24, 0x00	; 0
    6616:	69 f7       	brne	.-38     	; 0x65f2 <main+0xe5c>
    6618:	c9 c0       	rjmp	.+402    	; 0x67ac <main+0x1016>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    661a:	69 a9       	ldd	r22, Y+49	; 0x31
    661c:	7a a9       	ldd	r23, Y+50	; 0x32
    661e:	8b a9       	ldd	r24, Y+51	; 0x33
    6620:	9c a9       	ldd	r25, Y+52	; 0x34
    6622:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6626:	dc 01       	movw	r26, r24
    6628:	cb 01       	movw	r24, r22
    662a:	98 ab       	std	Y+48, r25	; 0x30
    662c:	8f a7       	std	Y+47, r24	; 0x2f
    662e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6630:	98 a9       	ldd	r25, Y+48	; 0x30
    6632:	9c a7       	std	Y+44, r25	; 0x2c
    6634:	8b a7       	std	Y+43, r24	; 0x2b
    6636:	8b a5       	ldd	r24, Y+43	; 0x2b
    6638:	9c a5       	ldd	r25, Y+44	; 0x2c
    663a:	01 97       	sbiw	r24, 0x01	; 1
    663c:	f1 f7       	brne	.-4      	; 0x663a <main+0xea4>
    663e:	9c a7       	std	Y+44, r25	; 0x2c
    6640:	8b a7       	std	Y+43, r24	; 0x2b
    6642:	b4 c0       	rjmp	.+360    	; 0x67ac <main+0x1016>
						_delay_ms(1000); // halt the processor for 1 second
						break; // break the loop as the password is correct
					}
					else if (Local_u8passwordCheck == PASSWORD_INCORRECT )
    6644:	fe 01       	movw	r30, r28
    6646:	e3 56       	subi	r30, 0x63	; 99
    6648:	ff 4f       	sbci	r31, 0xFF	; 255
    664a:	80 81       	ld	r24, Z
    664c:	8f 30       	cpi	r24, 0x0F	; 15
    664e:	09 f0       	breq	.+2      	; 0x6652 <main+0xebc>
    6650:	a6 c0       	rjmp	.+332    	; 0x679e <main+0x1008>
					{
						Local_u8NumberOfTries++; // the password is wrong so decrement the remaining number of tries
    6652:	de 01       	movw	r26, r28
    6654:	a4 56       	subi	r26, 0x64	; 100
    6656:	bf 4f       	sbci	r27, 0xFF	; 255
    6658:	fe 01       	movw	r30, r28
    665a:	e4 56       	subi	r30, 0x64	; 100
    665c:	ff 4f       	sbci	r31, 0xFF	; 255
    665e:	80 81       	ld	r24, Z
    6660:	8f 5f       	subi	r24, 0xFF	; 255
    6662:	8c 93       	st	X, r24
						if( (Local_u8NumberOfTries <= MAX_NUMBER_TRIES-2) )
    6664:	fe 01       	movw	r30, r28
    6666:	e4 56       	subi	r30, 0x64	; 100
    6668:	ff 4f       	sbci	r31, 0xFF	; 255
    666a:	80 81       	ld	r24, Z
    666c:	83 30       	cpi	r24, 0x03	; 3
    666e:	90 f4       	brcc	.+36     	; 0x6694 <main+0xefe>
						{
							CLCD_voidClearScreen();
    6670:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
							CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1);
    6674:	81 e0       	ldi	r24, 0x01	; 1
    6676:	61 e0       	ldi	r22, 0x01	; 1
    6678:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
							CLCD_voidSendString((u8*)"Wrong Password"); // Displaying a message that password is wrong
    667c:	8d ef       	ldi	r24, 0xFD	; 253
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
							CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1);
    6684:	82 e0       	ldi	r24, 0x02	; 2
    6686:	61 e0       	ldi	r22, 0x01	; 1
    6688:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
							CLCD_voidSendString((u8*)"Please Try again"); // Displaying a message to let him try again
    668c:	8c e0       	ldi	r24, 0x0C	; 12
    668e:	91 e0       	ldi	r25, 0x01	; 1
    6690:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
						}
						Local_u8Menu = NO_MODE;
    6694:	fe 01       	movw	r30, r28
    6696:	ee 55       	subi	r30, 0x5E	; 94
    6698:	ff 4f       	sbci	r31, 0xFF	; 255
    669a:	10 82       	st	Z, r1
						APP_voidClearArray(Local_arrEnteredpassword , PASS_LENGHTH);
    669c:	ce 01       	movw	r24, r28
    669e:	8c 55       	subi	r24, 0x5C	; 92
    66a0:	9f 4f       	sbci	r25, 0xFF	; 255
    66a2:	64 e0       	ldi	r22, 0x04	; 4
    66a4:	0e 94 9c 2b 	call	0x5738	; 0x5738 <APP_voidClearArray>
						Local_u8KeypadpressedValue = NOT_PRESSED; // reset the variable to the initial value
    66a8:	fe 01       	movw	r30, r28
    66aa:	e2 56       	subi	r30, 0x62	; 98
    66ac:	ff 4f       	sbci	r31, 0xFF	; 255
    66ae:	10 82       	st	Z, r1
						Local_u8Password_LCD_Position = 10; // reset the variable to the initial value
    66b0:	fe 01       	movw	r30, r28
    66b2:	e1 56       	subi	r30, 0x61	; 97
    66b4:	ff 4f       	sbci	r31, 0xFF	; 255
    66b6:	8a e0       	ldi	r24, 0x0A	; 10
    66b8:	80 83       	st	Z, r24
    66ba:	80 e0       	ldi	r24, 0x00	; 0
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	aa ef       	ldi	r26, 0xFA	; 250
    66c0:	b3 e4       	ldi	r27, 0x43	; 67
    66c2:	8f a3       	std	Y+39, r24	; 0x27
    66c4:	98 a7       	std	Y+40, r25	; 0x28
    66c6:	a9 a7       	std	Y+41, r26	; 0x29
    66c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66ca:	6f a1       	ldd	r22, Y+39	; 0x27
    66cc:	78 a5       	ldd	r23, Y+40	; 0x28
    66ce:	89 a5       	ldd	r24, Y+41	; 0x29
    66d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    66d2:	20 e0       	ldi	r18, 0x00	; 0
    66d4:	30 e0       	ldi	r19, 0x00	; 0
    66d6:	4a ef       	ldi	r20, 0xFA	; 250
    66d8:	54 e4       	ldi	r21, 0x44	; 68
    66da:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    66de:	dc 01       	movw	r26, r24
    66e0:	cb 01       	movw	r24, r22
    66e2:	8b a3       	std	Y+35, r24	; 0x23
    66e4:	9c a3       	std	Y+36, r25	; 0x24
    66e6:	ad a3       	std	Y+37, r26	; 0x25
    66e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    66ea:	6b a1       	ldd	r22, Y+35	; 0x23
    66ec:	7c a1       	ldd	r23, Y+36	; 0x24
    66ee:	8d a1       	ldd	r24, Y+37	; 0x25
    66f0:	9e a1       	ldd	r25, Y+38	; 0x26
    66f2:	20 e0       	ldi	r18, 0x00	; 0
    66f4:	30 e0       	ldi	r19, 0x00	; 0
    66f6:	40 e8       	ldi	r20, 0x80	; 128
    66f8:	5f e3       	ldi	r21, 0x3F	; 63
    66fa:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    66fe:	88 23       	and	r24, r24
    6700:	2c f4       	brge	.+10     	; 0x670c <main+0xf76>
		__ticks = 1;
    6702:	81 e0       	ldi	r24, 0x01	; 1
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	9a a3       	std	Y+34, r25	; 0x22
    6708:	89 a3       	std	Y+33, r24	; 0x21
    670a:	3f c0       	rjmp	.+126    	; 0x678a <main+0xff4>
	else if (__tmp > 65535)
    670c:	6b a1       	ldd	r22, Y+35	; 0x23
    670e:	7c a1       	ldd	r23, Y+36	; 0x24
    6710:	8d a1       	ldd	r24, Y+37	; 0x25
    6712:	9e a1       	ldd	r25, Y+38	; 0x26
    6714:	20 e0       	ldi	r18, 0x00	; 0
    6716:	3f ef       	ldi	r19, 0xFF	; 255
    6718:	4f e7       	ldi	r20, 0x7F	; 127
    671a:	57 e4       	ldi	r21, 0x47	; 71
    671c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    6720:	18 16       	cp	r1, r24
    6722:	4c f5       	brge	.+82     	; 0x6776 <main+0xfe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6724:	6f a1       	ldd	r22, Y+39	; 0x27
    6726:	78 a5       	ldd	r23, Y+40	; 0x28
    6728:	89 a5       	ldd	r24, Y+41	; 0x29
    672a:	9a a5       	ldd	r25, Y+42	; 0x2a
    672c:	20 e0       	ldi	r18, 0x00	; 0
    672e:	30 e0       	ldi	r19, 0x00	; 0
    6730:	40 e2       	ldi	r20, 0x20	; 32
    6732:	51 e4       	ldi	r21, 0x41	; 65
    6734:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    6738:	dc 01       	movw	r26, r24
    673a:	cb 01       	movw	r24, r22
    673c:	bc 01       	movw	r22, r24
    673e:	cd 01       	movw	r24, r26
    6740:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6744:	dc 01       	movw	r26, r24
    6746:	cb 01       	movw	r24, r22
    6748:	9a a3       	std	Y+34, r25	; 0x22
    674a:	89 a3       	std	Y+33, r24	; 0x21
    674c:	0f c0       	rjmp	.+30     	; 0x676c <main+0xfd6>
    674e:	88 ec       	ldi	r24, 0xC8	; 200
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	98 a3       	std	Y+32, r25	; 0x20
    6754:	8f 8f       	std	Y+31, r24	; 0x1f
    6756:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6758:	98 a1       	ldd	r25, Y+32	; 0x20
    675a:	01 97       	sbiw	r24, 0x01	; 1
    675c:	f1 f7       	brne	.-4      	; 0x675a <main+0xfc4>
    675e:	98 a3       	std	Y+32, r25	; 0x20
    6760:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6762:	89 a1       	ldd	r24, Y+33	; 0x21
    6764:	9a a1       	ldd	r25, Y+34	; 0x22
    6766:	01 97       	sbiw	r24, 0x01	; 1
    6768:	9a a3       	std	Y+34, r25	; 0x22
    676a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    676c:	89 a1       	ldd	r24, Y+33	; 0x21
    676e:	9a a1       	ldd	r25, Y+34	; 0x22
    6770:	00 97       	sbiw	r24, 0x00	; 0
    6772:	69 f7       	brne	.-38     	; 0x674e <main+0xfb8>
    6774:	14 c0       	rjmp	.+40     	; 0x679e <main+0x1008>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6776:	6b a1       	ldd	r22, Y+35	; 0x23
    6778:	7c a1       	ldd	r23, Y+36	; 0x24
    677a:	8d a1       	ldd	r24, Y+37	; 0x25
    677c:	9e a1       	ldd	r25, Y+38	; 0x26
    677e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6782:	dc 01       	movw	r26, r24
    6784:	cb 01       	movw	r24, r22
    6786:	9a a3       	std	Y+34, r25	; 0x22
    6788:	89 a3       	std	Y+33, r24	; 0x21
    678a:	89 a1       	ldd	r24, Y+33	; 0x21
    678c:	9a a1       	ldd	r25, Y+34	; 0x22
    678e:	9e 8f       	std	Y+30, r25	; 0x1e
    6790:	8d 8f       	std	Y+29, r24	; 0x1d
    6792:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6794:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6796:	01 97       	sbiw	r24, 0x01	; 1
    6798:	f1 f7       	brne	.-4      	; 0x6796 <main+0x1000>
    679a:	9e 8f       	std	Y+30, r25	; 0x1e
    679c:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(500); // halt the processor for 0.5 second
					}
				}while(Local_u8NumberOfTries <MAX_NUMBER_TRIES); // end the loop is the user exceeds the number of tries
    679e:	fe 01       	movw	r30, r28
    67a0:	e4 56       	subi	r30, 0x64	; 100
    67a2:	ff 4f       	sbci	r31, 0xFF	; 255
    67a4:	80 81       	ld	r24, Z
    67a6:	84 30       	cpi	r24, 0x04	; 4
    67a8:	08 f4       	brcc	.+2      	; 0x67ac <main+0x1016>
    67aa:	a8 cd       	rjmp	.-1200   	; 0x62fc <main+0xb66>

				if( Local_u8Menu == NO_MODE)
    67ac:	fe 01       	movw	r30, r28
    67ae:	ee 55       	subi	r30, 0x5E	; 94
    67b0:	ff 4f       	sbci	r31, 0xFF	; 255
    67b2:	80 81       	ld	r24, Z
    67b4:	88 23       	and	r24, r24
    67b6:	31 f4       	brne	.+12     	; 0x67c4 <main+0x102e>
				{
					Local_u8FailedLogin = STD_NOK;
    67b8:	fe 01       	movw	r30, r28
    67ba:	ef 55       	subi	r30, 0x5F	; 95
    67bc:	ff 4f       	sbci	r31, 0xFF	; 255
    67be:	10 82       	st	Z, r1
					CLCD_voidClearScreen(); // Clear the Screen
    67c0:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>

	}
	while(1)
	{

		while( Local_u8Menu == NO_MODE  )
    67c4:	fe 01       	movw	r30, r28
    67c6:	ee 55       	subi	r30, 0x5E	; 94
    67c8:	ff 4f       	sbci	r31, 0xFF	; 255
    67ca:	80 81       	ld	r24, Z
    67cc:	88 23       	and	r24, r24
    67ce:	09 f4       	brne	.+2      	; 0x67d2 <main+0x103c>
    67d0:	8d cc       	rjmp	.-1766   	; 0x60ec <main+0x956>
					CLCD_voidClearScreen(); // Clear the Screen
				}
			}
		}
		/***********************************************************************************/
		switch( Local_u8Menu   )
    67d2:	fe 01       	movw	r30, r28
    67d4:	ee 55       	subi	r30, 0x5E	; 94
    67d6:	ff 4f       	sbci	r31, 0xFF	; 255
    67d8:	80 81       	ld	r24, Z
    67da:	28 2f       	mov	r18, r24
    67dc:	30 e0       	ldi	r19, 0x00	; 0
    67de:	cb 54       	subi	r28, 0x4B	; 75
    67e0:	df 4f       	sbci	r29, 0xFF	; 255
    67e2:	39 83       	std	Y+1, r19	; 0x01
    67e4:	28 83       	st	Y, r18
    67e6:	c5 5b       	subi	r28, 0xB5	; 181
    67e8:	d0 40       	sbci	r29, 0x00	; 0
    67ea:	cb 54       	subi	r28, 0x4B	; 75
    67ec:	df 4f       	sbci	r29, 0xFF	; 255
    67ee:	88 81       	ld	r24, Y
    67f0:	99 81       	ldd	r25, Y+1	; 0x01
    67f2:	c5 5b       	subi	r28, 0xB5	; 181
    67f4:	d0 40       	sbci	r29, 0x00	; 0
    67f6:	84 33       	cpi	r24, 0x34	; 52
    67f8:	91 05       	cpc	r25, r1
    67fa:	09 f4       	brne	.+2      	; 0x67fe <main+0x1068>
    67fc:	ce c0       	rjmp	.+412    	; 0x699a <main+0x1204>
    67fe:	cb 54       	subi	r28, 0x4B	; 75
    6800:	df 4f       	sbci	r29, 0xFF	; 255
    6802:	e8 81       	ld	r30, Y
    6804:	f9 81       	ldd	r31, Y+1	; 0x01
    6806:	c5 5b       	subi	r28, 0xB5	; 181
    6808:	d0 40       	sbci	r29, 0x00	; 0
    680a:	e5 33       	cpi	r30, 0x35	; 53
    680c:	f1 05       	cpc	r31, r1
    680e:	9c f5       	brge	.+102    	; 0x6876 <main+0x10e0>
    6810:	cb 54       	subi	r28, 0x4B	; 75
    6812:	df 4f       	sbci	r29, 0xFF	; 255
    6814:	28 81       	ld	r18, Y
    6816:	39 81       	ldd	r19, Y+1	; 0x01
    6818:	c5 5b       	subi	r28, 0xB5	; 181
    681a:	d0 40       	sbci	r29, 0x00	; 0
    681c:	21 33       	cpi	r18, 0x31	; 49
    681e:	31 05       	cpc	r19, r1
    6820:	09 f4       	brne	.+2      	; 0x6824 <main+0x108e>
    6822:	4d c1       	rjmp	.+666    	; 0x6abe <main+0x1328>
    6824:	cb 54       	subi	r28, 0x4B	; 75
    6826:	df 4f       	sbci	r29, 0xFF	; 255
    6828:	88 81       	ld	r24, Y
    682a:	99 81       	ldd	r25, Y+1	; 0x01
    682c:	c5 5b       	subi	r28, 0xB5	; 181
    682e:	d0 40       	sbci	r29, 0x00	; 0
    6830:	82 33       	cpi	r24, 0x32	; 50
    6832:	91 05       	cpc	r25, r1
    6834:	5c f4       	brge	.+22     	; 0x684c <main+0x10b6>
    6836:	cb 54       	subi	r28, 0x4B	; 75
    6838:	df 4f       	sbci	r29, 0xFF	; 255
    683a:	e8 81       	ld	r30, Y
    683c:	f9 81       	ldd	r31, Y+1	; 0x01
    683e:	c5 5b       	subi	r28, 0xB5	; 181
    6840:	d0 40       	sbci	r29, 0x00	; 0
    6842:	e0 33       	cpi	r30, 0x30	; 48
    6844:	f1 05       	cpc	r31, r1
    6846:	09 f4       	brne	.+2      	; 0x684a <main+0x10b4>
    6848:	53 c0       	rjmp	.+166    	; 0x68f0 <main+0x115a>
    684a:	bc cf       	rjmp	.-136    	; 0x67c4 <main+0x102e>
    684c:	cb 54       	subi	r28, 0x4B	; 75
    684e:	df 4f       	sbci	r29, 0xFF	; 255
    6850:	28 81       	ld	r18, Y
    6852:	39 81       	ldd	r19, Y+1	; 0x01
    6854:	c5 5b       	subi	r28, 0xB5	; 181
    6856:	d0 40       	sbci	r29, 0x00	; 0
    6858:	22 33       	cpi	r18, 0x32	; 50
    685a:	31 05       	cpc	r19, r1
    685c:	09 f4       	brne	.+2      	; 0x6860 <main+0x10ca>
    685e:	3b c1       	rjmp	.+630    	; 0x6ad6 <main+0x1340>
    6860:	cb 54       	subi	r28, 0x4B	; 75
    6862:	df 4f       	sbci	r29, 0xFF	; 255
    6864:	88 81       	ld	r24, Y
    6866:	99 81       	ldd	r25, Y+1	; 0x01
    6868:	c5 5b       	subi	r28, 0xB5	; 181
    686a:	d0 40       	sbci	r29, 0x00	; 0
    686c:	83 33       	cpi	r24, 0x33	; 51
    686e:	91 05       	cpc	r25, r1
    6870:	09 f4       	brne	.+2      	; 0x6874 <main+0x10de>
    6872:	3d c1       	rjmp	.+634    	; 0x6aee <main+0x1358>
    6874:	a7 cf       	rjmp	.-178    	; 0x67c4 <main+0x102e>
    6876:	cb 54       	subi	r28, 0x4B	; 75
    6878:	df 4f       	sbci	r29, 0xFF	; 255
    687a:	e8 81       	ld	r30, Y
    687c:	f9 81       	ldd	r31, Y+1	; 0x01
    687e:	c5 5b       	subi	r28, 0xB5	; 181
    6880:	d0 40       	sbci	r29, 0x00	; 0
    6882:	e7 33       	cpi	r30, 0x37	; 55
    6884:	f1 05       	cpc	r31, r1
    6886:	09 f4       	brne	.+2      	; 0x688a <main+0x10f4>
    6888:	4a c1       	rjmp	.+660    	; 0x6b1e <main+0x1388>
    688a:	cb 54       	subi	r28, 0x4B	; 75
    688c:	df 4f       	sbci	r29, 0xFF	; 255
    688e:	28 81       	ld	r18, Y
    6890:	39 81       	ldd	r19, Y+1	; 0x01
    6892:	c5 5b       	subi	r28, 0xB5	; 181
    6894:	d0 40       	sbci	r29, 0x00	; 0
    6896:	28 33       	cpi	r18, 0x38	; 56
    6898:	31 05       	cpc	r19, r1
    689a:	ac f4       	brge	.+42     	; 0x68c6 <main+0x1130>
    689c:	cb 54       	subi	r28, 0x4B	; 75
    689e:	df 4f       	sbci	r29, 0xFF	; 255
    68a0:	88 81       	ld	r24, Y
    68a2:	99 81       	ldd	r25, Y+1	; 0x01
    68a4:	c5 5b       	subi	r28, 0xB5	; 181
    68a6:	d0 40       	sbci	r29, 0x00	; 0
    68a8:	85 33       	cpi	r24, 0x35	; 53
    68aa:	91 05       	cpc	r25, r1
    68ac:	09 f4       	brne	.+2      	; 0x68b0 <main+0x111a>
    68ae:	2b c1       	rjmp	.+598    	; 0x6b06 <main+0x1370>
    68b0:	cb 54       	subi	r28, 0x4B	; 75
    68b2:	df 4f       	sbci	r29, 0xFF	; 255
    68b4:	e8 81       	ld	r30, Y
    68b6:	f9 81       	ldd	r31, Y+1	; 0x01
    68b8:	c5 5b       	subi	r28, 0xB5	; 181
    68ba:	d0 40       	sbci	r29, 0x00	; 0
    68bc:	e6 33       	cpi	r30, 0x36	; 54
    68be:	f1 05       	cpc	r31, r1
    68c0:	09 f4       	brne	.+2      	; 0x68c4 <main+0x112e>
    68c2:	c0 c0       	rjmp	.+384    	; 0x6a44 <main+0x12ae>
    68c4:	7f cf       	rjmp	.-258    	; 0x67c4 <main+0x102e>
    68c6:	cb 54       	subi	r28, 0x4B	; 75
    68c8:	df 4f       	sbci	r29, 0xFF	; 255
    68ca:	28 81       	ld	r18, Y
    68cc:	39 81       	ldd	r19, Y+1	; 0x01
    68ce:	c5 5b       	subi	r28, 0xB5	; 181
    68d0:	d0 40       	sbci	r29, 0x00	; 0
    68d2:	29 33       	cpi	r18, 0x39	; 57
    68d4:	31 05       	cpc	r19, r1
    68d6:	09 f4       	brne	.+2      	; 0x68da <main+0x1144>
    68d8:	2e c1       	rjmp	.+604    	; 0x6b36 <main+0x13a0>
    68da:	cb 54       	subi	r28, 0x4B	; 75
    68dc:	df 4f       	sbci	r29, 0xFF	; 255
    68de:	88 81       	ld	r24, Y
    68e0:	99 81       	ldd	r25, Y+1	; 0x01
    68e2:	c5 5b       	subi	r28, 0xB5	; 181
    68e4:	d0 40       	sbci	r29, 0x00	; 0
    68e6:	81 34       	cpi	r24, 0x41	; 65
    68e8:	91 05       	cpc	r25, r1
    68ea:	09 f4       	brne	.+2      	; 0x68ee <main+0x1158>
    68ec:	9e c2       	rjmp	.+1340   	; 0x6e2a <main+0x1694>
    68ee:	6a cf       	rjmp	.-300    	; 0x67c4 <main+0x102e>
		case MAIN_WINDOW:
			/*
			 * Main Window : has the first 3 rooms and the more Option
			 * it just read the user choice and save it in Local_u8menu to display the choice equivalent Menu
			 * */
			CLCD_voidClearScreen(); // Clear the Screen
    68f0:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
			do {
				CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1); // Go to the start of the LCD
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	61 e0       	ldi	r22, 0x01	; 1
    68f8:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
				CLCD_voidSendString((u8*)"1:Room1  2:Room2"); // Displaying the Options
    68fc:	8d e1       	ldi	r24, 0x1D	; 29
    68fe:	91 e0       	ldi	r25, 0x01	; 1
    6900:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
				CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1);
    6904:	82 e0       	ldi	r24, 0x02	; 2
    6906:	61 e0       	ldi	r22, 0x01	; 1
    6908:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
				CLCD_voidSendString((u8*)"3:Room3  4:More"); // Displaying the remaining Options
    690c:	8e e2       	ldi	r24, 0x2E	; 46
    690e:	91 e0       	ldi	r25, 0x01	; 1
    6910:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
				Local_u8KeypadpressedValue = KEYPAD_voidGetPressedButton(); // Read from the KeyPad
    6914:	0e 94 57 2a 	call	0x54ae	; 0x54ae <KEYPAD_voidGetPressedButton>
    6918:	fe 01       	movw	r30, r28
    691a:	e2 56       	subi	r30, 0x62	; 98
    691c:	ff 4f       	sbci	r31, 0xFF	; 255
    691e:	80 83       	st	Z, r24
				/* do not break the loop until the user Enters accepted choice  */
			}while(Local_u8KeypadpressedValue < ROOM1_WINDOW || Local_u8KeypadpressedValue>MORE_MENU);
    6920:	fe 01       	movw	r30, r28
    6922:	e2 56       	subi	r30, 0x62	; 98
    6924:	ff 4f       	sbci	r31, 0xFF	; 255
    6926:	80 81       	ld	r24, Z
    6928:	81 33       	cpi	r24, 0x31	; 49
    692a:	20 f3       	brcs	.-56     	; 0x68f4 <main+0x115e>
    692c:	fe 01       	movw	r30, r28
    692e:	e2 56       	subi	r30, 0x62	; 98
    6930:	ff 4f       	sbci	r31, 0xFF	; 255
    6932:	80 81       	ld	r24, Z
    6934:	85 33       	cpi	r24, 0x35	; 53
    6936:	f0 f6       	brcc	.-68     	; 0x68f4 <main+0x115e>

			if( Local_u8KeypadpressedValue == ROOM1_WINDOW )
    6938:	fe 01       	movw	r30, r28
    693a:	e2 56       	subi	r30, 0x62	; 98
    693c:	ff 4f       	sbci	r31, 0xFF	; 255
    693e:	80 81       	ld	r24, Z
    6940:	81 33       	cpi	r24, 0x31	; 49
    6942:	31 f4       	brne	.+12     	; 0x6950 <main+0x11ba>
			{
				Local_u8Menu = ROOM1_WINDOW; // Save the user choice . when while (1) repeat the code it will show the Room1 Menu
    6944:	fe 01       	movw	r30, r28
    6946:	ee 55       	subi	r30, 0x5E	; 94
    6948:	ff 4f       	sbci	r31, 0xFF	; 255
    694a:	81 e3       	ldi	r24, 0x31	; 49
    694c:	80 83       	st	Z, r24
    694e:	3a cf       	rjmp	.-396    	; 0x67c4 <main+0x102e>
			}
			else if( Local_u8KeypadpressedValue == ROOM2_WINDOW )
    6950:	fe 01       	movw	r30, r28
    6952:	e2 56       	subi	r30, 0x62	; 98
    6954:	ff 4f       	sbci	r31, 0xFF	; 255
    6956:	80 81       	ld	r24, Z
    6958:	82 33       	cpi	r24, 0x32	; 50
    695a:	31 f4       	brne	.+12     	; 0x6968 <main+0x11d2>
			{
				Local_u8Menu = ROOM2_WINDOW; // Save the user choice . when while (1) repeat the code it will show the Room2 Menu
    695c:	fe 01       	movw	r30, r28
    695e:	ee 55       	subi	r30, 0x5E	; 94
    6960:	ff 4f       	sbci	r31, 0xFF	; 255
    6962:	82 e3       	ldi	r24, 0x32	; 50
    6964:	80 83       	st	Z, r24
    6966:	2e cf       	rjmp	.-420    	; 0x67c4 <main+0x102e>
			}
			else if( Local_u8KeypadpressedValue == ROOM3_WINDOW )
    6968:	fe 01       	movw	r30, r28
    696a:	e2 56       	subi	r30, 0x62	; 98
    696c:	ff 4f       	sbci	r31, 0xFF	; 255
    696e:	80 81       	ld	r24, Z
    6970:	83 33       	cpi	r24, 0x33	; 51
    6972:	31 f4       	brne	.+12     	; 0x6980 <main+0x11ea>
			{
				Local_u8Menu = ROOM3_WINDOW; // Save the user choice . when while (1) repeat the code it will show the Room3 Menu
    6974:	fe 01       	movw	r30, r28
    6976:	ee 55       	subi	r30, 0x5E	; 94
    6978:	ff 4f       	sbci	r31, 0xFF	; 255
    697a:	83 e3       	ldi	r24, 0x33	; 51
    697c:	80 83       	st	Z, r24
    697e:	22 cf       	rjmp	.-444    	; 0x67c4 <main+0x102e>
			}
			else if( Local_u8KeypadpressedValue == MORE_MENU )
    6980:	fe 01       	movw	r30, r28
    6982:	e2 56       	subi	r30, 0x62	; 98
    6984:	ff 4f       	sbci	r31, 0xFF	; 255
    6986:	80 81       	ld	r24, Z
    6988:	84 33       	cpi	r24, 0x34	; 52
    698a:	09 f0       	breq	.+2      	; 0x698e <main+0x11f8>
    698c:	1b cf       	rjmp	.-458    	; 0x67c4 <main+0x102e>
			{
				Local_u8Menu = MORE_MENU;// Save the user choice . when while (1) repeat the code it will show the More Menu
    698e:	fe 01       	movw	r30, r28
    6990:	ee 55       	subi	r30, 0x5E	; 94
    6992:	ff 4f       	sbci	r31, 0xFF	; 255
    6994:	84 e3       	ldi	r24, 0x34	; 52
    6996:	80 83       	st	Z, r24
    6998:	15 cf       	rjmp	.-470    	; 0x67c4 <main+0x102e>
			}

			break;
		case MORE_MENU :
			CLCD_voidClearScreen(); // The user has Chosen from the main Window to Display the More menu
    699a:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
			/*
			 * The more Window Displays the options Room4 , TV, AIR Conditioner and return to Main Window
			 * */
			do
			{
				CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1); // return to the beginning of the LCD
    699e:	81 e0       	ldi	r24, 0x01	; 1
    69a0:	61 e0       	ldi	r22, 0x01	; 1
    69a2:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
				CLCD_voidSendString((u8*)"1:Room4  2:TV"); // Displaying the Options of the More Window
    69a6:	8e e3       	ldi	r24, 0x3E	; 62
    69a8:	91 e0       	ldi	r25, 0x01	; 1
    69aa:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
				CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1); // Go to the Next Line in the LCD
    69ae:	82 e0       	ldi	r24, 0x02	; 2
    69b0:	61 e0       	ldi	r22, 0x01	; 1
    69b2:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
				CLCD_voidSendString((u8*)"3:AIR_COND 4:RET"); //Displaying the Options of the More Window
    69b6:	8c e4       	ldi	r24, 0x4C	; 76
    69b8:	91 e0       	ldi	r25, 0x01	; 1
    69ba:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>

				Local_u8KeypadpressedValue = KEYPAD_voidGetPressedButton(); // read the Pressed value from the KeyPad
    69be:	0e 94 57 2a 	call	0x54ae	; 0x54ae <KEYPAD_voidGetPressedButton>
    69c2:	fe 01       	movw	r30, r28
    69c4:	e2 56       	subi	r30, 0x62	; 98
    69c6:	ff 4f       	sbci	r31, 0xFF	; 255
    69c8:	80 83       	st	Z, r24

				/* Repeat the Loop until the user press a valid option */
			}while(Local_u8KeypadpressedValue < ROOM4_WINDOW || Local_u8KeypadpressedValue>RET);
    69ca:	fe 01       	movw	r30, r28
    69cc:	e2 56       	subi	r30, 0x62	; 98
    69ce:	ff 4f       	sbci	r31, 0xFF	; 255
    69d0:	80 81       	ld	r24, Z
    69d2:	81 33       	cpi	r24, 0x31	; 49
    69d4:	20 f3       	brcs	.-56     	; 0x699e <main+0x1208>
    69d6:	fe 01       	movw	r30, r28
    69d8:	e2 56       	subi	r30, 0x62	; 98
    69da:	ff 4f       	sbci	r31, 0xFF	; 255
    69dc:	80 81       	ld	r24, Z
    69de:	85 33       	cpi	r24, 0x35	; 53
    69e0:	f0 f6       	brcc	.-68     	; 0x699e <main+0x1208>

			if(Local_u8KeypadpressedValue == ROOM4_WINDOW) // the user wants to display the Room4 options menu
    69e2:	fe 01       	movw	r30, r28
    69e4:	e2 56       	subi	r30, 0x62	; 98
    69e6:	ff 4f       	sbci	r31, 0xFF	; 255
    69e8:	80 81       	ld	r24, Z
    69ea:	81 33       	cpi	r24, 0x31	; 49
    69ec:	31 f4       	brne	.+12     	; 0x69fa <main+0x1264>
			{
				Local_u8Menu = ROOM4_WINDOW_SEL; // Save the user choice . when while (1) repeat the code it will show the Room4 Menu
    69ee:	fe 01       	movw	r30, r28
    69f0:	ee 55       	subi	r30, 0x5E	; 94
    69f2:	ff 4f       	sbci	r31, 0xFF	; 255
    69f4:	85 e3       	ldi	r24, 0x35	; 53
    69f6:	80 83       	st	Z, r24
    69f8:	e5 ce       	rjmp	.-566    	; 0x67c4 <main+0x102e>
			}
			else if(Local_u8KeypadpressedValue == TV_WINDOW) // the user wants to display the TV options menu
    69fa:	fe 01       	movw	r30, r28
    69fc:	e2 56       	subi	r30, 0x62	; 98
    69fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6a00:	80 81       	ld	r24, Z
    6a02:	82 33       	cpi	r24, 0x32	; 50
    6a04:	31 f4       	brne	.+12     	; 0x6a12 <main+0x127c>
			{
				Local_u8Menu = TV_WINDOW_SEL;// Save the user choice . when while (1) repeat the code it will show the TV Menu
    6a06:	fe 01       	movw	r30, r28
    6a08:	ee 55       	subi	r30, 0x5E	; 94
    6a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a0c:	87 e3       	ldi	r24, 0x37	; 55
    6a0e:	80 83       	st	Z, r24
    6a10:	d9 ce       	rjmp	.-590    	; 0x67c4 <main+0x102e>
			}
			else if(Local_u8KeypadpressedValue == RET) // the user wants to return to the main menu
    6a12:	fe 01       	movw	r30, r28
    6a14:	e2 56       	subi	r30, 0x62	; 98
    6a16:	ff 4f       	sbci	r31, 0xFF	; 255
    6a18:	80 81       	ld	r24, Z
    6a1a:	84 33       	cpi	r24, 0x34	; 52
    6a1c:	31 f4       	brne	.+12     	; 0x6a2a <main+0x1294>
			{
				Local_u8Menu = MAIN_WINDOW; // Save the user choice . when while (1) repeat the code it will return to main Menu
    6a1e:	fe 01       	movw	r30, r28
    6a20:	ee 55       	subi	r30, 0x5E	; 94
    6a22:	ff 4f       	sbci	r31, 0xFF	; 255
    6a24:	80 e3       	ldi	r24, 0x30	; 48
    6a26:	80 83       	st	Z, r24
    6a28:	cd ce       	rjmp	.-614    	; 0x67c4 <main+0x102e>
			}
			else if(Local_u8KeypadpressedValue == COND_WINDOW) // the user wants to display the Air Conditioner options menu
    6a2a:	fe 01       	movw	r30, r28
    6a2c:	e2 56       	subi	r30, 0x62	; 98
    6a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    6a30:	80 81       	ld	r24, Z
    6a32:	83 33       	cpi	r24, 0x33	; 51
    6a34:	09 f0       	breq	.+2      	; 0x6a38 <main+0x12a2>
    6a36:	c6 ce       	rjmp	.-628    	; 0x67c4 <main+0x102e>
			{
				Local_u8Menu = COND_WINDOW_SEL; // Save the user choice . when while (1) repeat the code it will show the Air Conditioner Menu
    6a38:	fe 01       	movw	r30, r28
    6a3a:	ee 55       	subi	r30, 0x5E	; 94
    6a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    6a3e:	86 e3       	ldi	r24, 0x36	; 54
    6a40:	80 83       	st	Z, r24
    6a42:	c0 ce       	rjmp	.-640    	; 0x67c4 <main+0x102e>
			}
			break;

		case COND_WINDOW_SEL : // The user Entered the option to Display the Air conditioner menu
			CLCD_voidClearScreen(); // Clear screen
    6a44:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
			do{

				CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1);
    6a48:	81 e0       	ldi	r24, 0x01	; 1
    6a4a:	61 e0       	ldi	r22, 0x01	; 1
    6a4c:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
				CLCD_voidSendString((u8*)"1:Set Temperature");
    6a50:	8d e5       	ldi	r24, 0x5D	; 93
    6a52:	91 e0       	ldi	r25, 0x01	; 1
    6a54:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
				CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1);
    6a58:	82 e0       	ldi	r24, 0x02	; 2
    6a5a:	61 e0       	ldi	r22, 0x01	; 1
    6a5c:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>
				CLCD_voidSendString((u8*)"2:AIR_COND Ctrl");
    6a60:	8f e6       	ldi	r24, 0x6F	; 111
    6a62:	91 e0       	ldi	r25, 0x01	; 1
    6a64:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
				Local_u8KeypadpressedValue =KEYPAD_voidGetPressedButton();
    6a68:	0e 94 57 2a 	call	0x54ae	; 0x54ae <KEYPAD_voidGetPressedButton>
    6a6c:	fe 01       	movw	r30, r28
    6a6e:	e2 56       	subi	r30, 0x62	; 98
    6a70:	ff 4f       	sbci	r31, 0xFF	; 255
    6a72:	80 83       	st	Z, r24
			}while(Local_u8KeypadpressedValue < SET_TEMPERATURE || Local_u8KeypadpressedValue > CONTROL_AIR_COND);
    6a74:	fe 01       	movw	r30, r28
    6a76:	e2 56       	subi	r30, 0x62	; 98
    6a78:	ff 4f       	sbci	r31, 0xFF	; 255
    6a7a:	80 81       	ld	r24, Z
    6a7c:	81 33       	cpi	r24, 0x31	; 49
    6a7e:	20 f3       	brcs	.-56     	; 0x6a48 <main+0x12b2>
    6a80:	fe 01       	movw	r30, r28
    6a82:	e2 56       	subi	r30, 0x62	; 98
    6a84:	ff 4f       	sbci	r31, 0xFF	; 255
    6a86:	80 81       	ld	r24, Z
    6a88:	83 33       	cpi	r24, 0x33	; 51
    6a8a:	f0 f6       	brcc	.-68     	; 0x6a48 <main+0x12b2>

			if(Local_u8KeypadpressedValue == SET_TEMPERATURE)
    6a8c:	fe 01       	movw	r30, r28
    6a8e:	e2 56       	subi	r30, 0x62	; 98
    6a90:	ff 4f       	sbci	r31, 0xFF	; 255
    6a92:	80 81       	ld	r24, Z
    6a94:	81 33       	cpi	r24, 0x31	; 49
    6a96:	31 f4       	brne	.+12     	; 0x6aa4 <main+0x130e>
			{
				Local_u8Menu = SET_TEMPERATURE_SEL;
    6a98:	fe 01       	movw	r30, r28
    6a9a:	ee 55       	subi	r30, 0x5E	; 94
    6a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    6a9e:	89 e3       	ldi	r24, 0x39	; 57
    6aa0:	80 83       	st	Z, r24
    6aa2:	90 ce       	rjmp	.-736    	; 0x67c4 <main+0x102e>
			}
			else if(Local_u8KeypadpressedValue == CONTROL_AIR_COND)
    6aa4:	fe 01       	movw	r30, r28
    6aa6:	e2 56       	subi	r30, 0x62	; 98
    6aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aaa:	80 81       	ld	r24, Z
    6aac:	82 33       	cpi	r24, 0x32	; 50
    6aae:	09 f0       	breq	.+2      	; 0x6ab2 <main+0x131c>
    6ab0:	89 ce       	rjmp	.-750    	; 0x67c4 <main+0x102e>
			{
				Local_u8Menu = CONTROL_AIR_COND_SEL;
    6ab2:	fe 01       	movw	r30, r28
    6ab4:	ee 55       	subi	r30, 0x5E	; 94
    6ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ab8:	81 e4       	ldi	r24, 0x41	; 65
    6aba:	80 83       	st	Z, r24
    6abc:	83 ce       	rjmp	.-762    	; 0x67c4 <main+0x102e>
			}
			break;

		case ROOM1_WINDOW :
			APP_voidDisplayMenu(Local_u8Menu);
    6abe:	fe 01       	movw	r30, r28
    6ac0:	ee 55       	subi	r30, 0x5E	; 94
    6ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ac4:	80 81       	ld	r24, Z
    6ac6:	0e 94 bf 2b 	call	0x577e	; 0x577e <APP_voidDisplayMenu>
			Local_u8Menu = MAIN_WINDOW;
    6aca:	fe 01       	movw	r30, r28
    6acc:	ee 55       	subi	r30, 0x5E	; 94
    6ace:	ff 4f       	sbci	r31, 0xFF	; 255
    6ad0:	80 e3       	ldi	r24, 0x30	; 48
    6ad2:	80 83       	st	Z, r24
    6ad4:	77 ce       	rjmp	.-786    	; 0x67c4 <main+0x102e>
			break;
		case ROOM2_WINDOW:
			APP_voidDisplayMenu(Local_u8Menu);
    6ad6:	fe 01       	movw	r30, r28
    6ad8:	ee 55       	subi	r30, 0x5E	; 94
    6ada:	ff 4f       	sbci	r31, 0xFF	; 255
    6adc:	80 81       	ld	r24, Z
    6ade:	0e 94 bf 2b 	call	0x577e	; 0x577e <APP_voidDisplayMenu>
			Local_u8Menu = MAIN_WINDOW;
    6ae2:	fe 01       	movw	r30, r28
    6ae4:	ee 55       	subi	r30, 0x5E	; 94
    6ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ae8:	80 e3       	ldi	r24, 0x30	; 48
    6aea:	80 83       	st	Z, r24
    6aec:	6b ce       	rjmp	.-810    	; 0x67c4 <main+0x102e>
			break;
		case ROOM3_WINDOW :
			APP_voidDisplayMenu(Local_u8Menu);
    6aee:	fe 01       	movw	r30, r28
    6af0:	ee 55       	subi	r30, 0x5E	; 94
    6af2:	ff 4f       	sbci	r31, 0xFF	; 255
    6af4:	80 81       	ld	r24, Z
    6af6:	0e 94 bf 2b 	call	0x577e	; 0x577e <APP_voidDisplayMenu>
			Local_u8Menu = MAIN_WINDOW;
    6afa:	fe 01       	movw	r30, r28
    6afc:	ee 55       	subi	r30, 0x5E	; 94
    6afe:	ff 4f       	sbci	r31, 0xFF	; 255
    6b00:	80 e3       	ldi	r24, 0x30	; 48
    6b02:	80 83       	st	Z, r24
    6b04:	5f ce       	rjmp	.-834    	; 0x67c4 <main+0x102e>
			break;
		case ROOM4_WINDOW_SEL:
			APP_voidDisplayMenu(Local_u8Menu);
    6b06:	fe 01       	movw	r30, r28
    6b08:	ee 55       	subi	r30, 0x5E	; 94
    6b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b0c:	80 81       	ld	r24, Z
    6b0e:	0e 94 bf 2b 	call	0x577e	; 0x577e <APP_voidDisplayMenu>
			Local_u8Menu = MORE_MENU;
    6b12:	fe 01       	movw	r30, r28
    6b14:	ee 55       	subi	r30, 0x5E	; 94
    6b16:	ff 4f       	sbci	r31, 0xFF	; 255
    6b18:	84 e3       	ldi	r24, 0x34	; 52
    6b1a:	80 83       	st	Z, r24
    6b1c:	53 ce       	rjmp	.-858    	; 0x67c4 <main+0x102e>
			break;
		case TV_WINDOW_SEL:
			APP_voidDisplayMenu(Local_u8Menu);
    6b1e:	fe 01       	movw	r30, r28
    6b20:	ee 55       	subi	r30, 0x5E	; 94
    6b22:	ff 4f       	sbci	r31, 0xFF	; 255
    6b24:	80 81       	ld	r24, Z
    6b26:	0e 94 bf 2b 	call	0x577e	; 0x577e <APP_voidDisplayMenu>
			Local_u8Menu = MORE_MENU;
    6b2a:	fe 01       	movw	r30, r28
    6b2c:	ee 55       	subi	r30, 0x5E	; 94
    6b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b30:	84 e3       	ldi	r24, 0x34	; 52
    6b32:	80 83       	st	Z, r24
    6b34:	47 ce       	rjmp	.-882    	; 0x67c4 <main+0x102e>
			break;
		case SET_TEMPERATURE_SEL :
			Local_u8Temperature = 0;
    6b36:	fe 01       	movw	r30, r28
    6b38:	e5 56       	subi	r30, 0x65	; 101
    6b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b3c:	10 82       	st	Z, r1
			CLCD_voidClearScreen();
    6b3e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
			CLCD_voidSendString((u8*)"Set Tepm:__");
    6b42:	8f e7       	ldi	r24, 0x7F	; 127
    6b44:	91 e0       	ldi	r25, 0x01	; 1
    6b46:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
			CLCD_voidSendCharacter(DEGREES_SYMBOL);
    6b4a:	8f ed       	ldi	r24, 0xDF	; 223
    6b4c:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
			CLCD_voidSendCharacter('C');
    6b50:	83 e4       	ldi	r24, 0x43	; 67
    6b52:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
			Local_u8KeypadpressedValue =NOT_PRESSED;
    6b56:	fe 01       	movw	r30, r28
    6b58:	e2 56       	subi	r30, 0x62	; 98
    6b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b5c:	10 82       	st	Z, r1
			Local_u8LoopIterator = 0;
    6b5e:	fe 01       	movw	r30, r28
    6b60:	e0 56       	subi	r30, 0x60	; 96
    6b62:	ff 4f       	sbci	r31, 0xFF	; 255
    6b64:	10 82       	st	Z, r1
			CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL10 );
    6b66:	81 e0       	ldi	r24, 0x01	; 1
    6b68:	6a e0       	ldi	r22, 0x0A	; 10
    6b6a:	0e 94 1c 29 	call	0x5238	; 0x5238 <CLCD_voidGoToX_Y>

			do
			{
				Local_u8KeypadpressedValue = KEYPAD_voidGetPressedButton();
    6b6e:	0e 94 57 2a 	call	0x54ae	; 0x54ae <KEYPAD_voidGetPressedButton>
    6b72:	fe 01       	movw	r30, r28
    6b74:	e2 56       	subi	r30, 0x62	; 98
    6b76:	ff 4f       	sbci	r31, 0xFF	; 255
    6b78:	80 83       	st	Z, r24

			}while(Local_u8KeypadpressedValue <'1' || Local_u8KeypadpressedValue > '9');
    6b7a:	fe 01       	movw	r30, r28
    6b7c:	e2 56       	subi	r30, 0x62	; 98
    6b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b80:	80 81       	ld	r24, Z
    6b82:	81 33       	cpi	r24, 0x31	; 49
    6b84:	a0 f3       	brcs	.-24     	; 0x6b6e <main+0x13d8>
    6b86:	fe 01       	movw	r30, r28
    6b88:	e2 56       	subi	r30, 0x62	; 98
    6b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b8c:	80 81       	ld	r24, Z
    6b8e:	8a 33       	cpi	r24, 0x3A	; 58
    6b90:	70 f7       	brcc	.-36     	; 0x6b6e <main+0x13d8>
			CLCD_voidSendCharacter(Local_u8KeypadpressedValue);
    6b92:	fe 01       	movw	r30, r28
    6b94:	e2 56       	subi	r30, 0x62	; 98
    6b96:	ff 4f       	sbci	r31, 0xFF	; 255
    6b98:	80 81       	ld	r24, Z
    6b9a:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
			Local_u8Temperature = Local_u8Temperature*10 + (Local_u8KeypadpressedValue - '0');
    6b9e:	fe 01       	movw	r30, r28
    6ba0:	e5 56       	subi	r30, 0x65	; 101
    6ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ba4:	80 81       	ld	r24, Z
    6ba6:	88 2f       	mov	r24, r24
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	9c 01       	movw	r18, r24
    6bac:	22 0f       	add	r18, r18
    6bae:	33 1f       	adc	r19, r19
    6bb0:	c9 01       	movw	r24, r18
    6bb2:	88 0f       	add	r24, r24
    6bb4:	99 1f       	adc	r25, r25
    6bb6:	88 0f       	add	r24, r24
    6bb8:	99 1f       	adc	r25, r25
    6bba:	82 0f       	add	r24, r18
    6bbc:	93 1f       	adc	r25, r19
    6bbe:	98 2f       	mov	r25, r24
    6bc0:	fe 01       	movw	r30, r28
    6bc2:	e2 56       	subi	r30, 0x62	; 98
    6bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    6bc6:	80 81       	ld	r24, Z
    6bc8:	89 0f       	add	r24, r25
    6bca:	fe 01       	movw	r30, r28
    6bcc:	e5 56       	subi	r30, 0x65	; 101
    6bce:	ff 4f       	sbci	r31, 0xFF	; 255
    6bd0:	80 53       	subi	r24, 0x30	; 48
    6bd2:	80 83       	st	Z, r24
			Local_u8KeypadpressedValue = NOT_PRESSED;
    6bd4:	fe 01       	movw	r30, r28
    6bd6:	e2 56       	subi	r30, 0x62	; 98
    6bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    6bda:	10 82       	st	Z, r1
			do
			{
				Local_u8KeypadpressedValue = KEYPAD_voidGetPressedButton();
    6bdc:	0e 94 57 2a 	call	0x54ae	; 0x54ae <KEYPAD_voidGetPressedButton>
    6be0:	fe 01       	movw	r30, r28
    6be2:	e2 56       	subi	r30, 0x62	; 98
    6be4:	ff 4f       	sbci	r31, 0xFF	; 255
    6be6:	80 83       	st	Z, r24

			}while(Local_u8KeypadpressedValue <'1' || Local_u8KeypadpressedValue > '9');
    6be8:	fe 01       	movw	r30, r28
    6bea:	e2 56       	subi	r30, 0x62	; 98
    6bec:	ff 4f       	sbci	r31, 0xFF	; 255
    6bee:	80 81       	ld	r24, Z
    6bf0:	81 33       	cpi	r24, 0x31	; 49
    6bf2:	a0 f3       	brcs	.-24     	; 0x6bdc <main+0x1446>
    6bf4:	fe 01       	movw	r30, r28
    6bf6:	e2 56       	subi	r30, 0x62	; 98
    6bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    6bfa:	80 81       	ld	r24, Z
    6bfc:	8a 33       	cpi	r24, 0x3A	; 58
    6bfe:	70 f7       	brcc	.-36     	; 0x6bdc <main+0x1446>
			CLCD_voidSendCharacter(Local_u8KeypadpressedValue);
    6c00:	fe 01       	movw	r30, r28
    6c02:	e2 56       	subi	r30, 0x62	; 98
    6c04:	ff 4f       	sbci	r31, 0xFF	; 255
    6c06:	80 81       	ld	r24, Z
    6c08:	0e 94 3b 21 	call	0x4276	; 0x4276 <CLCD_voidSendCharacter>
			Local_u8Temperature = Local_u8Temperature*10 + (Local_u8KeypadpressedValue - '0');
    6c0c:	fe 01       	movw	r30, r28
    6c0e:	e5 56       	subi	r30, 0x65	; 101
    6c10:	ff 4f       	sbci	r31, 0xFF	; 255
    6c12:	80 81       	ld	r24, Z
    6c14:	88 2f       	mov	r24, r24
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	9c 01       	movw	r18, r24
    6c1a:	22 0f       	add	r18, r18
    6c1c:	33 1f       	adc	r19, r19
    6c1e:	c9 01       	movw	r24, r18
    6c20:	88 0f       	add	r24, r24
    6c22:	99 1f       	adc	r25, r25
    6c24:	88 0f       	add	r24, r24
    6c26:	99 1f       	adc	r25, r25
    6c28:	82 0f       	add	r24, r18
    6c2a:	93 1f       	adc	r25, r19
    6c2c:	98 2f       	mov	r25, r24
    6c2e:	fe 01       	movw	r30, r28
    6c30:	e2 56       	subi	r30, 0x62	; 98
    6c32:	ff 4f       	sbci	r31, 0xFF	; 255
    6c34:	80 81       	ld	r24, Z
    6c36:	89 0f       	add	r24, r25
    6c38:	fe 01       	movw	r30, r28
    6c3a:	e5 56       	subi	r30, 0x65	; 101
    6c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    6c3e:	80 53       	subi	r24, 0x30	; 48
    6c40:	80 83       	st	Z, r24
			Local_u8KeypadpressedValue = NOT_PRESSED;
    6c42:	fe 01       	movw	r30, r28
    6c44:	e2 56       	subi	r30, 0x62	; 98
    6c46:	ff 4f       	sbci	r31, 0xFF	; 255
    6c48:	10 82       	st	Z, r1
    6c4a:	80 e0       	ldi	r24, 0x00	; 0
    6c4c:	90 e0       	ldi	r25, 0x00	; 0
    6c4e:	aa ef       	ldi	r26, 0xFA	; 250
    6c50:	b3 e4       	ldi	r27, 0x43	; 67
    6c52:	89 8f       	std	Y+25, r24	; 0x19
    6c54:	9a 8f       	std	Y+26, r25	; 0x1a
    6c56:	ab 8f       	std	Y+27, r26	; 0x1b
    6c58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c5a:	69 8d       	ldd	r22, Y+25	; 0x19
    6c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c62:	20 e0       	ldi	r18, 0x00	; 0
    6c64:	30 e0       	ldi	r19, 0x00	; 0
    6c66:	4a ef       	ldi	r20, 0xFA	; 250
    6c68:	54 e4       	ldi	r21, 0x44	; 68
    6c6a:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    6c6e:	dc 01       	movw	r26, r24
    6c70:	cb 01       	movw	r24, r22
    6c72:	8d 8b       	std	Y+21, r24	; 0x15
    6c74:	9e 8b       	std	Y+22, r25	; 0x16
    6c76:	af 8b       	std	Y+23, r26	; 0x17
    6c78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    6c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    6c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    6c80:	98 8d       	ldd	r25, Y+24	; 0x18
    6c82:	20 e0       	ldi	r18, 0x00	; 0
    6c84:	30 e0       	ldi	r19, 0x00	; 0
    6c86:	40 e8       	ldi	r20, 0x80	; 128
    6c88:	5f e3       	ldi	r21, 0x3F	; 63
    6c8a:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    6c8e:	88 23       	and	r24, r24
    6c90:	2c f4       	brge	.+10     	; 0x6c9c <main+0x1506>
		__ticks = 1;
    6c92:	81 e0       	ldi	r24, 0x01	; 1
    6c94:	90 e0       	ldi	r25, 0x00	; 0
    6c96:	9c 8b       	std	Y+20, r25	; 0x14
    6c98:	8b 8b       	std	Y+19, r24	; 0x13
    6c9a:	3f c0       	rjmp	.+126    	; 0x6d1a <main+0x1584>
	else if (__tmp > 65535)
    6c9c:	6d 89       	ldd	r22, Y+21	; 0x15
    6c9e:	7e 89       	ldd	r23, Y+22	; 0x16
    6ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    6ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    6ca4:	20 e0       	ldi	r18, 0x00	; 0
    6ca6:	3f ef       	ldi	r19, 0xFF	; 255
    6ca8:	4f e7       	ldi	r20, 0x7F	; 127
    6caa:	57 e4       	ldi	r21, 0x47	; 71
    6cac:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    6cb0:	18 16       	cp	r1, r24
    6cb2:	4c f5       	brge	.+82     	; 0x6d06 <main+0x1570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6cb4:	69 8d       	ldd	r22, Y+25	; 0x19
    6cb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6cb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6cba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6cbc:	20 e0       	ldi	r18, 0x00	; 0
    6cbe:	30 e0       	ldi	r19, 0x00	; 0
    6cc0:	40 e2       	ldi	r20, 0x20	; 32
    6cc2:	51 e4       	ldi	r21, 0x41	; 65
    6cc4:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    6cc8:	dc 01       	movw	r26, r24
    6cca:	cb 01       	movw	r24, r22
    6ccc:	bc 01       	movw	r22, r24
    6cce:	cd 01       	movw	r24, r26
    6cd0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6cd4:	dc 01       	movw	r26, r24
    6cd6:	cb 01       	movw	r24, r22
    6cd8:	9c 8b       	std	Y+20, r25	; 0x14
    6cda:	8b 8b       	std	Y+19, r24	; 0x13
    6cdc:	0f c0       	rjmp	.+30     	; 0x6cfc <main+0x1566>
    6cde:	88 ec       	ldi	r24, 0xC8	; 200
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	9a 8b       	std	Y+18, r25	; 0x12
    6ce4:	89 8b       	std	Y+17, r24	; 0x11
    6ce6:	89 89       	ldd	r24, Y+17	; 0x11
    6ce8:	9a 89       	ldd	r25, Y+18	; 0x12
    6cea:	01 97       	sbiw	r24, 0x01	; 1
    6cec:	f1 f7       	brne	.-4      	; 0x6cea <main+0x1554>
    6cee:	9a 8b       	std	Y+18, r25	; 0x12
    6cf0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    6cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    6cf6:	01 97       	sbiw	r24, 0x01	; 1
    6cf8:	9c 8b       	std	Y+20, r25	; 0x14
    6cfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    6cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    6d00:	00 97       	sbiw	r24, 0x00	; 0
    6d02:	69 f7       	brne	.-38     	; 0x6cde <main+0x1548>
    6d04:	14 c0       	rjmp	.+40     	; 0x6d2e <main+0x1598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d06:	6d 89       	ldd	r22, Y+21	; 0x15
    6d08:	7e 89       	ldd	r23, Y+22	; 0x16
    6d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    6d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    6d0e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6d12:	dc 01       	movw	r26, r24
    6d14:	cb 01       	movw	r24, r22
    6d16:	9c 8b       	std	Y+20, r25	; 0x14
    6d18:	8b 8b       	std	Y+19, r24	; 0x13
    6d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    6d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    6d1e:	98 8b       	std	Y+16, r25	; 0x10
    6d20:	8f 87       	std	Y+15, r24	; 0x0f
    6d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d24:	98 89       	ldd	r25, Y+16	; 0x10
    6d26:	01 97       	sbiw	r24, 0x01	; 1
    6d28:	f1 f7       	brne	.-4      	; 0x6d26 <main+0x1590>
    6d2a:	98 8b       	std	Y+16, r25	; 0x10
    6d2c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			CLCD_voidClearScreen();
    6d2e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <CLCD_voidClearScreen>
			CLCD_voidSendString((u8*)"Temperature sent");
    6d32:	8b e8       	ldi	r24, 0x8B	; 139
    6d34:	91 e0       	ldi	r25, 0x01	; 1
    6d36:	0e 94 55 21 	call	0x42aa	; 0x42aa <CLCD_voidSendString>
    6d3a:	80 e0       	ldi	r24, 0x00	; 0
    6d3c:	90 e0       	ldi	r25, 0x00	; 0
    6d3e:	aa ef       	ldi	r26, 0xFA	; 250
    6d40:	b3 e4       	ldi	r27, 0x43	; 67
    6d42:	8b 87       	std	Y+11, r24	; 0x0b
    6d44:	9c 87       	std	Y+12, r25	; 0x0c
    6d46:	ad 87       	std	Y+13, r26	; 0x0d
    6d48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d52:	20 e0       	ldi	r18, 0x00	; 0
    6d54:	30 e0       	ldi	r19, 0x00	; 0
    6d56:	4a ef       	ldi	r20, 0xFA	; 250
    6d58:	54 e4       	ldi	r21, 0x44	; 68
    6d5a:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    6d5e:	dc 01       	movw	r26, r24
    6d60:	cb 01       	movw	r24, r22
    6d62:	8f 83       	std	Y+7, r24	; 0x07
    6d64:	98 87       	std	Y+8, r25	; 0x08
    6d66:	a9 87       	std	Y+9, r26	; 0x09
    6d68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    6d6c:	78 85       	ldd	r23, Y+8	; 0x08
    6d6e:	89 85       	ldd	r24, Y+9	; 0x09
    6d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d72:	20 e0       	ldi	r18, 0x00	; 0
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	40 e8       	ldi	r20, 0x80	; 128
    6d78:	5f e3       	ldi	r21, 0x3F	; 63
    6d7a:	0e 94 31 12 	call	0x2462	; 0x2462 <__ltsf2>
    6d7e:	88 23       	and	r24, r24
    6d80:	2c f4       	brge	.+10     	; 0x6d8c <main+0x15f6>
		__ticks = 1;
    6d82:	81 e0       	ldi	r24, 0x01	; 1
    6d84:	90 e0       	ldi	r25, 0x00	; 0
    6d86:	9e 83       	std	Y+6, r25	; 0x06
    6d88:	8d 83       	std	Y+5, r24	; 0x05
    6d8a:	3f c0       	rjmp	.+126    	; 0x6e0a <main+0x1674>
	else if (__tmp > 65535)
    6d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    6d8e:	78 85       	ldd	r23, Y+8	; 0x08
    6d90:	89 85       	ldd	r24, Y+9	; 0x09
    6d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d94:	20 e0       	ldi	r18, 0x00	; 0
    6d96:	3f ef       	ldi	r19, 0xFF	; 255
    6d98:	4f e7       	ldi	r20, 0x7F	; 127
    6d9a:	57 e4       	ldi	r21, 0x47	; 71
    6d9c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__gtsf2>
    6da0:	18 16       	cp	r1, r24
    6da2:	4c f5       	brge	.+82     	; 0x6df6 <main+0x1660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    6daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dac:	20 e0       	ldi	r18, 0x00	; 0
    6dae:	30 e0       	ldi	r19, 0x00	; 0
    6db0:	40 e2       	ldi	r20, 0x20	; 32
    6db2:	51 e4       	ldi	r21, 0x41	; 65
    6db4:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3>
    6db8:	dc 01       	movw	r26, r24
    6dba:	cb 01       	movw	r24, r22
    6dbc:	bc 01       	movw	r22, r24
    6dbe:	cd 01       	movw	r24, r26
    6dc0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6dc4:	dc 01       	movw	r26, r24
    6dc6:	cb 01       	movw	r24, r22
    6dc8:	9e 83       	std	Y+6, r25	; 0x06
    6dca:	8d 83       	std	Y+5, r24	; 0x05
    6dcc:	0f c0       	rjmp	.+30     	; 0x6dec <main+0x1656>
    6dce:	88 ec       	ldi	r24, 0xC8	; 200
    6dd0:	90 e0       	ldi	r25, 0x00	; 0
    6dd2:	9c 83       	std	Y+4, r25	; 0x04
    6dd4:	8b 83       	std	Y+3, r24	; 0x03
    6dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    6dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    6dda:	01 97       	sbiw	r24, 0x01	; 1
    6ddc:	f1 f7       	brne	.-4      	; 0x6dda <main+0x1644>
    6dde:	9c 83       	std	Y+4, r25	; 0x04
    6de0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6de2:	8d 81       	ldd	r24, Y+5	; 0x05
    6de4:	9e 81       	ldd	r25, Y+6	; 0x06
    6de6:	01 97       	sbiw	r24, 0x01	; 1
    6de8:	9e 83       	std	Y+6, r25	; 0x06
    6dea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dec:	8d 81       	ldd	r24, Y+5	; 0x05
    6dee:	9e 81       	ldd	r25, Y+6	; 0x06
    6df0:	00 97       	sbiw	r24, 0x00	; 0
    6df2:	69 f7       	brne	.-38     	; 0x6dce <main+0x1638>
    6df4:	14 c0       	rjmp	.+40     	; 0x6e1e <main+0x1688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6df6:	6f 81       	ldd	r22, Y+7	; 0x07
    6df8:	78 85       	ldd	r23, Y+8	; 0x08
    6dfa:	89 85       	ldd	r24, Y+9	; 0x09
    6dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dfe:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6e02:	dc 01       	movw	r26, r24
    6e04:	cb 01       	movw	r24, r22
    6e06:	9e 83       	std	Y+6, r25	; 0x06
    6e08:	8d 83       	std	Y+5, r24	; 0x05
    6e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    6e0e:	9a 83       	std	Y+2, r25	; 0x02
    6e10:	89 83       	std	Y+1, r24	; 0x01
    6e12:	89 81       	ldd	r24, Y+1	; 0x01
    6e14:	9a 81       	ldd	r25, Y+2	; 0x02
    6e16:	01 97       	sbiw	r24, 0x01	; 1
    6e18:	f1 f7       	brne	.-4      	; 0x6e16 <main+0x1680>
    6e1a:	9a 83       	std	Y+2, r25	; 0x02
    6e1c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			Local_u8Menu = COND_WINDOW_SEL;
    6e1e:	fe 01       	movw	r30, r28
    6e20:	ee 55       	subi	r30, 0x5E	; 94
    6e22:	ff 4f       	sbci	r31, 0xFF	; 255
    6e24:	86 e3       	ldi	r24, 0x36	; 54
    6e26:	80 83       	st	Z, r24
    6e28:	cd cc       	rjmp	.-1638   	; 0x67c4 <main+0x102e>
			/* SPI code to send Temperature */
			break;
		case CONTROL_AIR_COND_SEL :
			APP_voidDisplayMenu(Local_u8Menu);
    6e2a:	fe 01       	movw	r30, r28
    6e2c:	ee 55       	subi	r30, 0x5E	; 94
    6e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    6e30:	80 81       	ld	r24, Z
    6e32:	0e 94 bf 2b 	call	0x577e	; 0x577e <APP_voidDisplayMenu>
			Local_u8Menu = COND_WINDOW_SEL;
    6e36:	fe 01       	movw	r30, r28
    6e38:	ee 55       	subi	r30, 0x5E	; 94
    6e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e3c:	86 e3       	ldi	r24, 0x36	; 54
    6e3e:	80 83       	st	Z, r24
    6e40:	c1 cc       	rjmp	.-1662   	; 0x67c4 <main+0x102e>

00006e42 <__mulsi3>:
    6e42:	62 9f       	mul	r22, r18
    6e44:	d0 01       	movw	r26, r0
    6e46:	73 9f       	mul	r23, r19
    6e48:	f0 01       	movw	r30, r0
    6e4a:	82 9f       	mul	r24, r18
    6e4c:	e0 0d       	add	r30, r0
    6e4e:	f1 1d       	adc	r31, r1
    6e50:	64 9f       	mul	r22, r20
    6e52:	e0 0d       	add	r30, r0
    6e54:	f1 1d       	adc	r31, r1
    6e56:	92 9f       	mul	r25, r18
    6e58:	f0 0d       	add	r31, r0
    6e5a:	83 9f       	mul	r24, r19
    6e5c:	f0 0d       	add	r31, r0
    6e5e:	74 9f       	mul	r23, r20
    6e60:	f0 0d       	add	r31, r0
    6e62:	65 9f       	mul	r22, r21
    6e64:	f0 0d       	add	r31, r0
    6e66:	99 27       	eor	r25, r25
    6e68:	72 9f       	mul	r23, r18
    6e6a:	b0 0d       	add	r27, r0
    6e6c:	e1 1d       	adc	r30, r1
    6e6e:	f9 1f       	adc	r31, r25
    6e70:	63 9f       	mul	r22, r19
    6e72:	b0 0d       	add	r27, r0
    6e74:	e1 1d       	adc	r30, r1
    6e76:	f9 1f       	adc	r31, r25
    6e78:	bd 01       	movw	r22, r26
    6e7a:	cf 01       	movw	r24, r30
    6e7c:	11 24       	eor	r1, r1
    6e7e:	08 95       	ret

00006e80 <__udivmodsi4>:
    6e80:	a1 e2       	ldi	r26, 0x21	; 33
    6e82:	1a 2e       	mov	r1, r26
    6e84:	aa 1b       	sub	r26, r26
    6e86:	bb 1b       	sub	r27, r27
    6e88:	fd 01       	movw	r30, r26
    6e8a:	0d c0       	rjmp	.+26     	; 0x6ea6 <__udivmodsi4_ep>

00006e8c <__udivmodsi4_loop>:
    6e8c:	aa 1f       	adc	r26, r26
    6e8e:	bb 1f       	adc	r27, r27
    6e90:	ee 1f       	adc	r30, r30
    6e92:	ff 1f       	adc	r31, r31
    6e94:	a2 17       	cp	r26, r18
    6e96:	b3 07       	cpc	r27, r19
    6e98:	e4 07       	cpc	r30, r20
    6e9a:	f5 07       	cpc	r31, r21
    6e9c:	20 f0       	brcs	.+8      	; 0x6ea6 <__udivmodsi4_ep>
    6e9e:	a2 1b       	sub	r26, r18
    6ea0:	b3 0b       	sbc	r27, r19
    6ea2:	e4 0b       	sbc	r30, r20
    6ea4:	f5 0b       	sbc	r31, r21

00006ea6 <__udivmodsi4_ep>:
    6ea6:	66 1f       	adc	r22, r22
    6ea8:	77 1f       	adc	r23, r23
    6eaa:	88 1f       	adc	r24, r24
    6eac:	99 1f       	adc	r25, r25
    6eae:	1a 94       	dec	r1
    6eb0:	69 f7       	brne	.-38     	; 0x6e8c <__udivmodsi4_loop>
    6eb2:	60 95       	com	r22
    6eb4:	70 95       	com	r23
    6eb6:	80 95       	com	r24
    6eb8:	90 95       	com	r25
    6eba:	9b 01       	movw	r18, r22
    6ebc:	ac 01       	movw	r20, r24
    6ebe:	bd 01       	movw	r22, r26
    6ec0:	cf 01       	movw	r24, r30
    6ec2:	08 95       	ret

00006ec4 <__prologue_saves__>:
    6ec4:	2f 92       	push	r2
    6ec6:	3f 92       	push	r3
    6ec8:	4f 92       	push	r4
    6eca:	5f 92       	push	r5
    6ecc:	6f 92       	push	r6
    6ece:	7f 92       	push	r7
    6ed0:	8f 92       	push	r8
    6ed2:	9f 92       	push	r9
    6ed4:	af 92       	push	r10
    6ed6:	bf 92       	push	r11
    6ed8:	cf 92       	push	r12
    6eda:	df 92       	push	r13
    6edc:	ef 92       	push	r14
    6ede:	ff 92       	push	r15
    6ee0:	0f 93       	push	r16
    6ee2:	1f 93       	push	r17
    6ee4:	cf 93       	push	r28
    6ee6:	df 93       	push	r29
    6ee8:	cd b7       	in	r28, 0x3d	; 61
    6eea:	de b7       	in	r29, 0x3e	; 62
    6eec:	ca 1b       	sub	r28, r26
    6eee:	db 0b       	sbc	r29, r27
    6ef0:	0f b6       	in	r0, 0x3f	; 63
    6ef2:	f8 94       	cli
    6ef4:	de bf       	out	0x3e, r29	; 62
    6ef6:	0f be       	out	0x3f, r0	; 63
    6ef8:	cd bf       	out	0x3d, r28	; 61
    6efa:	09 94       	ijmp

00006efc <__epilogue_restores__>:
    6efc:	2a 88       	ldd	r2, Y+18	; 0x12
    6efe:	39 88       	ldd	r3, Y+17	; 0x11
    6f00:	48 88       	ldd	r4, Y+16	; 0x10
    6f02:	5f 84       	ldd	r5, Y+15	; 0x0f
    6f04:	6e 84       	ldd	r6, Y+14	; 0x0e
    6f06:	7d 84       	ldd	r7, Y+13	; 0x0d
    6f08:	8c 84       	ldd	r8, Y+12	; 0x0c
    6f0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    6f0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    6f0e:	b9 84       	ldd	r11, Y+9	; 0x09
    6f10:	c8 84       	ldd	r12, Y+8	; 0x08
    6f12:	df 80       	ldd	r13, Y+7	; 0x07
    6f14:	ee 80       	ldd	r14, Y+6	; 0x06
    6f16:	fd 80       	ldd	r15, Y+5	; 0x05
    6f18:	0c 81       	ldd	r16, Y+4	; 0x04
    6f1a:	1b 81       	ldd	r17, Y+3	; 0x03
    6f1c:	aa 81       	ldd	r26, Y+2	; 0x02
    6f1e:	b9 81       	ldd	r27, Y+1	; 0x01
    6f20:	ce 0f       	add	r28, r30
    6f22:	d1 1d       	adc	r29, r1
    6f24:	0f b6       	in	r0, 0x3f	; 63
    6f26:	f8 94       	cli
    6f28:	de bf       	out	0x3e, r29	; 62
    6f2a:	0f be       	out	0x3f, r0	; 63
    6f2c:	cd bf       	out	0x3d, r28	; 61
    6f2e:	ed 01       	movw	r28, r26
    6f30:	08 95       	ret

00006f32 <_exit>:
    6f32:	f8 94       	cli

00006f34 <__stop_program>:
    6f34:	ff cf       	rjmp	.-2      	; 0x6f34 <__stop_program>
